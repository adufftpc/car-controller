
car-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007128  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08007238  08007238  00017238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007418  08007418  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007418  08007418  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007418  08007418  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007418  08007418  00017418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800741c  0800741c  0001741c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002224  20000074  08007494  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002298  08007494  00022298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e274  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043bf  00000000  00000000  0003e311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  000426d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  00043ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bce6  00000000  00000000  00045118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a331  00000000  00000000  00060dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099868  00000000  00000000  0007b12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00114997  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e14  00000000  00000000  001149ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007220 	.word	0x08007220

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007220 	.word	0x08007220

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000164:	4b08      	ldr	r3, [pc, #32]	; (8000188 <HAL_Init+0x28>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a07      	ldr	r2, [pc, #28]	; (8000188 <HAL_Init+0x28>)
 800016a:	f043 0310 	orr.w	r3, r3, #16
 800016e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000170:	2003      	movs	r0, #3
 8000172:	f000 fde9 	bl	8000d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000176:	2000      	movs	r0, #0
 8000178:	f006 f97c 	bl	8006474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800017c:	f006 f942 	bl	8006404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000180:	2300      	movs	r3, #0
}
 8000182:	4618      	mov	r0, r3
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40022000 	.word	0x40022000

0800018c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <HAL_IncTick+0x1c>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	461a      	mov	r2, r3
 8000196:	4b05      	ldr	r3, [pc, #20]	; (80001ac <HAL_IncTick+0x20>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4413      	add	r3, r2
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <HAL_IncTick+0x20>)
 800019e:	6013      	str	r3, [r2, #0]
}
 80001a0:	bf00      	nop
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000004 	.word	0x20000004
 80001ac:	20001cb4 	.word	0x20001cb4

080001b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  return uwTick;
 80001b4:	4b02      	ldr	r3, [pc, #8]	; (80001c0 <HAL_GetTick+0x10>)
 80001b6:	681b      	ldr	r3, [r3, #0]
}
 80001b8:	4618      	mov	r0, r3
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	20001cb4 	.word	0x20001cb4

080001c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b086      	sub	sp, #24
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80001cc:	2300      	movs	r3, #0
 80001ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80001d0:	2300      	movs	r3, #0
 80001d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d101      	bne.n	80001e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80001e2:	2301      	movs	r3, #1
 80001e4:	e0be      	b.n	8000364 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	689b      	ldr	r3, [r3, #8]
 80001ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d109      	bne.n	8000208 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2200      	movs	r2, #0
 80001f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	2200      	movs	r2, #0
 80001fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000202:	6878      	ldr	r0, [r7, #4]
 8000204:	f005 fdd6 	bl	8005db4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f000 fabd 	bl	8000788 <ADC_ConversionStop_Disable>
 800020e:	4603      	mov	r3, r0
 8000210:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000216:	f003 0310 	and.w	r3, r3, #16
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8099 	bne.w	8000352 <HAL_ADC_Init+0x18e>
 8000220:	7dfb      	ldrb	r3, [r7, #23]
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8095 	bne.w	8000352 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800022c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000230:	f023 0302 	bic.w	r3, r3, #2
 8000234:	f043 0202 	orr.w	r2, r3, #2
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000244:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	7b1b      	ldrb	r3, [r3, #12]
 800024a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800024c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800024e:	68ba      	ldr	r2, [r7, #8]
 8000250:	4313      	orrs	r3, r2
 8000252:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800025c:	d003      	beq.n	8000266 <HAL_ADC_Init+0xa2>
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d102      	bne.n	800026c <HAL_ADC_Init+0xa8>
 8000266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800026a:	e000      	b.n	800026e <HAL_ADC_Init+0xaa>
 800026c:	2300      	movs	r3, #0
 800026e:	693a      	ldr	r2, [r7, #16]
 8000270:	4313      	orrs	r3, r2
 8000272:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	7d1b      	ldrb	r3, [r3, #20]
 8000278:	2b01      	cmp	r3, #1
 800027a:	d119      	bne.n	80002b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	7b1b      	ldrb	r3, [r3, #12]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d109      	bne.n	8000298 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	3b01      	subs	r3, #1
 800028a:	035a      	lsls	r2, r3, #13
 800028c:	693b      	ldr	r3, [r7, #16]
 800028e:	4313      	orrs	r3, r2
 8000290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000294:	613b      	str	r3, [r7, #16]
 8000296:	e00b      	b.n	80002b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800029c:	f043 0220 	orr.w	r2, r3, #32
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002a8:	f043 0201 	orr.w	r2, r3, #1
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	693a      	ldr	r2, [r7, #16]
 80002c0:	430a      	orrs	r2, r1
 80002c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	689a      	ldr	r2, [r3, #8]
 80002ca:	4b28      	ldr	r3, [pc, #160]	; (800036c <HAL_ADC_Init+0x1a8>)
 80002cc:	4013      	ands	r3, r2
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	6812      	ldr	r2, [r2, #0]
 80002d2:	68b9      	ldr	r1, [r7, #8]
 80002d4:	430b      	orrs	r3, r1
 80002d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002e0:	d003      	beq.n	80002ea <HAL_ADC_Init+0x126>
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	689b      	ldr	r3, [r3, #8]
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d104      	bne.n	80002f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	691b      	ldr	r3, [r3, #16]
 80002ee:	3b01      	subs	r3, #1
 80002f0:	051b      	lsls	r3, r3, #20
 80002f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	68fa      	ldr	r2, [r7, #12]
 8000304:	430a      	orrs	r2, r1
 8000306:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	689a      	ldr	r2, [r3, #8]
 800030e:	4b18      	ldr	r3, [pc, #96]	; (8000370 <HAL_ADC_Init+0x1ac>)
 8000310:	4013      	ands	r3, r2
 8000312:	68ba      	ldr	r2, [r7, #8]
 8000314:	429a      	cmp	r2, r3
 8000316:	d10b      	bne.n	8000330 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000322:	f023 0303 	bic.w	r3, r3, #3
 8000326:	f043 0201 	orr.w	r2, r3, #1
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800032e:	e018      	b.n	8000362 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000334:	f023 0312 	bic.w	r3, r3, #18
 8000338:	f043 0210 	orr.w	r2, r3, #16
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000344:	f043 0201 	orr.w	r2, r3, #1
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800034c:	2301      	movs	r3, #1
 800034e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000350:	e007      	b.n	8000362 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000356:	f043 0210 	orr.w	r2, r3, #16
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800035e:	2301      	movs	r3, #1
 8000360:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000362:	7dfb      	ldrb	r3, [r7, #23]
}
 8000364:	4618      	mov	r0, r3
 8000366:	3718      	adds	r7, #24
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	ffe1f7fd 	.word	0xffe1f7fd
 8000370:	ff1f0efe 	.word	0xff1f0efe

08000374 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000386:	2b01      	cmp	r3, #1
 8000388:	d101      	bne.n	800038e <HAL_ADC_Start+0x1a>
 800038a:	2302      	movs	r3, #2
 800038c:	e098      	b.n	80004c0 <HAL_ADC_Start+0x14c>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2201      	movs	r2, #1
 8000392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f000 f9a4 	bl	80006e4 <ADC_Enable>
 800039c:	4603      	mov	r3, r0
 800039e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	f040 8087 	bne.w	80004b6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003b0:	f023 0301 	bic.w	r3, r3, #1
 80003b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a41      	ldr	r2, [pc, #260]	; (80004c8 <HAL_ADC_Start+0x154>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d105      	bne.n	80003d2 <HAL_ADC_Start+0x5e>
 80003c6:	4b41      	ldr	r3, [pc, #260]	; (80004cc <HAL_ADC_Start+0x158>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d115      	bne.n	80003fe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d026      	beq.n	800043a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80003fc:	e01d      	b.n	800043a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000402:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a2f      	ldr	r2, [pc, #188]	; (80004cc <HAL_ADC_Start+0x158>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d004      	beq.n	800041e <HAL_ADC_Start+0xaa>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a2b      	ldr	r2, [pc, #172]	; (80004c8 <HAL_ADC_Start+0x154>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d10d      	bne.n	800043a <HAL_ADC_Start+0xc6>
 800041e:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <HAL_ADC_Start+0x158>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000426:	2b00      	cmp	r3, #0
 8000428:	d007      	beq.n	800043a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800042e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000432:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800043e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000442:	2b00      	cmp	r3, #0
 8000444:	d006      	beq.n	8000454 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800044a:	f023 0206 	bic.w	r2, r3, #6
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	62da      	str	r2, [r3, #44]	; 0x2c
 8000452:	e002      	b.n	800045a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2200      	movs	r2, #0
 8000458:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2200      	movs	r2, #0
 800045e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f06f 0202 	mvn.w	r2, #2
 800046a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000476:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800047a:	d113      	bne.n	80004a4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000480:	4a11      	ldr	r2, [pc, #68]	; (80004c8 <HAL_ADC_Start+0x154>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d105      	bne.n	8000492 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000486:	4b11      	ldr	r3, [pc, #68]	; (80004cc <HAL_ADC_Start+0x158>)
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800048e:	2b00      	cmp	r3, #0
 8000490:	d108      	bne.n	80004a4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	e00c      	b.n	80004be <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	e003      	b.n	80004be <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2200      	movs	r2, #0
 80004ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80004be:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40012800 	.word	0x40012800
 80004cc:	40012400 	.word	0x40012400

080004d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004fe:	2300      	movs	r3, #0
 8000500:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800050c:	2b01      	cmp	r3, #1
 800050e:	d101      	bne.n	8000514 <HAL_ADC_ConfigChannel+0x20>
 8000510:	2302      	movs	r3, #2
 8000512:	e0dc      	b.n	80006ce <HAL_ADC_ConfigChannel+0x1da>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2201      	movs	r2, #1
 8000518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	2b06      	cmp	r3, #6
 8000522:	d81c      	bhi.n	800055e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	685a      	ldr	r2, [r3, #4]
 800052e:	4613      	mov	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	4413      	add	r3, r2
 8000534:	3b05      	subs	r3, #5
 8000536:	221f      	movs	r2, #31
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	43db      	mvns	r3, r3
 800053e:	4019      	ands	r1, r3
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	685a      	ldr	r2, [r3, #4]
 8000548:	4613      	mov	r3, r2
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	4413      	add	r3, r2
 800054e:	3b05      	subs	r3, #5
 8000550:	fa00 f203 	lsl.w	r2, r0, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	430a      	orrs	r2, r1
 800055a:	635a      	str	r2, [r3, #52]	; 0x34
 800055c:	e03c      	b.n	80005d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	2b0c      	cmp	r3, #12
 8000564:	d81c      	bhi.n	80005a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	685a      	ldr	r2, [r3, #4]
 8000570:	4613      	mov	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4413      	add	r3, r2
 8000576:	3b23      	subs	r3, #35	; 0x23
 8000578:	221f      	movs	r2, #31
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	43db      	mvns	r3, r3
 8000580:	4019      	ands	r1, r3
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	6818      	ldr	r0, [r3, #0]
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	685a      	ldr	r2, [r3, #4]
 800058a:	4613      	mov	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	4413      	add	r3, r2
 8000590:	3b23      	subs	r3, #35	; 0x23
 8000592:	fa00 f203 	lsl.w	r2, r0, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	430a      	orrs	r2, r1
 800059c:	631a      	str	r2, [r3, #48]	; 0x30
 800059e:	e01b      	b.n	80005d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	4613      	mov	r3, r2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	4413      	add	r3, r2
 80005b0:	3b41      	subs	r3, #65	; 0x41
 80005b2:	221f      	movs	r2, #31
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	43db      	mvns	r3, r3
 80005ba:	4019      	ands	r1, r3
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	685a      	ldr	r2, [r3, #4]
 80005c4:	4613      	mov	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	3b41      	subs	r3, #65	; 0x41
 80005cc:	fa00 f203 	lsl.w	r2, r0, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	d91c      	bls.n	800061a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68d9      	ldr	r1, [r3, #12]
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4613      	mov	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	3b1e      	subs	r3, #30
 80005f2:	2207      	movs	r2, #7
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	43db      	mvns	r3, r3
 80005fa:	4019      	ands	r1, r3
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	6898      	ldr	r0, [r3, #8]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4613      	mov	r3, r2
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	4413      	add	r3, r2
 800060a:	3b1e      	subs	r3, #30
 800060c:	fa00 f203 	lsl.w	r2, r0, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	430a      	orrs	r2, r1
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	e019      	b.n	800064e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	6919      	ldr	r1, [r3, #16]
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4613      	mov	r3, r2
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	4413      	add	r3, r2
 800062a:	2207      	movs	r2, #7
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	43db      	mvns	r3, r3
 8000632:	4019      	ands	r1, r3
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	6898      	ldr	r0, [r3, #8]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	fa00 f203 	lsl.w	r2, r0, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	430a      	orrs	r2, r1
 800064c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b10      	cmp	r3, #16
 8000654:	d003      	beq.n	800065e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800065a:	2b11      	cmp	r3, #17
 800065c:	d132      	bne.n	80006c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d125      	bne.n	80006b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000672:	2b00      	cmp	r3, #0
 8000674:	d126      	bne.n	80006c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	689a      	ldr	r2, [r3, #8]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000684:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b10      	cmp	r3, #16
 800068c:	d11a      	bne.n	80006c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <HAL_ADC_ConfigChannel+0x1e8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000694:	fba2 2303 	umull	r2, r3, r2, r3
 8000698:	0c9a      	lsrs	r2, r3, #18
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80006a4:	e002      	b.n	80006ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d1f9      	bne.n	80006a6 <HAL_ADC_ConfigChannel+0x1b2>
 80006b2:	e007      	b.n	80006c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b8:	f043 0220 	orr.w	r2, r3, #32
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80006c0:	2301      	movs	r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	40012400 	.word	0x40012400
 80006dc:	2000000c 	.word	0x2000000c
 80006e0:	431bde83 	.word	0x431bde83

080006e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d039      	beq.n	8000776 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f042 0201 	orr.w	r2, r2, #1
 8000710:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <ADC_Enable+0x9c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <ADC_Enable+0xa0>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	0c9b      	lsrs	r3, r3, #18
 800071e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000720:	e002      	b.n	8000728 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	3b01      	subs	r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f9      	bne.n	8000722 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800072e:	f7ff fd3f 	bl	80001b0 <HAL_GetTick>
 8000732:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000734:	e018      	b.n	8000768 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000736:	f7ff fd3b 	bl	80001b0 <HAL_GetTick>
 800073a:	4602      	mov	r2, r0
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	2b02      	cmp	r3, #2
 8000742:	d911      	bls.n	8000768 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000748:	f043 0210 	orr.w	r2, r3, #16
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000754:	f043 0201 	orr.w	r2, r3, #1
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	e007      	b.n	8000778 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b01      	cmp	r3, #1
 8000774:	d1df      	bne.n	8000736 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000000c 	.word	0x2000000c
 8000784:	431bde83 	.word	0x431bde83

08000788 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d127      	bne.n	80007f2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f022 0201 	bic.w	r2, r2, #1
 80007b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80007b2:	f7ff fcfd 	bl	80001b0 <HAL_GetTick>
 80007b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80007b8:	e014      	b.n	80007e4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80007ba:	f7ff fcf9 	bl	80001b0 <HAL_GetTick>
 80007be:	4602      	mov	r2, r0
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d90d      	bls.n	80007e4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007cc:	f043 0210 	orr.w	r2, r3, #16
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d8:	f043 0201 	orr.w	r2, r3, #1
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e007      	b.n	80007f4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d0e3      	beq.n	80007ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000808:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000812:	2b00      	cmp	r3, #0
 8000814:	d127      	bne.n	8000866 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800081a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800082c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000830:	d115      	bne.n	800085e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000836:	2b00      	cmp	r3, #0
 8000838:	d111      	bne.n	800085e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800084a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d105      	bne.n	800085e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000856:	f043 0201 	orr.w	r2, r3, #1
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f005 fb3a 	bl	8005ed8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000864:	e004      	b.n	8000870 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	6a1b      	ldr	r3, [r3, #32]
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	4798      	blx	r3
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000884:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff fe22 	bl	80004d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	f043 0204 	orr.w	r2, r3, #4
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f7ff fe11 	bl	80004e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d101      	bne.n	80008e6 <HAL_ADCEx_Calibration_Start+0x1e>
 80008e2:	2302      	movs	r3, #2
 80008e4:	e086      	b.n	80009f4 <HAL_ADCEx_Calibration_Start+0x12c>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ff4a 	bl	8000788 <ADC_ConversionStop_Disable>
 80008f4:	4603      	mov	r3, r0
 80008f6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80008f8:	7dfb      	ldrb	r3, [r7, #23]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d175      	bne.n	80009ea <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000902:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000906:	f023 0302 	bic.w	r3, r3, #2
 800090a:	f043 0202 	orr.w	r2, r3, #2
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000912:	4b3a      	ldr	r3, [pc, #232]	; (80009fc <HAL_ADCEx_Calibration_Start+0x134>)
 8000914:	681c      	ldr	r4, [r3, #0]
 8000916:	2002      	movs	r0, #2
 8000918:	f001 faf0 	bl	8001efc <HAL_RCCEx_GetPeriphCLKFreq>
 800091c:	4603      	mov	r3, r0
 800091e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000922:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000924:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000926:	e002      	b.n	800092e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3b01      	subs	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1f9      	bne.n	8000928 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fed5 	bl	80006e4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f042 0208 	orr.w	r2, r2, #8
 8000948:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800094a:	f7ff fc31 	bl	80001b0 <HAL_GetTick>
 800094e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000950:	e014      	b.n	800097c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000952:	f7ff fc2d 	bl	80001b0 <HAL_GetTick>
 8000956:	4602      	mov	r2, r0
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	2b0a      	cmp	r3, #10
 800095e:	d90d      	bls.n	800097c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000964:	f023 0312 	bic.w	r3, r3, #18
 8000968:	f043 0210 	orr.w	r2, r3, #16
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	e03b      	b.n	80009f4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1e3      	bne.n	8000952 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f042 0204 	orr.w	r2, r2, #4
 8000998:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800099a:	f7ff fc09 	bl	80001b0 <HAL_GetTick>
 800099e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80009a0:	e014      	b.n	80009cc <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80009a2:	f7ff fc05 	bl	80001b0 <HAL_GetTick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	2b0a      	cmp	r3, #10
 80009ae:	d90d      	bls.n	80009cc <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	f023 0312 	bic.w	r3, r3, #18
 80009b8:	f043 0210 	orr.w	r2, r3, #16
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e013      	b.n	80009f4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d1e3      	bne.n	80009a2 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009de:	f023 0303 	bic.w	r3, r3, #3
 80009e2:	f043 0201 	orr.w	r2, r3, #1
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	371c      	adds	r7, #28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	2000000c 	.word	0x2000000c

08000a00 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b092      	sub	sp, #72	; 0x48
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d101      	bne.n	8000a20 <HAL_ADCEx_MultiModeStart_DMA+0x20>
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	e08f      	b.n	8000b40 <HAL_ADCEx_MultiModeStart_DMA+0x140>
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2201      	movs	r2, #1
 8000a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000a28:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8000a2a:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a34:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a38:	d00b      	beq.n	8000a52 <HAL_ADCEx_MultiModeStart_DMA+0x52>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3e:	f043 0220 	orr.w	r2, r3, #32
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e076      	b.n	8000b40 <HAL_ADCEx_MultiModeStart_DMA+0x140>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff fe46 	bl	80006e4 <ADC_Enable>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 8000a5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d107      	bne.n	8000a76 <HAL_ADCEx_MultiModeStart_DMA+0x76>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fe3a 	bl	80006e4 <ADC_Enable>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d15a      	bne.n	8000b34 <HAL_ADCEx_MultiModeStart_DMA+0x134>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a82:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d007      	beq.n	8000aac <HAL_ADCEx_MultiModeStart_DMA+0xac>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000aa4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	4a24      	ldr	r2, [pc, #144]	; (8000b50 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	6a1b      	ldr	r3, [r3, #32]
 8000ac6:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6a1b      	ldr	r3, [r3, #32]
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8000ad0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f06f 0202 	mvn.w	r2, #2
 8000ada:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000aea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	6a18      	ldr	r0, [r3, #32]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	334c      	adds	r3, #76	; 0x4c
 8000af6:	4619      	mov	r1, r3
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f000 f9b4 	bl	8000e68 <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b0e:	d108      	bne.n	8000b22 <HAL_ADCEx_MultiModeStart_DMA+0x122>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	e00c      	b.n	8000b3c <HAL_ADCEx_MultiModeStart_DMA+0x13c>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	e003      	b.n	8000b3c <HAL_ADCEx_MultiModeStart_DMA+0x13c>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3748      	adds	r7, #72	; 0x48
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40012800 	.word	0x40012800
 8000b4c:	ffeffcfe 	.word	0xffeffcfe
 8000b50:	080007fd 	.word	0x080007fd
 8000b54:	08000879 	.word	0x08000879
 8000b58:	08000895 	.word	0x08000895

08000b5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b091      	sub	sp, #68	; 0x44
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d101      	bne.n	8000b7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e032      	b.n	8000be0 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_ADCEx_MultiModeConfigChannel+0x90>)
 8000b84:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d016      	beq.n	8000bc2 <HAL_ADCEx_MultiModeConfigChannel+0x66>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d010      	beq.n	8000bc2 <HAL_ADCEx_MultiModeConfigChannel+0x66>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <HAL_ADCEx_MultiModeConfigChannel+0x94>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d10b      	bne.n	8000bc2 <HAL_ADCEx_MultiModeConfigChannel+0x66>
  {
    MODIFY_REG(hadc->Instance->CR1,
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	e008      	b.n	8000bd4 <HAL_ADCEx_MultiModeConfigChannel+0x78>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	f043 0220 	orr.w	r2, r3, #32
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000bdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8000be0:	4618      	mov	r0, r3
 8000be2:	3744      	adds	r7, #68	; 0x44
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40012800 	.word	0x40012800
 8000bf0:	40012400 	.word	0x40012400

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4906      	ldr	r1, [pc, #24]	; (8000c8c <__NVIC_EnableIRQ+0x34>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff4f 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d70:	f7ff ff64 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	6978      	ldr	r0, [r7, #20]
 8000d7c:	f7ff ffb2 	bl	8000ce4 <NVIC_EncodePriority>
 8000d80:	4602      	mov	r2, r0
 8000d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff81 	bl	8000c90 <__NVIC_SetPriority>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff57 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e043      	b.n	8000e52 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <HAL_DMA_Init+0xa8>)
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <HAL_DMA_Init+0xac>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	009a      	lsls	r2, r3, #2
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <HAL_DMA_Init+0xb0>)
 8000de6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2202      	movs	r2, #2
 8000dec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000dfe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2201      	movs	r2, #1
 8000e44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	bffdfff8 	.word	0xbffdfff8
 8000e60:	cccccccd 	.word	0xcccccccd
 8000e64:	40020000 	.word	0x40020000

08000e68 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d101      	bne.n	8000e88 <HAL_DMA_Start_IT+0x20>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e04a      	b.n	8000f1e <HAL_DMA_Start_IT+0xb6>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d13a      	bne.n	8000f10 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0201 	bic.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f000 f938 	bl	8001134 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d008      	beq.n	8000ede <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 020e 	orr.w	r2, r2, #14
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	e00f      	b.n	8000efe <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0204 	bic.w	r2, r2, #4
 8000eec:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f042 020a 	orr.w	r2, r2, #10
 8000efc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f042 0201 	orr.w	r2, r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e005      	b.n	8000f1c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	2204      	movs	r2, #4
 8000f46:	409a      	lsls	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d04f      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0xc8>
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d04a      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0320 	and.w	r3, r3, #32
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d107      	bne.n	8000f78 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0204 	bic.w	r2, r2, #4
 8000f76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a66      	ldr	r2, [pc, #408]	; (8001118 <HAL_DMA_IRQHandler+0x1f0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d029      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xae>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a65      	ldr	r2, [pc, #404]	; (800111c <HAL_DMA_IRQHandler+0x1f4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d022      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0xaa>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a63      	ldr	r2, [pc, #396]	; (8001120 <HAL_DMA_IRQHandler+0x1f8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d01a      	beq.n	8000fcc <HAL_DMA_IRQHandler+0xa4>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a62      	ldr	r2, [pc, #392]	; (8001124 <HAL_DMA_IRQHandler+0x1fc>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d012      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0x9e>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a60      	ldr	r2, [pc, #384]	; (8001128 <HAL_DMA_IRQHandler+0x200>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00a      	beq.n	8000fc0 <HAL_DMA_IRQHandler+0x98>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a5f      	ldr	r2, [pc, #380]	; (800112c <HAL_DMA_IRQHandler+0x204>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d102      	bne.n	8000fba <HAL_DMA_IRQHandler+0x92>
 8000fb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb8:	e00e      	b.n	8000fd8 <HAL_DMA_IRQHandler+0xb0>
 8000fba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000fbe:	e00b      	b.n	8000fd8 <HAL_DMA_IRQHandler+0xb0>
 8000fc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000fc4:	e008      	b.n	8000fd8 <HAL_DMA_IRQHandler+0xb0>
 8000fc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fca:	e005      	b.n	8000fd8 <HAL_DMA_IRQHandler+0xb0>
 8000fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd0:	e002      	b.n	8000fd8 <HAL_DMA_IRQHandler+0xb0>
 8000fd2:	2340      	movs	r3, #64	; 0x40
 8000fd4:	e000      	b.n	8000fd8 <HAL_DMA_IRQHandler+0xb0>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	4a55      	ldr	r2, [pc, #340]	; (8001130 <HAL_DMA_IRQHandler+0x208>)
 8000fda:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 8094 	beq.w	800110e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000fee:	e08e      	b.n	800110e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d056      	beq.n	80010ae <HAL_DMA_IRQHandler+0x186>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d051      	beq.n	80010ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	2b00      	cmp	r3, #0
 8001016:	d10b      	bne.n	8001030 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 020a 	bic.w	r2, r2, #10
 8001026:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a38      	ldr	r2, [pc, #224]	; (8001118 <HAL_DMA_IRQHandler+0x1f0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d029      	beq.n	800108e <HAL_DMA_IRQHandler+0x166>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a37      	ldr	r2, [pc, #220]	; (800111c <HAL_DMA_IRQHandler+0x1f4>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d022      	beq.n	800108a <HAL_DMA_IRQHandler+0x162>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a35      	ldr	r2, [pc, #212]	; (8001120 <HAL_DMA_IRQHandler+0x1f8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d01a      	beq.n	8001084 <HAL_DMA_IRQHandler+0x15c>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a34      	ldr	r2, [pc, #208]	; (8001124 <HAL_DMA_IRQHandler+0x1fc>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d012      	beq.n	800107e <HAL_DMA_IRQHandler+0x156>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a32      	ldr	r2, [pc, #200]	; (8001128 <HAL_DMA_IRQHandler+0x200>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00a      	beq.n	8001078 <HAL_DMA_IRQHandler+0x150>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a31      	ldr	r2, [pc, #196]	; (800112c <HAL_DMA_IRQHandler+0x204>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d102      	bne.n	8001072 <HAL_DMA_IRQHandler+0x14a>
 800106c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001070:	e00e      	b.n	8001090 <HAL_DMA_IRQHandler+0x168>
 8001072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001076:	e00b      	b.n	8001090 <HAL_DMA_IRQHandler+0x168>
 8001078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107c:	e008      	b.n	8001090 <HAL_DMA_IRQHandler+0x168>
 800107e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001082:	e005      	b.n	8001090 <HAL_DMA_IRQHandler+0x168>
 8001084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001088:	e002      	b.n	8001090 <HAL_DMA_IRQHandler+0x168>
 800108a:	2320      	movs	r3, #32
 800108c:	e000      	b.n	8001090 <HAL_DMA_IRQHandler+0x168>
 800108e:	2302      	movs	r3, #2
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <HAL_DMA_IRQHandler+0x208>)
 8001092:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d034      	beq.n	800110e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80010ac:	e02f      	b.n	800110e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	2208      	movs	r2, #8
 80010b4:	409a      	lsls	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d028      	beq.n	8001110 <HAL_DMA_IRQHandler+0x1e8>
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d023      	beq.n	8001110 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 020e 	bic.w	r2, r2, #14
 80010d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e0:	2101      	movs	r1, #1
 80010e2:	fa01 f202 	lsl.w	r2, r1, r2
 80010e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	4798      	blx	r3
    }
  }
  return;
 800110e:	bf00      	nop
 8001110:	bf00      	nop
}
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40020008 	.word	0x40020008
 800111c:	4002001c 	.word	0x4002001c
 8001120:	40020030 	.word	0x40020030
 8001124:	40020044 	.word	0x40020044
 8001128:	40020058 	.word	0x40020058
 800112c:	4002006c 	.word	0x4002006c
 8001130:	40020000 	.word	0x40020000

08001134 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114a:	2101      	movs	r1, #1
 800114c:	fa01 f202 	lsl.w	r2, r1, r2
 8001150:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b10      	cmp	r3, #16
 8001160:	d108      	bne.n	8001174 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001172:	e007      	b.n	8001184 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	60da      	str	r2, [r3, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b08b      	sub	sp, #44	; 0x2c
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a2:	e169      	b.n	8001478 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011a4:	2201      	movs	r2, #1
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	429a      	cmp	r2, r3
 80011be:	f040 8158 	bne.w	8001472 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	4a9a      	ldr	r2, [pc, #616]	; (8001430 <HAL_GPIO_Init+0x2a0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d05e      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011cc:	4a98      	ldr	r2, [pc, #608]	; (8001430 <HAL_GPIO_Init+0x2a0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d875      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 80011d2:	4a98      	ldr	r2, [pc, #608]	; (8001434 <HAL_GPIO_Init+0x2a4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d058      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011d8:	4a96      	ldr	r2, [pc, #600]	; (8001434 <HAL_GPIO_Init+0x2a4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d86f      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 80011de:	4a96      	ldr	r2, [pc, #600]	; (8001438 <HAL_GPIO_Init+0x2a8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d052      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011e4:	4a94      	ldr	r2, [pc, #592]	; (8001438 <HAL_GPIO_Init+0x2a8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d869      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 80011ea:	4a94      	ldr	r2, [pc, #592]	; (800143c <HAL_GPIO_Init+0x2ac>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d04c      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011f0:	4a92      	ldr	r2, [pc, #584]	; (800143c <HAL_GPIO_Init+0x2ac>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d863      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 80011f6:	4a92      	ldr	r2, [pc, #584]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d046      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011fc:	4a90      	ldr	r2, [pc, #576]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d85d      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 8001202:	2b12      	cmp	r3, #18
 8001204:	d82a      	bhi.n	800125c <HAL_GPIO_Init+0xcc>
 8001206:	2b12      	cmp	r3, #18
 8001208:	d859      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 800120a:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <HAL_GPIO_Init+0x80>)
 800120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001210:	0800128b 	.word	0x0800128b
 8001214:	08001265 	.word	0x08001265
 8001218:	08001277 	.word	0x08001277
 800121c:	080012b9 	.word	0x080012b9
 8001220:	080012bf 	.word	0x080012bf
 8001224:	080012bf 	.word	0x080012bf
 8001228:	080012bf 	.word	0x080012bf
 800122c:	080012bf 	.word	0x080012bf
 8001230:	080012bf 	.word	0x080012bf
 8001234:	080012bf 	.word	0x080012bf
 8001238:	080012bf 	.word	0x080012bf
 800123c:	080012bf 	.word	0x080012bf
 8001240:	080012bf 	.word	0x080012bf
 8001244:	080012bf 	.word	0x080012bf
 8001248:	080012bf 	.word	0x080012bf
 800124c:	080012bf 	.word	0x080012bf
 8001250:	080012bf 	.word	0x080012bf
 8001254:	0800126d 	.word	0x0800126d
 8001258:	08001281 	.word	0x08001281
 800125c:	4a79      	ldr	r2, [pc, #484]	; (8001444 <HAL_GPIO_Init+0x2b4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001262:	e02c      	b.n	80012be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	623b      	str	r3, [r7, #32]
          break;
 800126a:	e029      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	3304      	adds	r3, #4
 8001272:	623b      	str	r3, [r7, #32]
          break;
 8001274:	e024      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	3308      	adds	r3, #8
 800127c:	623b      	str	r3, [r7, #32]
          break;
 800127e:	e01f      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	330c      	adds	r3, #12
 8001286:	623b      	str	r3, [r7, #32]
          break;
 8001288:	e01a      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d102      	bne.n	8001298 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001292:	2304      	movs	r3, #4
 8001294:	623b      	str	r3, [r7, #32]
          break;
 8001296:	e013      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d105      	bne.n	80012ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a0:	2308      	movs	r3, #8
 80012a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	611a      	str	r2, [r3, #16]
          break;
 80012aa:	e009      	b.n	80012c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012ac:	2308      	movs	r3, #8
 80012ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	615a      	str	r2, [r3, #20]
          break;
 80012b6:	e003      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
          break;
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          break;
 80012be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d801      	bhi.n	80012ca <HAL_GPIO_Init+0x13a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	e001      	b.n	80012ce <HAL_GPIO_Init+0x13e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3304      	adds	r3, #4
 80012ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2bff      	cmp	r3, #255	; 0xff
 80012d4:	d802      	bhi.n	80012dc <HAL_GPIO_Init+0x14c>
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	e002      	b.n	80012e2 <HAL_GPIO_Init+0x152>
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	3b08      	subs	r3, #8
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	210f      	movs	r1, #15
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	401a      	ands	r2, r3
 80012f4:	6a39      	ldr	r1, [r7, #32]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	431a      	orrs	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80b1 	beq.w	8001472 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001310:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <HAL_GPIO_Init+0x2b8>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <HAL_GPIO_Init+0x2b8>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <HAL_GPIO_Init+0x2b8>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001328:	4a48      	ldr	r2, [pc, #288]	; (800144c <HAL_GPIO_Init+0x2bc>)
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3302      	adds	r3, #2
 8001330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001334:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	220f      	movs	r2, #15
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a40      	ldr	r2, [pc, #256]	; (8001450 <HAL_GPIO_Init+0x2c0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d013      	beq.n	800137c <HAL_GPIO_Init+0x1ec>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a3f      	ldr	r2, [pc, #252]	; (8001454 <HAL_GPIO_Init+0x2c4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d00d      	beq.n	8001378 <HAL_GPIO_Init+0x1e8>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a3e      	ldr	r2, [pc, #248]	; (8001458 <HAL_GPIO_Init+0x2c8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d007      	beq.n	8001374 <HAL_GPIO_Init+0x1e4>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a3d      	ldr	r2, [pc, #244]	; (800145c <HAL_GPIO_Init+0x2cc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d101      	bne.n	8001370 <HAL_GPIO_Init+0x1e0>
 800136c:	2303      	movs	r3, #3
 800136e:	e006      	b.n	800137e <HAL_GPIO_Init+0x1ee>
 8001370:	2304      	movs	r3, #4
 8001372:	e004      	b.n	800137e <HAL_GPIO_Init+0x1ee>
 8001374:	2302      	movs	r3, #2
 8001376:	e002      	b.n	800137e <HAL_GPIO_Init+0x1ee>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <HAL_GPIO_Init+0x1ee>
 800137c:	2300      	movs	r3, #0
 800137e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001380:	f002 0203 	and.w	r2, r2, #3
 8001384:	0092      	lsls	r2, r2, #2
 8001386:	4093      	lsls	r3, r2
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800138e:	492f      	ldr	r1, [pc, #188]	; (800144c <HAL_GPIO_Init+0x2bc>)
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d006      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	492c      	ldr	r1, [pc, #176]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	43db      	mvns	r3, r3
 80013be:	4928      	ldr	r1, [pc, #160]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013d0:	4b23      	ldr	r3, [pc, #140]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4922      	ldr	r1, [pc, #136]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	491e      	ldr	r1, [pc, #120]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	4918      	ldr	r1, [pc, #96]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	608b      	str	r3, [r1, #8]
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	43db      	mvns	r3, r3
 800140e:	4914      	ldr	r1, [pc, #80]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 8001410:	4013      	ands	r3, r2
 8001412:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d021      	beq.n	8001464 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	490e      	ldr	r1, [pc, #56]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	60cb      	str	r3, [r1, #12]
 800142c:	e021      	b.n	8001472 <HAL_GPIO_Init+0x2e2>
 800142e:	bf00      	nop
 8001430:	10320000 	.word	0x10320000
 8001434:	10310000 	.word	0x10310000
 8001438:	10220000 	.word	0x10220000
 800143c:	10210000 	.word	0x10210000
 8001440:	10120000 	.word	0x10120000
 8001444:	10110000 	.word	0x10110000
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000
 8001450:	40010800 	.word	0x40010800
 8001454:	40010c00 	.word	0x40010c00
 8001458:	40011000 	.word	0x40011000
 800145c:	40011400 	.word	0x40011400
 8001460:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_GPIO_Init+0x304>)
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	43db      	mvns	r3, r3
 800146c:	4909      	ldr	r1, [pc, #36]	; (8001494 <HAL_GPIO_Init+0x304>)
 800146e:	4013      	ands	r3, r2
 8001470:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	3301      	adds	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	fa22 f303 	lsr.w	r3, r2, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	f47f ae8e 	bne.w	80011a4 <HAL_GPIO_Init+0x14>
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	372c      	adds	r7, #44	; 0x2c
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014b4:	e003      	b.n	80014be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4013      	ands	r3, r2
 80014e0:	041a      	lsls	r2, r3, #16
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43d9      	mvns	r1, r3
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	400b      	ands	r3, r1
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	611a      	str	r2, [r3, #16]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
	...

080014fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e26c      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8087 	beq.w	800162a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800151c:	4b92      	ldr	r3, [pc, #584]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b04      	cmp	r3, #4
 8001526:	d00c      	beq.n	8001542 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001528:	4b8f      	ldr	r3, [pc, #572]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b08      	cmp	r3, #8
 8001532:	d112      	bne.n	800155a <HAL_RCC_OscConfig+0x5e>
 8001534:	4b8c      	ldr	r3, [pc, #560]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001540:	d10b      	bne.n	800155a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d06c      	beq.n	8001628 <HAL_RCC_OscConfig+0x12c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d168      	bne.n	8001628 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e246      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x76>
 8001564:	4b80      	ldr	r3, [pc, #512]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a7f      	ldr	r2, [pc, #508]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800156a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e02e      	b.n	80015d0 <HAL_RCC_OscConfig+0xd4>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x98>
 800157a:	4b7b      	ldr	r3, [pc, #492]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a7a      	ldr	r2, [pc, #488]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b78      	ldr	r3, [pc, #480]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a77      	ldr	r2, [pc, #476]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800158c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e01d      	b.n	80015d0 <HAL_RCC_OscConfig+0xd4>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0xbc>
 800159e:	4b72      	ldr	r3, [pc, #456]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a71      	ldr	r2, [pc, #452]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b6f      	ldr	r3, [pc, #444]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6e      	ldr	r2, [pc, #440]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0xd4>
 80015b8:	4b6b      	ldr	r3, [pc, #428]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a6a      	ldr	r2, [pc, #424]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b68      	ldr	r3, [pc, #416]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a67      	ldr	r2, [pc, #412]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d013      	beq.n	8001600 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7fe fdea 	bl	80001b0 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7fe fde6 	bl	80001b0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1fa      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b5d      	ldr	r3, [pc, #372]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0xe4>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7fe fdd6 	bl	80001b0 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7fe fdd2 	bl	80001b0 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1e6      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x10c>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d063      	beq.n	80016fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001636:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001642:	4b49      	ldr	r3, [pc, #292]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d11c      	bne.n	8001688 <HAL_RCC_OscConfig+0x18c>
 800164e:	4b46      	ldr	r3, [pc, #280]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d116      	bne.n	8001688 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	4b43      	ldr	r3, [pc, #268]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_RCC_OscConfig+0x176>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e1ba      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4939      	ldr	r1, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	e03a      	b.n	80016fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001690:	4b36      	ldr	r3, [pc, #216]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7fe fd8b 	bl	80001b0 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169e:	f7fe fd87 	bl	80001b0 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e19b      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4927      	ldr	r1, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
 80016d0:	e015      	b.n	80016fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7fe fd6a 	bl	80001b0 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e0:	f7fe fd66 	bl	80001b0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e17a      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d03a      	beq.n	8001780 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d019      	beq.n	8001746 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_RCC_OscConfig+0x274>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7fe fd4a 	bl	80001b0 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001720:	f7fe fd46 	bl	80001b0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e15a      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800173e:	2001      	movs	r0, #1
 8001740:	f000 fb08 	bl	8001d54 <RCC_Delay>
 8001744:	e01c      	b.n	8001780 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_RCC_OscConfig+0x274>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7fe fd30 	bl	80001b0 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001752:	e00f      	b.n	8001774 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001754:	f7fe fd2c 	bl	80001b0 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d908      	bls.n	8001774 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e140      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	42420000 	.word	0x42420000
 8001770:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001774:	4b9e      	ldr	r3, [pc, #632]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e9      	bne.n	8001754 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80a6 	beq.w	80018da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001792:	4b97      	ldr	r3, [pc, #604]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10d      	bne.n	80017ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b94      	ldr	r3, [pc, #592]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a93      	ldr	r2, [pc, #588]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	61d3      	str	r3, [r2, #28]
 80017aa:	4b91      	ldr	r3, [pc, #580]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b6:	2301      	movs	r3, #1
 80017b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	4b8e      	ldr	r3, [pc, #568]	; (80019f4 <HAL_RCC_OscConfig+0x4f8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d118      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c6:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <HAL_RCC_OscConfig+0x4f8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a8a      	ldr	r2, [pc, #552]	; (80019f4 <HAL_RCC_OscConfig+0x4f8>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d2:	f7fe fced 	bl	80001b0 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017da:	f7fe fce9 	bl	80001b0 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b64      	cmp	r3, #100	; 0x64
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e0fd      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ec:	4b81      	ldr	r3, [pc, #516]	; (80019f4 <HAL_RCC_OscConfig+0x4f8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x312>
 8001800:	4b7b      	ldr	r3, [pc, #492]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4a7a      	ldr	r2, [pc, #488]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6213      	str	r3, [r2, #32]
 800180c:	e02d      	b.n	800186a <HAL_RCC_OscConfig+0x36e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x334>
 8001816:	4b76      	ldr	r3, [pc, #472]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a75      	ldr	r2, [pc, #468]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	4b73      	ldr	r3, [pc, #460]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a72      	ldr	r2, [pc, #456]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	f023 0304 	bic.w	r3, r3, #4
 800182c:	6213      	str	r3, [r2, #32]
 800182e:	e01c      	b.n	800186a <HAL_RCC_OscConfig+0x36e>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d10c      	bne.n	8001852 <HAL_RCC_OscConfig+0x356>
 8001838:	4b6d      	ldr	r3, [pc, #436]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a6c      	ldr	r2, [pc, #432]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a69      	ldr	r2, [pc, #420]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	e00b      	b.n	800186a <HAL_RCC_OscConfig+0x36e>
 8001852:	4b67      	ldr	r3, [pc, #412]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a66      	ldr	r2, [pc, #408]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	6213      	str	r3, [r2, #32]
 800185e:	4b64      	ldr	r3, [pc, #400]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a63      	ldr	r2, [pc, #396]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	f023 0304 	bic.w	r3, r3, #4
 8001868:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d015      	beq.n	800189e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7fe fc9d 	bl	80001b0 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7fe fc99 	bl	80001b0 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e0ab      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001890:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0ee      	beq.n	800187a <HAL_RCC_OscConfig+0x37e>
 800189c:	e014      	b.n	80018c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7fe fc87 	bl	80001b0 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7fe fc83 	bl	80001b0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e095      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018bc:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1ee      	bne.n	80018a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d105      	bne.n	80018da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ce:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a47      	ldr	r2, [pc, #284]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8081 	beq.w	80019e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e4:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d061      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d146      	bne.n	8001986 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f8:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <HAL_RCC_OscConfig+0x4fc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7fe fc57 	bl	80001b0 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7fe fc53 	bl	80001b0 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e067      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001918:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192c:	d108      	bne.n	8001940 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	492d      	ldr	r1, [pc, #180]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001940:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a19      	ldr	r1, [r3, #32]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	430b      	orrs	r3, r1
 8001952:	4927      	ldr	r1, [pc, #156]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <HAL_RCC_OscConfig+0x4fc>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7fe fc27 	bl	80001b0 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001966:	f7fe fc23 	bl	80001b0 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e037      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x46a>
 8001984:	e02f      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_RCC_OscConfig+0x4fc>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7fe fc10 	bl	80001b0 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7fe fc0c 	bl	80001b0 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e020      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x498>
 80019b2:	e018      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e013      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40007000 	.word	0x40007000
 80019f8:	42420060 	.word	0x42420060

080019fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0d0      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b6a      	ldr	r3, [pc, #424]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d910      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b67      	ldr	r3, [pc, #412]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 0207 	bic.w	r2, r3, #7
 8001a26:	4965      	ldr	r1, [pc, #404]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0b8      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d020      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a58:	4b59      	ldr	r3, [pc, #356]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4a58      	ldr	r2, [pc, #352]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a70:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7c:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	494d      	ldr	r1, [pc, #308]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d040      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d115      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e07f      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e073      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e06b      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ada:	4b39      	ldr	r3, [pc, #228]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f023 0203 	bic.w	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4936      	ldr	r1, [pc, #216]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aec:	f7fe fb60 	bl	80001b0 <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7fe fb5c 	bl	80001b0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e053      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 020c 	and.w	r2, r3, #12
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d1eb      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d210      	bcs.n	8001b4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 0207 	bic.w	r2, r3, #7
 8001b32:	4922      	ldr	r1, [pc, #136]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e032      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4916      	ldr	r1, [pc, #88]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b8a:	f000 f821 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	490a      	ldr	r1, [pc, #40]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9c:	5ccb      	ldrb	r3, [r1, r3]
 8001b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1d0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f004 fc62 	bl	8006474 <HAL_InitTick>

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	080073cc 	.word	0x080073cc
 8001bc8:	2000000c 	.word	0x2000000c
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	b490      	push	{r4, r7}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bd8:	1d3c      	adds	r4, r7, #4
 8001bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001be0:	f240 2301 	movw	r3, #513	; 0x201
 8001be4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x40>
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x46>
 8001c0e:	e02d      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c12:	623b      	str	r3, [r7, #32]
      break;
 8001c14:	e02d      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	0c9b      	lsrs	r3, r3, #18
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c22:	4413      	add	r3, r2
 8001c24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	0c5b      	lsrs	r3, r3, #17
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c42:	4413      	add	r3, r2
 8001c44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c4e:	fb02 f203 	mul.w	r2, r2, r3
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5a:	e004      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	623b      	str	r3, [r7, #32]
      break;
 8001c6a:	e002      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6e:	623b      	str	r3, [r7, #32]
      break;
 8001c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c72:	6a3b      	ldr	r3, [r7, #32]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc90      	pop	{r4, r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	08007238 	.word	0x08007238
 8001c84:	40021000 	.word	0x40021000
 8001c88:	007a1200 	.word	0x007a1200
 8001c8c:	003d0900 	.word	0x003d0900

08001c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c94:	4b02      	ldr	r3, [pc, #8]	; (8001ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	2000000c 	.word	0x2000000c

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ca8:	f7ff fff2 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	080073dc 	.word	0x080073dc

08001ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd0:	f7ff ffde 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	0adb      	lsrs	r3, r3, #11
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4903      	ldr	r1, [pc, #12]	; (8001cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	080073dc 	.word	0x080073dc

08001cf4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	220f      	movs	r2, #15
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_RCC_GetClockConfig+0x58>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_RCC_GetClockConfig+0x58>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_GetClockConfig+0x58>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_RCC_GetClockConfig+0x58>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0207 	and.w	r2, r3, #7
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40022000 	.word	0x40022000

08001d54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <RCC_Delay+0x34>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <RCC_Delay+0x38>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	0a5b      	lsrs	r3, r3, #9
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d70:	bf00      	nop
  }
  while (Delay --);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	60fa      	str	r2, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f9      	bne.n	8001d70 <RCC_Delay+0x1c>
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	2000000c 	.word	0x2000000c
 8001d8c:	10624dd3 	.word	0x10624dd3

08001d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d07d      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db0:	4b4f      	ldr	r3, [pc, #316]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbc:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	4a4b      	ldr	r2, [pc, #300]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	61d3      	str	r3, [r2, #28]
 8001dc8:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d118      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de4:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a42      	ldr	r2, [pc, #264]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df0:	f7fe f9de 	bl	80001b0 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	e008      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df8:	f7fe f9da 	bl	80001b0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e06d      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0a:	4b3a      	ldr	r3, [pc, #232]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d02e      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d027      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e34:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e4a:	4a29      	ldr	r2, [pc, #164]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d014      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7fe f9a9 	bl	80001b0 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7fe f9a5 	bl	80001b0 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e036      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0ee      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4917      	ldr	r1, [pc, #92]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	4a13      	ldr	r2, [pc, #76]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	490b      	ldr	r1, [pc, #44]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4904      	ldr	r1, [pc, #16]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	42420440 	.word	0x42420440

08001efc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b08d      	sub	sp, #52	; 0x34
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f04:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001f06:	f107 040c 	add.w	r4, r7, #12
 8001f0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f10:	f240 2301 	movw	r3, #513	; 0x201
 8001f14:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	2300      	movs	r3, #0
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d00a      	beq.n	8001f46 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b10      	cmp	r3, #16
 8001f34:	f200 8091 	bhi.w	800205a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d04c      	beq.n	8001fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d07c      	beq.n	800203e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001f44:	e089      	b.n	800205a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8001f46:	4b4b      	ldr	r3, [pc, #300]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001f4c:	4b49      	ldr	r3, [pc, #292]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8082 	beq.w	800205e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	0c9b      	lsrs	r3, r3, #18
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f66:	4413      	add	r3, r2
 8001f68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f6c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d018      	beq.n	8001faa <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	0c5b      	lsrs	r3, r3, #17
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f86:	4413      	add	r3, r2
 8001f88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001f98:	4a37      	ldr	r2, [pc, #220]	; (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa8:	e004      	b.n	8001fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	4a33      	ldr	r2, [pc, #204]	; (800207c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fc0:	d102      	bne.n	8001fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001fc6:	e04a      	b.n	800205e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4a2c      	ldr	r2, [pc, #176]	; (8002080 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	085b      	lsrs	r3, r3, #1
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001fd6:	e042      	b.n	800205e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001fd8:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe8:	d108      	bne.n	8001ffc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001ff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffa:	e01f      	b.n	800203c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002006:	d109      	bne.n	800201c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002008:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002014:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
 800201a:	e00f      	b.n	800203c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002026:	d11c      	bne.n	8002062 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d016      	beq.n	8002062 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002034:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800203a:	e012      	b.n	8002062 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800203c:	e011      	b.n	8002062 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800203e:	f7ff fe45 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8002042:	4602      	mov	r2, r0
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	0b9b      	lsrs	r3, r3, #14
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002058:	e004      	b.n	8002064 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800205a:	bf00      	nop
 800205c:	e002      	b.n	8002064 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800205e:	bf00      	nop
 8002060:	e000      	b.n	8002064 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002062:	bf00      	nop
    }
  }
  return (frequency);
 8002064:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002066:	4618      	mov	r0, r3
 8002068:	3734      	adds	r7, #52	; 0x34
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}
 800206e:	bf00      	nop
 8002070:	08007248 	.word	0x08007248
 8002074:	40021000 	.word	0x40021000
 8002078:	007a1200 	.word	0x007a1200
 800207c:	003d0900 	.word	0x003d0900
 8002080:	aaaaaaab 	.word	0xaaaaaaab

08002084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e041      	b.n	800211a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f004 fb16 	bl	80066dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f000 fb86 	bl	80027d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d001      	beq.n	800213c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e03a      	b.n	80021b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_TIM_Base_Start_IT+0x98>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00e      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x58>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002166:	d009      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x58>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x58>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d111      	bne.n	80021a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b06      	cmp	r3, #6
 800218c:	d010      	beq.n	80021b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800219e:	e007      	b.n	80021b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40000800 	.word	0x40000800

080021c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e041      	b.n	800225e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f839 	bl	8002266 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3304      	adds	r3, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f000 fae4 	bl	80027d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d122      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b02      	cmp	r3, #2
 800229a:	d11b      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0202 	mvn.w	r2, #2
 80022a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fa6f 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 80022c0:	e005      	b.n	80022ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fa62 	bl	800278c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fa71 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d122      	bne.n	8002328 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d11b      	bne.n	8002328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0204 	mvn.w	r2, #4
 80022f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2202      	movs	r2, #2
 80022fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fa45 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 8002314:	e005      	b.n	8002322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fa38 	bl	800278c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fa47 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b08      	cmp	r3, #8
 8002334:	d122      	bne.n	800237c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b08      	cmp	r3, #8
 8002342:	d11b      	bne.n	800237c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0208 	mvn.w	r2, #8
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2204      	movs	r2, #4
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fa1b 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fa0e 	bl	800278c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fa1d 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b10      	cmp	r3, #16
 8002388:	d122      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b10      	cmp	r3, #16
 8002396:	d11b      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0210 	mvn.w	r2, #16
 80023a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2208      	movs	r2, #8
 80023a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f9f1 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 80023bc:	e005      	b.n	80023ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f9e4 	bl	800278c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f9f3 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0201 	mvn.w	r2, #1
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f003 ffec 	bl	80063d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002406:	2b80      	cmp	r3, #128	; 0x80
 8002408:	d10e      	bne.n	8002428 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002414:	2b80      	cmp	r3, #128	; 0x80
 8002416:	d107      	bne.n	8002428 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fcbd 	bl	8002da2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002432:	2b40      	cmp	r3, #64	; 0x40
 8002434:	d10e      	bne.n	8002454 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d107      	bne.n	8002454 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800244c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f9b7 	bl	80027c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b20      	cmp	r3, #32
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b20      	cmp	r3, #32
 800246e:	d107      	bne.n	8002480 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0220 	mvn.w	r2, #32
 8002478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fc88 	bl	8002d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800249e:	2302      	movs	r3, #2
 80024a0:	e0ac      	b.n	80025fc <HAL_TIM_PWM_ConfigChannel+0x174>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	f200 809f 	bhi.w	80025f0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80024b2:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80024b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b8:	080024ed 	.word	0x080024ed
 80024bc:	080025f1 	.word	0x080025f1
 80024c0:	080025f1 	.word	0x080025f1
 80024c4:	080025f1 	.word	0x080025f1
 80024c8:	0800252d 	.word	0x0800252d
 80024cc:	080025f1 	.word	0x080025f1
 80024d0:	080025f1 	.word	0x080025f1
 80024d4:	080025f1 	.word	0x080025f1
 80024d8:	0800256f 	.word	0x0800256f
 80024dc:	080025f1 	.word	0x080025f1
 80024e0:	080025f1 	.word	0x080025f1
 80024e4:	080025f1 	.word	0x080025f1
 80024e8:	080025af 	.word	0x080025af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f9d0 	bl	8002898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0208 	orr.w	r2, r2, #8
 8002506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0204 	bic.w	r2, r2, #4
 8002516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6999      	ldr	r1, [r3, #24]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	619a      	str	r2, [r3, #24]
      break;
 800252a:	e062      	b.n	80025f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	4618      	mov	r0, r3
 8002534:	f000 fa16 	bl	8002964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6999      	ldr	r1, [r3, #24]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	021a      	lsls	r2, r3, #8
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	619a      	str	r2, [r3, #24]
      break;
 800256c:	e041      	b.n	80025f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fa5f 	bl	8002a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69da      	ldr	r2, [r3, #28]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0208 	orr.w	r2, r2, #8
 8002588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	69da      	ldr	r2, [r3, #28]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0204 	bic.w	r2, r2, #4
 8002598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69d9      	ldr	r1, [r3, #28]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	61da      	str	r2, [r3, #28]
      break;
 80025ac:	e021      	b.n	80025f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 faa9 	bl	8002b0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69d9      	ldr	r1, [r3, #28]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	021a      	lsls	r2, r3, #8
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	61da      	str	r2, [r3, #28]
      break;
 80025ee:	e000      	b.n	80025f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80025f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_TIM_ConfigClockSource+0x18>
 8002618:	2302      	movs	r3, #2
 800261a:	e0b3      	b.n	8002784 <HAL_TIM_ConfigClockSource+0x180>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800263a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002642:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002654:	d03e      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0xd0>
 8002656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265a:	f200 8087 	bhi.w	800276c <HAL_TIM_ConfigClockSource+0x168>
 800265e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002662:	f000 8085 	beq.w	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266a:	d87f      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 800266c:	2b70      	cmp	r3, #112	; 0x70
 800266e:	d01a      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0xa2>
 8002670:	2b70      	cmp	r3, #112	; 0x70
 8002672:	d87b      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 8002674:	2b60      	cmp	r3, #96	; 0x60
 8002676:	d050      	beq.n	800271a <HAL_TIM_ConfigClockSource+0x116>
 8002678:	2b60      	cmp	r3, #96	; 0x60
 800267a:	d877      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 800267c:	2b50      	cmp	r3, #80	; 0x50
 800267e:	d03c      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0xf6>
 8002680:	2b50      	cmp	r3, #80	; 0x50
 8002682:	d873      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d058      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x136>
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d86f      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 800268c:	2b30      	cmp	r3, #48	; 0x30
 800268e:	d064      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x156>
 8002690:	2b30      	cmp	r3, #48	; 0x30
 8002692:	d86b      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 8002694:	2b20      	cmp	r3, #32
 8002696:	d060      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x156>
 8002698:	2b20      	cmp	r3, #32
 800269a:	d867      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 800269c:	2b00      	cmp	r3, #0
 800269e:	d05c      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x156>
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d05a      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026a4:	e062      	b.n	800276c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6899      	ldr	r1, [r3, #8]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f000 faee 	bl	8002c96 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	609a      	str	r2, [r3, #8]
      break;
 80026d2:	e04e      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6899      	ldr	r1, [r3, #8]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f000 fad7 	bl	8002c96 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026f6:	609a      	str	r2, [r3, #8]
      break;
 80026f8:	e03b      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6859      	ldr	r1, [r3, #4]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	461a      	mov	r2, r3
 8002708:	f000 fa4e 	bl	8002ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2150      	movs	r1, #80	; 0x50
 8002712:	4618      	mov	r0, r3
 8002714:	f000 faa5 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 8002718:	e02b      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	461a      	mov	r2, r3
 8002728:	f000 fa6c 	bl	8002c04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2160      	movs	r1, #96	; 0x60
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fa95 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 8002738:	e01b      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	461a      	mov	r2, r3
 8002748:	f000 fa2e 	bl	8002ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2140      	movs	r1, #64	; 0x40
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fa85 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 8002758:	e00b      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f000 fa7c 	bl	8002c62 <TIM_ITRx_SetConfig>
        break;
 800276a:	e002      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800276c:	bf00      	nop
 800276e:	e000      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002770:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a29      	ldr	r2, [pc, #164]	; (800288c <TIM_Base_SetConfig+0xb8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00b      	beq.n	8002804 <TIM_Base_SetConfig+0x30>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f2:	d007      	beq.n	8002804 <TIM_Base_SetConfig+0x30>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a26      	ldr	r2, [pc, #152]	; (8002890 <TIM_Base_SetConfig+0xbc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d003      	beq.n	8002804 <TIM_Base_SetConfig+0x30>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a25      	ldr	r2, [pc, #148]	; (8002894 <TIM_Base_SetConfig+0xc0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d108      	bne.n	8002816 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a1c      	ldr	r2, [pc, #112]	; (800288c <TIM_Base_SetConfig+0xb8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00b      	beq.n	8002836 <TIM_Base_SetConfig+0x62>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d007      	beq.n	8002836 <TIM_Base_SetConfig+0x62>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a19      	ldr	r2, [pc, #100]	; (8002890 <TIM_Base_SetConfig+0xbc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d003      	beq.n	8002836 <TIM_Base_SetConfig+0x62>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a18      	ldr	r2, [pc, #96]	; (8002894 <TIM_Base_SetConfig+0xc0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d108      	bne.n	8002848 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800283c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a07      	ldr	r2, [pc, #28]	; (800288c <TIM_Base_SetConfig+0xb8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d103      	bne.n	800287c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	615a      	str	r2, [r3, #20]
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	40012c00 	.word	0x40012c00
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800

08002898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	f023 0201 	bic.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0303 	bic.w	r3, r3, #3
 80028ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f023 0302 	bic.w	r3, r3, #2
 80028e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <TIM_OC1_SetConfig+0xc8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d10c      	bne.n	800290e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 0308 	bic.w	r3, r3, #8
 80028fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a13      	ldr	r2, [pc, #76]	; (8002960 <TIM_OC1_SetConfig+0xc8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d111      	bne.n	800293a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800291c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	621a      	str	r2, [r3, #32]
}
 8002954:	bf00      	nop
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40012c00 	.word	0x40012c00

08002964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	f023 0210 	bic.w	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f023 0320 	bic.w	r3, r3, #32
 80029ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <TIM_OC2_SetConfig+0xd0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d10d      	bne.n	80029e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <TIM_OC2_SetConfig+0xd0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d113      	bne.n	8002a10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	40012c00 	.word	0x40012c00

08002a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0303 	bic.w	r3, r3, #3
 8002a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <TIM_OC3_SetConfig+0xd0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10d      	bne.n	8002ab2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <TIM_OC3_SetConfig+0xd0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d113      	bne.n	8002ae2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	621a      	str	r2, [r3, #32]
}
 8002afc:	bf00      	nop
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40012c00 	.word	0x40012c00

08002b0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	031b      	lsls	r3, r3, #12
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <TIM_OC4_SetConfig+0x98>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d109      	bne.n	8002b80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	019b      	lsls	r3, r3, #6
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	621a      	str	r2, [r3, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	40012c00 	.word	0x40012c00

08002ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f023 030a 	bic.w	r3, r3, #10
 8002be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	621a      	str	r2, [r3, #32]
}
 8002bfa:	bf00      	nop
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f023 0210 	bic.w	r2, r3, #16
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	031b      	lsls	r3, r3, #12
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	621a      	str	r2, [r3, #32]
}
 8002c58:	bf00      	nop
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f043 0307 	orr.w	r3, r3, #7
 8002c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	609a      	str	r2, [r3, #8]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b087      	sub	sp, #28
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	021a      	lsls	r2, r3, #8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	609a      	str	r2, [r3, #8]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e046      	b.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a16      	ldr	r2, [pc, #88]	; (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00e      	beq.n	8002d4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d38:	d009      	beq.n	8002d4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a10      	ldr	r2, [pc, #64]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d10c      	bne.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40000800 	.word	0x40000800

08002d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e03f      	b.n	8002e46 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f003 fcfa 	bl	80067d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f905 	bl	8003008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b08a      	sub	sp, #40	; 0x28
 8002e52:	af02      	add	r7, sp, #8
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d17c      	bne.n	8002f68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_UART_Transmit+0x2c>
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e075      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_UART_Transmit+0x3e>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e06e      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2221      	movs	r2, #33	; 0x21
 8002e9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ea2:	f7fd f985 	bl	80001b0 <HAL_GetTick>
 8002ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	88fa      	ldrh	r2, [r7, #6]
 8002eb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebc:	d108      	bne.n	8002ed0 <HAL_UART_Transmit+0x82>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d104      	bne.n	8002ed0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	e003      	b.n	8002ed8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002ee0:	e02a      	b.n	8002f38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f840 	bl	8002f72 <UART_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e036      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	3302      	adds	r3, #2
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	e007      	b.n	8002f2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	781a      	ldrb	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	3301      	adds	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1cf      	bne.n	8002ee2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2140      	movs	r1, #64	; 0x40
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f810 	bl	8002f72 <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e006      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e000      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f82:	e02c      	b.n	8002fde <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d028      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f92:	f7fd f90d 	bl	80001b0 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d21d      	bcs.n	8002fde <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fb0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e00f      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d0c3      	beq.n	8002f84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003042:	f023 030c 	bic.w	r3, r3, #12
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	430b      	orrs	r3, r1
 800304e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2c      	ldr	r2, [pc, #176]	; (800311c <UART_SetConfig+0x114>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d103      	bne.n	8003078 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003070:	f7fe fe2c 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	e002      	b.n	800307e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003078:	f7fe fe14 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 800307c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	009a      	lsls	r2, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	4a22      	ldr	r2, [pc, #136]	; (8003120 <UART_SetConfig+0x118>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	0119      	lsls	r1, r3, #4
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009a      	lsls	r2, r3, #2
 80030a8:	441a      	add	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <UART_SetConfig+0x118>)
 80030b6:	fba3 0302 	umull	r0, r3, r3, r2
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2064      	movs	r0, #100	; 0x64
 80030be:	fb00 f303 	mul.w	r3, r0, r3
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	3332      	adds	r3, #50	; 0x32
 80030c8:	4a15      	ldr	r2, [pc, #84]	; (8003120 <UART_SetConfig+0x118>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d4:	4419      	add	r1, r3
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	009a      	lsls	r2, r3, #2
 80030e0:	441a      	add	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <UART_SetConfig+0x118>)
 80030ee:	fba3 0302 	umull	r0, r3, r3, r2
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2064      	movs	r0, #100	; 0x64
 80030f6:	fb00 f303 	mul.w	r3, r0, r3
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	3332      	adds	r3, #50	; 0x32
 8003100:	4a07      	ldr	r2, [pc, #28]	; (8003120 <UART_SetConfig+0x118>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	f003 020f 	and.w	r2, r3, #15
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	440a      	add	r2, r1
 8003112:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40013800 	.word	0x40013800
 8003120:	51eb851f 	.word	0x51eb851f

08003124 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800312a:	f3ef 8305 	mrs	r3, IPSR
 800312e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003130:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10f      	bne.n	8003156 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003136:	f3ef 8310 	mrs	r3, PRIMASK
 800313a:	607b      	str	r3, [r7, #4]
  return(result);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <osKernelInitialize+0x32>
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <osKernelInitialize+0x60>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d109      	bne.n	800315e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800314a:	f3ef 8311 	mrs	r3, BASEPRI
 800314e:	603b      	str	r3, [r7, #0]
  return(result);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003156:	f06f 0305 	mvn.w	r3, #5
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	e00c      	b.n	8003178 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <osKernelInitialize+0x60>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d105      	bne.n	8003172 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003166:	4b07      	ldr	r3, [pc, #28]	; (8003184 <osKernelInitialize+0x60>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	e002      	b.n	8003178 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003172:	f04f 33ff 	mov.w	r3, #4294967295
 8003176:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003178:	68fb      	ldr	r3, [r7, #12]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr
 8003184:	20000090 	.word	0x20000090

08003188 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800318e:	f3ef 8305 	mrs	r3, IPSR
 8003192:	60bb      	str	r3, [r7, #8]
  return(result);
 8003194:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319a:	f3ef 8310 	mrs	r3, PRIMASK
 800319e:	607b      	str	r3, [r7, #4]
  return(result);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <osKernelStart+0x32>
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <osKernelStart+0x64>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d109      	bne.n	80031c2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031ae:	f3ef 8311 	mrs	r3, BASEPRI
 80031b2:	603b      	str	r3, [r7, #0]
  return(result);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80031ba:	f06f 0305 	mvn.w	r3, #5
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	e00e      	b.n	80031e0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <osKernelStart+0x64>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80031ca:	4b08      	ldr	r3, [pc, #32]	; (80031ec <osKernelStart+0x64>)
 80031cc:	2202      	movs	r2, #2
 80031ce:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80031d0:	f001 f940 	bl	8004454 <vTaskStartScheduler>
      stat = osOK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e002      	b.n	80031e0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80031da:	f04f 33ff 	mov.w	r3, #4294967295
 80031de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80031e0:	68fb      	ldr	r3, [r7, #12]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000090 	.word	0x20000090

080031f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b092      	sub	sp, #72	; 0x48
 80031f4:	af04      	add	r7, sp, #16
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003200:	f3ef 8305 	mrs	r3, IPSR
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003208:	2b00      	cmp	r3, #0
 800320a:	f040 8094 	bne.w	8003336 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800320e:	f3ef 8310 	mrs	r3, PRIMASK
 8003212:	623b      	str	r3, [r7, #32]
  return(result);
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 808d 	bne.w	8003336 <osThreadNew+0x146>
 800321c:	4b48      	ldr	r3, [pc, #288]	; (8003340 <osThreadNew+0x150>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d106      	bne.n	8003232 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003224:	f3ef 8311 	mrs	r3, BASEPRI
 8003228:	61fb      	str	r3, [r7, #28]
  return(result);
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 8082 	bne.w	8003336 <osThreadNew+0x146>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d07e      	beq.n	8003336 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800323c:	2318      	movs	r3, #24
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003240:	2300      	movs	r3, #0
 8003242:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003244:	f107 031b 	add.w	r3, r7, #27
 8003248:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800324a:	f04f 33ff 	mov.w	r3, #4294967295
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d045      	beq.n	80032e2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <osThreadNew+0x74>
        name = attr->name;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <osThreadNew+0x9a>
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	2b38      	cmp	r3, #56	; 0x38
 800327c:	d805      	bhi.n	800328a <osThreadNew+0x9a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <osThreadNew+0x9e>
        return (NULL);
 800328a:	2300      	movs	r3, #0
 800328c:	e054      	b.n	8003338 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00e      	beq.n	80032c4 <osThreadNew+0xd4>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b5f      	cmp	r3, #95	; 0x5f
 80032ac:	d90a      	bls.n	80032c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d006      	beq.n	80032c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <osThreadNew+0xd4>
        mem = 1;
 80032be:	2301      	movs	r3, #1
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c2:	e010      	b.n	80032e6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10c      	bne.n	80032e6 <osThreadNew+0xf6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d108      	bne.n	80032e6 <osThreadNew+0xf6>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d104      	bne.n	80032e6 <osThreadNew+0xf6>
          mem = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e0:	e001      	b.n	80032e6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d110      	bne.n	800330e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032f4:	9202      	str	r2, [sp, #8]
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003300:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fed6 	bl	80040b4 <xTaskCreateStatic>
 8003308:	4603      	mov	r3, r0
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	e013      	b.n	8003336 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	2b00      	cmp	r3, #0
 8003312:	d110      	bne.n	8003336 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	b29a      	uxth	r2, r3
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 ff20 	bl	800416c <xTaskCreate>
 800332c:	4603      	mov	r3, r0
 800332e:	2b01      	cmp	r3, #1
 8003330:	d001      	beq.n	8003336 <osThreadNew+0x146>
          hTask = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003336:	697b      	ldr	r3, [r7, #20]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3738      	adds	r7, #56	; 0x38
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000090 	.word	0x20000090

08003344 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800334c:	f3ef 8305 	mrs	r3, IPSR
 8003350:	613b      	str	r3, [r7, #16]
  return(result);
 8003352:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10f      	bne.n	8003378 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003358:	f3ef 8310 	mrs	r3, PRIMASK
 800335c:	60fb      	str	r3, [r7, #12]
  return(result);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d109      	bne.n	8003378 <osDelay+0x34>
 8003364:	4b0d      	ldr	r3, [pc, #52]	; (800339c <osDelay+0x58>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d109      	bne.n	8003380 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800336c:	f3ef 8311 	mrs	r3, BASEPRI
 8003370:	60bb      	str	r3, [r7, #8]
  return(result);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <osDelay+0x3c>
    stat = osErrorISR;
 8003378:	f06f 0305 	mvn.w	r3, #5
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	e007      	b.n	8003390 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <osDelay+0x4c>
      vTaskDelay(ticks);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f001 f82e 	bl	80043ec <vTaskDelay>
    }
  }

  return (stat);
 8003390:	697b      	ldr	r3, [r7, #20]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000090 	.word	0x20000090

080033a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08c      	sub	sp, #48	; 0x30
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033b0:	f3ef 8305 	mrs	r3, IPSR
 80033b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80033b6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d16f      	bne.n	800349c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033bc:	f3ef 8310 	mrs	r3, PRIMASK
 80033c0:	617b      	str	r3, [r7, #20]
  return(result);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d169      	bne.n	800349c <osMessageQueueNew+0xfc>
 80033c8:	4b37      	ldr	r3, [pc, #220]	; (80034a8 <osMessageQueueNew+0x108>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d105      	bne.n	80033dc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033d0:	f3ef 8311 	mrs	r3, BASEPRI
 80033d4:	613b      	str	r3, [r7, #16]
  return(result);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d15f      	bne.n	800349c <osMessageQueueNew+0xfc>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d05c      	beq.n	800349c <osMessageQueueNew+0xfc>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d059      	beq.n	800349c <osMessageQueueNew+0xfc>
    mem = -1;
 80033e8:	f04f 33ff 	mov.w	r3, #4294967295
 80033ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d029      	beq.n	8003448 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d012      	beq.n	8003422 <osMessageQueueNew+0x82>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b4f      	cmp	r3, #79	; 0x4f
 8003402:	d90e      	bls.n	8003422 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	429a      	cmp	r2, r3
 800341a:	d302      	bcc.n	8003422 <osMessageQueueNew+0x82>
        mem = 1;
 800341c:	2301      	movs	r3, #1
 800341e:	623b      	str	r3, [r7, #32]
 8003420:	e014      	b.n	800344c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d110      	bne.n	800344c <osMessageQueueNew+0xac>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10c      	bne.n	800344c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003436:	2b00      	cmp	r3, #0
 8003438:	d108      	bne.n	800344c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d104      	bne.n	800344c <osMessageQueueNew+0xac>
          mem = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	623b      	str	r3, [r7, #32]
 8003446:	e001      	b.n	800344c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d10b      	bne.n	800346a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2100      	movs	r1, #0
 800345c:	9100      	str	r1, [sp, #0]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f96d 	bl	8003740 <xQueueGenericCreateStatic>
 8003466:	6278      	str	r0, [r7, #36]	; 0x24
 8003468:	e008      	b.n	800347c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003470:	2200      	movs	r2, #0
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f9da 	bl	800382e <xQueueGenericCreate>
 800347a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	e001      	b.n	8003494 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003494:	69f9      	ldr	r1, [r7, #28]
 8003496:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003498:	f000 fdb0 	bl	8003ffc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3728      	adds	r7, #40	; 0x28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000090 	.word	0x20000090

080034ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4a06      	ldr	r2, [pc, #24]	; (80034d4 <vApplicationGetIdleTaskMemory+0x28>)
 80034bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4a05      	ldr	r2, [pc, #20]	; (80034d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80034c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	601a      	str	r2, [r3, #0]
}
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	20000094 	.word	0x20000094
 80034d8:	200000f4 	.word	0x200000f4

080034dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a07      	ldr	r2, [pc, #28]	; (8003508 <vApplicationGetTimerTaskMemory+0x2c>)
 80034ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4a06      	ldr	r2, [pc, #24]	; (800350c <vApplicationGetTimerTaskMemory+0x30>)
 80034f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034fa:	601a      	str	r2, [r3, #0]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	200002f4 	.word	0x200002f4
 800350c:	20000354 	.word	0x20000354

08003510 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f103 0208 	add.w	r2, r3, #8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f04f 32ff 	mov.w	r2, #4294967295
 8003528:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f103 0208 	add.w	r2, r3, #8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f103 0208 	add.w	r2, r3, #8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr

08003566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	601a      	str	r2, [r3, #0]
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d103      	bne.n	80035cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	e00c      	b.n	80035e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3308      	adds	r3, #8
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	e002      	b.n	80035da <vListInsert+0x2e>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d2f6      	bcs.n	80035d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	601a      	str	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6892      	ldr	r2, [r2, #8]
 8003632:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6852      	ldr	r2, [r2, #4]
 800363c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	429a      	cmp	r2, r3
 8003646:	d103      	bne.n	8003650 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	1e5a      	subs	r2, r3, #1
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr
	...

08003670 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10a      	bne.n	800369a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003696:	bf00      	nop
 8003698:	e7fe      	b.n	8003698 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800369a:	f002 f827 	bl	80056ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	68f9      	ldr	r1, [r7, #12]
 80036a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	441a      	add	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ca:	3b01      	subs	r3, #1
 80036cc:	68f9      	ldr	r1, [r7, #12]
 80036ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	441a      	add	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	22ff      	movs	r2, #255	; 0xff
 80036e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d114      	bne.n	800371a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01a      	beq.n	800372e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3310      	adds	r3, #16
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 f951 	bl	80049a4 <xTaskRemoveFromEventList>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d012      	beq.n	800372e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003708:	4b0c      	ldr	r3, [pc, #48]	; (800373c <xQueueGenericReset+0xcc>)
 800370a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	e009      	b.n	800372e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3310      	adds	r3, #16
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fef6 	bl	8003510 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3324      	adds	r3, #36	; 0x24
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fef1 	bl	8003510 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800372e:	f002 f80d 	bl	800574c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003732:	2301      	movs	r3, #1
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	e000ed04 	.word	0xe000ed04

08003740 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08e      	sub	sp, #56	; 0x38
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003766:	bf00      	nop
 8003768:	e7fe      	b.n	8003768 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <xQueueGenericCreateStatic+0x52>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <xQueueGenericCreateStatic+0x56>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <xQueueGenericCreateStatic+0x58>
 8003796:	2300      	movs	r3, #0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	623b      	str	r3, [r7, #32]
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <xQueueGenericCreateStatic+0x7e>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <xQueueGenericCreateStatic+0x82>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <xQueueGenericCreateStatic+0x84>
 80037c2:	2300      	movs	r3, #0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	61fb      	str	r3, [r7, #28]
}
 80037da:	bf00      	nop
 80037dc:	e7fe      	b.n	80037dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037de:	2350      	movs	r3, #80	; 0x50
 80037e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b50      	cmp	r3, #80	; 0x50
 80037e6:	d00a      	beq.n	80037fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	61bb      	str	r3, [r7, #24]
}
 80037fa:	bf00      	nop
 80037fc:	e7fe      	b.n	80037fc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00d      	beq.n	8003824 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003810:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f843 	bl	80038aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003826:	4618      	mov	r0, r3
 8003828:	3730      	adds	r7, #48	; 0x30
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800382e:	b580      	push	{r7, lr}
 8003830:	b08a      	sub	sp, #40	; 0x28
 8003832:	af02      	add	r7, sp, #8
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	4613      	mov	r3, r2
 800383a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	613b      	str	r3, [r7, #16]
}
 8003854:	bf00      	nop
 8003856:	e7fe      	b.n	8003856 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d102      	bne.n	8003864 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
 8003862:	e004      	b.n	800386e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	fb02 f303 	mul.w	r3, r2, r3
 800386c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3350      	adds	r3, #80	; 0x50
 8003872:	4618      	mov	r0, r3
 8003874:	f002 f83a 	bl	80058ec <pvPortMalloc>
 8003878:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00f      	beq.n	80038a0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	3350      	adds	r3, #80	; 0x50
 8003884:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800388e:	79fa      	ldrb	r2, [r7, #7]
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f805 	bl	80038aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80038a0:	69bb      	ldr	r3, [r7, #24]
	}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3720      	adds	r7, #32
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d103      	bne.n	80038c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	e002      	b.n	80038cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038d8:	2101      	movs	r1, #1
 80038da:	69b8      	ldr	r0, [r7, #24]
 80038dc:	f7ff fec8 	bl	8003670 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08e      	sub	sp, #56	; 0x38
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038fe:	2300      	movs	r3, #0
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <xQueueGenericSend+0x32>
	__asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800391e:	bf00      	nop
 8003920:	e7fe      	b.n	8003920 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d103      	bne.n	8003930 <xQueueGenericSend+0x40>
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <xQueueGenericSend+0x44>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <xQueueGenericSend+0x46>
 8003934:	2300      	movs	r3, #0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <xQueueGenericSend+0x60>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d103      	bne.n	800395e <xQueueGenericSend+0x6e>
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <xQueueGenericSend+0x72>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <xQueueGenericSend+0x74>
 8003962:	2300      	movs	r3, #0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <xQueueGenericSend+0x8e>
	__asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	623b      	str	r3, [r7, #32]
}
 800397a:	bf00      	nop
 800397c:	e7fe      	b.n	800397c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800397e:	f001 f9d3 	bl	8004d28 <xTaskGetSchedulerState>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <xQueueGenericSend+0x9e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <xQueueGenericSend+0xa2>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <xQueueGenericSend+0xa4>
 8003992:	2300      	movs	r3, #0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <xQueueGenericSend+0xbe>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	61fb      	str	r3, [r7, #28]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039ae:	f001 fe9d 	bl	80056ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <xQueueGenericSend+0xd4>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d129      	bne.n	8003a18 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ca:	f000 fa07 	bl	8003ddc <prvCopyDataToQueue>
 80039ce:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d010      	beq.n	80039fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	3324      	adds	r3, #36	; 0x24
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 ffe1 	bl	80049a4 <xTaskRemoveFromEventList>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039e8:	4b3f      	ldr	r3, [pc, #252]	; (8003ae8 <xQueueGenericSend+0x1f8>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	e00a      	b.n	8003a10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a00:	4b39      	ldr	r3, [pc, #228]	; (8003ae8 <xQueueGenericSend+0x1f8>)
 8003a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a10:	f001 fe9c 	bl	800574c <vPortExitCritical>
				return pdPASS;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e063      	b.n	8003ae0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a1e:	f001 fe95 	bl	800574c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e05c      	b.n	8003ae0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 f81b 	bl	8004a6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a36:	2301      	movs	r3, #1
 8003a38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a3a:	f001 fe87 	bl	800574c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a3e:	f000 fd71 	bl	8004524 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a42:	f001 fe53 	bl	80056ec <vPortEnterCritical>
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a4c:	b25b      	sxtb	r3, r3
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a52:	d103      	bne.n	8003a5c <xQueueGenericSend+0x16c>
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a62:	b25b      	sxtb	r3, r3
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d103      	bne.n	8003a72 <xQueueGenericSend+0x182>
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a72:	f001 fe6b 	bl	800574c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a76:	1d3a      	adds	r2, r7, #4
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f80a 	bl	8004a98 <xTaskCheckForTimeOut>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d124      	bne.n	8003ad4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8c:	f000 fa9e 	bl	8003fcc <prvIsQueueFull>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d018      	beq.n	8003ac8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	3310      	adds	r3, #16
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 ff30 	bl	8004904 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aa6:	f000 fa29 	bl	8003efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003aaa:	f000 fd49 	bl	8004540 <xTaskResumeAll>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f47f af7c 	bne.w	80039ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <xQueueGenericSend+0x1f8>)
 8003ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	e772      	b.n	80039ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aca:	f000 fa17 	bl	8003efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ace:	f000 fd37 	bl	8004540 <xTaskResumeAll>
 8003ad2:	e76c      	b.n	80039ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ad6:	f000 fa11 	bl	8003efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ada:	f000 fd31 	bl	8004540 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ade:	2300      	movs	r3, #0
		}
	}
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3738      	adds	r7, #56	; 0x38
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08e      	sub	sp, #56	; 0x38
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b16:	bf00      	nop
 8003b18:	e7fe      	b.n	8003b18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d103      	bne.n	8003b28 <xQueueGenericSendFromISR+0x3c>
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <xQueueGenericSendFromISR+0x40>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <xQueueGenericSendFromISR+0x42>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	623b      	str	r3, [r7, #32]
}
 8003b44:	bf00      	nop
 8003b46:	e7fe      	b.n	8003b46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d103      	bne.n	8003b56 <xQueueGenericSendFromISR+0x6a>
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <xQueueGenericSendFromISR+0x6e>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <xQueueGenericSendFromISR+0x70>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	61fb      	str	r3, [r7, #28]
}
 8003b72:	bf00      	nop
 8003b74:	e7fe      	b.n	8003b74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b76:	f001 fe7b 	bl	8005870 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b7a:	f3ef 8211 	mrs	r2, BASEPRI
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	61ba      	str	r2, [r7, #24]
 8003b90:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b92:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d302      	bcc.n	8003ba8 <xQueueGenericSendFromISR+0xbc>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d12c      	bne.n	8003c02 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bb8:	f000 f910 	bl	8003ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bbc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d112      	bne.n	8003bec <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d016      	beq.n	8003bfc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	3324      	adds	r3, #36	; 0x24
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fee6 	bl	80049a4 <xTaskRemoveFromEventList>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00e      	beq.n	8003bfc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00b      	beq.n	8003bfc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e007      	b.n	8003bfc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	b25a      	sxtb	r2, r3
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003c00:	e001      	b.n	8003c06 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3738      	adds	r7, #56	; 0x38
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08c      	sub	sp, #48	; 0x30
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <xQueueReceive+0x30>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	623b      	str	r3, [r7, #32]
}
 8003c48:	bf00      	nop
 8003c4a:	e7fe      	b.n	8003c4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <xQueueReceive+0x3e>
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <xQueueReceive+0x42>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <xQueueReceive+0x44>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <xQueueReceive+0x5e>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	61fb      	str	r3, [r7, #28]
}
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c7a:	f001 f855 	bl	8004d28 <xTaskGetSchedulerState>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <xQueueReceive+0x6e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <xQueueReceive+0x72>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <xQueueReceive+0x74>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xQueueReceive+0x8e>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	61bb      	str	r3, [r7, #24]
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003caa:	f001 fd1f 	bl	80056ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01f      	beq.n	8003cfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cbe:	f000 f8f7 	bl	8003eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	1e5a      	subs	r2, r3, #1
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00f      	beq.n	8003cf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	3310      	adds	r3, #16
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fe64 	bl	80049a4 <xTaskRemoveFromEventList>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ce2:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <xQueueReceive+0x1bc>)
 8003ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cf2:	f001 fd2b 	bl	800574c <vPortExitCritical>
				return pdPASS;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e069      	b.n	8003dce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d00:	f001 fd24 	bl	800574c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e062      	b.n	8003dce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d0e:	f107 0310 	add.w	r3, r7, #16
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 feaa 	bl	8004a6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d1c:	f001 fd16 	bl	800574c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d20:	f000 fc00 	bl	8004524 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d24:	f001 fce2 	bl	80056ec <vPortEnterCritical>
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d2e:	b25b      	sxtb	r3, r3
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d103      	bne.n	8003d3e <xQueueReceive+0x122>
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d103      	bne.n	8003d54 <xQueueReceive+0x138>
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d54:	f001 fcfa 	bl	800574c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d58:	1d3a      	adds	r2, r7, #4
 8003d5a:	f107 0310 	add.w	r3, r7, #16
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fe99 	bl	8004a98 <xTaskCheckForTimeOut>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d123      	bne.n	8003db4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d6e:	f000 f917 	bl	8003fa0 <prvIsQueueEmpty>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d017      	beq.n	8003da8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	3324      	adds	r3, #36	; 0x24
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fdbf 	bl	8004904 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d88:	f000 f8b8 	bl	8003efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d8c:	f000 fbd8 	bl	8004540 <xTaskResumeAll>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d189      	bne.n	8003caa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <xQueueReceive+0x1bc>)
 8003d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	e780      	b.n	8003caa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003daa:	f000 f8a7 	bl	8003efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dae:	f000 fbc7 	bl	8004540 <xTaskResumeAll>
 8003db2:	e77a      	b.n	8003caa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db6:	f000 f8a1 	bl	8003efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dba:	f000 fbc1 	bl	8004540 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc0:	f000 f8ee 	bl	8003fa0 <prvIsQueueEmpty>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f43f af6f 	beq.w	8003caa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3730      	adds	r7, #48	; 0x30
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d14d      	bne.n	8003e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 ffac 	bl	8004d64 <xTaskPriorityDisinherit>
 8003e0c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	605a      	str	r2, [r3, #4]
 8003e14:	e043      	b.n	8003e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d119      	bne.n	8003e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6898      	ldr	r0, [r3, #8]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	461a      	mov	r2, r3
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	f002 fd9e 	bl	8006968 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	441a      	add	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d32b      	bcc.n	8003e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	609a      	str	r2, [r3, #8]
 8003e4e:	e026      	b.n	8003e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68d8      	ldr	r0, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	f002 fd84 	bl	8006968 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	425b      	negs	r3, r3
 8003e6a:	441a      	add	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d207      	bcs.n	8003e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	425b      	negs	r3, r3
 8003e86:	441a      	add	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d105      	bne.n	8003e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003ea6:	697b      	ldr	r3, [r7, #20]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d018      	beq.n	8003ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	441a      	add	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d303      	bcc.n	8003ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68d9      	ldr	r1, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	461a      	mov	r2, r3
 8003eee:	6838      	ldr	r0, [r7, #0]
 8003ef0:	f002 fd3a 	bl	8006968 <memcpy>
	}
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f04:	f001 fbf2 	bl	80056ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f10:	e011      	b.n	8003f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d012      	beq.n	8003f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3324      	adds	r3, #36	; 0x24
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fd40 	bl	80049a4 <xTaskRemoveFromEventList>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f2a:	f000 fe17 	bl	8004b5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	dce9      	bgt.n	8003f12 <prvUnlockQueue+0x16>
 8003f3e:	e000      	b.n	8003f42 <prvUnlockQueue+0x46>
					break;
 8003f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f4a:	f001 fbff 	bl	800574c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f4e:	f001 fbcd 	bl	80056ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f5a:	e011      	b.n	8003f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d012      	beq.n	8003f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3310      	adds	r3, #16
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fd1b 	bl	80049a4 <xTaskRemoveFromEventList>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f74:	f000 fdf2 	bl	8004b5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f78:	7bbb      	ldrb	r3, [r7, #14]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	dce9      	bgt.n	8003f5c <prvUnlockQueue+0x60>
 8003f88:	e000      	b.n	8003f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	22ff      	movs	r2, #255	; 0xff
 8003f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f94:	f001 fbda 	bl	800574c <vPortExitCritical>
}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fa8:	f001 fba0 	bl	80056ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e001      	b.n	8003fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fbe:	f001 fbc5 	bl	800574c <vPortExitCritical>

	return xReturn;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fd4:	f001 fb8a 	bl	80056ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d102      	bne.n	8003fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e001      	b.n	8003fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fee:	f001 fbad 	bl	800574c <vPortExitCritical>

	return xReturn;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	e014      	b.n	8004036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800400c:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <vQueueAddToRegistry+0x4c>)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10b      	bne.n	8004030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004018:	490b      	ldr	r1, [pc, #44]	; (8004048 <vQueueAddToRegistry+0x4c>)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004022:	4a09      	ldr	r2, [pc, #36]	; (8004048 <vQueueAddToRegistry+0x4c>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800402e:	e006      	b.n	800403e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3301      	adds	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b07      	cmp	r3, #7
 800403a:	d9e7      	bls.n	800400c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr
 8004048:	20001cb8 	.word	0x20001cb8

0800404c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800405c:	f001 fb46 	bl	80056ec <vPortEnterCritical>
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004066:	b25b      	sxtb	r3, r3
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d103      	bne.n	8004076 <vQueueWaitForMessageRestricted+0x2a>
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800407c:	b25b      	sxtb	r3, r3
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004082:	d103      	bne.n	800408c <vQueueWaitForMessageRestricted+0x40>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800408c:	f001 fb5e 	bl	800574c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	2b00      	cmp	r3, #0
 8004096:	d106      	bne.n	80040a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3324      	adds	r3, #36	; 0x24
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fc53 	bl	800494c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040a6:	6978      	ldr	r0, [r7, #20]
 80040a8:	f7ff ff28 	bl	8003efc <prvUnlockQueue>
	}
 80040ac:	bf00      	nop
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08e      	sub	sp, #56	; 0x38
 80040b8:	af04      	add	r7, sp, #16
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <xTaskCreateStatic+0x2a>
	__asm volatile
 80040c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	623b      	str	r3, [r7, #32]
}
 80040da:	bf00      	nop
 80040dc:	e7fe      	b.n	80040dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <xTaskCreateStatic+0x46>
	__asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	61fb      	str	r3, [r7, #28]
}
 80040f6:	bf00      	nop
 80040f8:	e7fe      	b.n	80040f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040fa:	2360      	movs	r3, #96	; 0x60
 80040fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b60      	cmp	r3, #96	; 0x60
 8004102:	d00a      	beq.n	800411a <xTaskCreateStatic+0x66>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	61bb      	str	r3, [r7, #24]
}
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01e      	beq.n	800415e <xTaskCreateStatic+0xaa>
 8004120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01b      	beq.n	800415e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800412e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	2202      	movs	r2, #2
 8004134:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004138:	2300      	movs	r3, #0
 800413a:	9303      	str	r3, [sp, #12]
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	9302      	str	r3, [sp, #8]
 8004140:	f107 0314 	add.w	r3, r7, #20
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f850 	bl	80041f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004156:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004158:	f000 f8d8 	bl	800430c <prvAddNewTaskToReadyList>
 800415c:	e001      	b.n	8004162 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004162:	697b      	ldr	r3, [r7, #20]
	}
 8004164:	4618      	mov	r0, r3
 8004166:	3728      	adds	r7, #40	; 0x28
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08c      	sub	sp, #48	; 0x30
 8004170:	af04      	add	r7, sp, #16
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	4613      	mov	r3, r2
 800417a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4618      	mov	r0, r3
 8004182:	f001 fbb3 	bl	80058ec <pvPortMalloc>
 8004186:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00e      	beq.n	80041ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800418e:	2060      	movs	r0, #96	; 0x60
 8004190:	f001 fbac 	bl	80058ec <pvPortMalloc>
 8004194:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
 80041a2:	e005      	b.n	80041b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041a4:	6978      	ldr	r0, [r7, #20]
 80041a6:	f001 fc65 	bl	8005a74 <vPortFree>
 80041aa:	e001      	b.n	80041b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d017      	beq.n	80041e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041be:	88fa      	ldrh	r2, [r7, #6]
 80041c0:	2300      	movs	r3, #0
 80041c2:	9303      	str	r3, [sp, #12]
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	9302      	str	r3, [sp, #8]
 80041c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f80e 	bl	80041f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041da:	69f8      	ldr	r0, [r7, #28]
 80041dc:	f000 f896 	bl	800430c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041e0:	2301      	movs	r3, #1
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	e002      	b.n	80041ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041ec:	69bb      	ldr	r3, [r7, #24]
	}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b088      	sub	sp, #32
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	461a      	mov	r2, r3
 800420e:	21a5      	movs	r1, #165	; 0xa5
 8004210:	f002 fbb8 	bl	8006984 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800421e:	3b01      	subs	r3, #1
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f023 0307 	bic.w	r3, r3, #7
 800422c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <prvInitialiseNewTask+0x58>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	617b      	str	r3, [r7, #20]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	e012      	b.n	800427a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	7819      	ldrb	r1, [r3, #0]
 800425c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	3334      	adds	r3, #52	; 0x34
 8004264:	460a      	mov	r2, r1
 8004266:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d006      	beq.n	8004282 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	3301      	adds	r3, #1
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	2b0f      	cmp	r3, #15
 800427e:	d9e9      	bls.n	8004254 <prvInitialiseNewTask+0x5e>
 8004280:	e000      	b.n	8004284 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004282:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	2b37      	cmp	r3, #55	; 0x37
 8004290:	d901      	bls.n	8004296 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004292:	2337      	movs	r3, #55	; 0x37
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	2200      	movs	r2, #0
 80042a6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	3304      	adds	r3, #4
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff f94e 	bl	800354e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	3318      	adds	r3, #24
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff f949 	bl	800354e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	2200      	movs	r2, #0
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	2200      	movs	r2, #0
 80042dc:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	69b8      	ldr	r0, [r7, #24]
 80042ec:	f001 f90e 	bl	800550c <pxPortInitialiseStack>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80042f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004302:	bf00      	nop
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004314:	f001 f9ea 	bl	80056ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004318:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	4a2c      	ldr	r2, [pc, #176]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 8004320:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004322:	4b2c      	ldr	r3, [pc, #176]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800432a:	4a2a      	ldr	r2, [pc, #168]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004330:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d110      	bne.n	800435a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004338:	f000 fc34 	bl	8004ba4 <prvInitialiseTaskLists>
 800433c:	e00d      	b.n	800435a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800433e:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <prvAddNewTaskToReadyList+0xcc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004346:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	429a      	cmp	r2, r3
 8004352:	d802      	bhi.n	800435a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004354:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800435a:	4b20      	ldr	r3, [pc, #128]	; (80043dc <prvAddNewTaskToReadyList+0xd0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3301      	adds	r3, #1
 8004360:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <prvAddNewTaskToReadyList+0xd0>)
 8004362:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <prvAddNewTaskToReadyList+0xd0>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <prvAddNewTaskToReadyList+0xd4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d903      	bls.n	8004380 <prvAddNewTaskToReadyList+0x74>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <prvAddNewTaskToReadyList+0xd4>)
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <prvAddNewTaskToReadyList+0xd8>)
 800438e:	441a      	add	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f7ff f8e5 	bl	8003566 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800439c:	f001 f9d6 	bl	800574c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043a0:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <prvAddNewTaskToReadyList+0xcc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00e      	beq.n	80043c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d207      	bcs.n	80043c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <prvAddNewTaskToReadyList+0xdc>)
 80043b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000c28 	.word	0x20000c28
 80043d4:	20000754 	.word	0x20000754
 80043d8:	20000c34 	.word	0x20000c34
 80043dc:	20000c44 	.word	0x20000c44
 80043e0:	20000c30 	.word	0x20000c30
 80043e4:	20000758 	.word	0x20000758
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d017      	beq.n	800442e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <vTaskDelay+0x60>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <vTaskDelay+0x30>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	60bb      	str	r3, [r7, #8]
}
 8004418:	bf00      	nop
 800441a:	e7fe      	b.n	800441a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800441c:	f000 f882 	bl	8004524 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004420:	2100      	movs	r1, #0
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fd0c 	bl	8004e40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004428:	f000 f88a 	bl	8004540 <xTaskResumeAll>
 800442c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d107      	bne.n	8004444 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004434:	4b06      	ldr	r3, [pc, #24]	; (8004450 <vTaskDelay+0x64>)
 8004436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000c50 	.word	0x20000c50
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	; 0x28
 8004458:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800445e:	2300      	movs	r3, #0
 8004460:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004462:	463a      	mov	r2, r7
 8004464:	1d39      	adds	r1, r7, #4
 8004466:	f107 0308 	add.w	r3, r7, #8
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff f81e 	bl	80034ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004470:	6839      	ldr	r1, [r7, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	9202      	str	r2, [sp, #8]
 8004478:	9301      	str	r3, [sp, #4]
 800447a:	2300      	movs	r3, #0
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	2300      	movs	r3, #0
 8004480:	460a      	mov	r2, r1
 8004482:	4922      	ldr	r1, [pc, #136]	; (800450c <vTaskStartScheduler+0xb8>)
 8004484:	4822      	ldr	r0, [pc, #136]	; (8004510 <vTaskStartScheduler+0xbc>)
 8004486:	f7ff fe15 	bl	80040b4 <xTaskCreateStatic>
 800448a:	4603      	mov	r3, r0
 800448c:	4a21      	ldr	r2, [pc, #132]	; (8004514 <vTaskStartScheduler+0xc0>)
 800448e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004490:	4b20      	ldr	r3, [pc, #128]	; (8004514 <vTaskStartScheduler+0xc0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004498:	2301      	movs	r3, #1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e001      	b.n	80044a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d102      	bne.n	80044ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044a8:	f000 fd1e 	bl	8004ee8 <xTimerCreateTimerTask>
 80044ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d118      	bne.n	80044e6 <vTaskStartScheduler+0x92>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	613b      	str	r3, [r7, #16]
}
 80044c6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044c8:	4b13      	ldr	r3, [pc, #76]	; (8004518 <vTaskStartScheduler+0xc4>)
 80044ca:	f04f 32ff 	mov.w	r2, #4294967295
 80044ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044d0:	4b12      	ldr	r3, [pc, #72]	; (800451c <vTaskStartScheduler+0xc8>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80044d6:	4b12      	ldr	r3, [pc, #72]	; (8004520 <vTaskStartScheduler+0xcc>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80044dc:	f001 fd30 	bl	8005f40 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044e0:	f001 f892 	bl	8005608 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044e4:	e00e      	b.n	8004504 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d10a      	bne.n	8004504 <vTaskStartScheduler+0xb0>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	60fb      	str	r3, [r7, #12]
}
 8004500:	bf00      	nop
 8004502:	e7fe      	b.n	8004502 <vTaskStartScheduler+0xae>
}
 8004504:	bf00      	nop
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	08007258 	.word	0x08007258
 8004510:	08004b75 	.word	0x08004b75
 8004514:	20000c4c 	.word	0x20000c4c
 8004518:	20000c48 	.word	0x20000c48
 800451c:	20000c34 	.word	0x20000c34
 8004520:	20000c2c 	.word	0x20000c2c

08004524 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004528:	4b04      	ldr	r3, [pc, #16]	; (800453c <vTaskSuspendAll+0x18>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	4a03      	ldr	r2, [pc, #12]	; (800453c <vTaskSuspendAll+0x18>)
 8004530:	6013      	str	r3, [r2, #0]
}
 8004532:	bf00      	nop
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000c50 	.word	0x20000c50

08004540 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800454a:	2300      	movs	r3, #0
 800454c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800454e:	4b42      	ldr	r3, [pc, #264]	; (8004658 <xTaskResumeAll+0x118>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <xTaskResumeAll+0x2c>
	__asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	603b      	str	r3, [r7, #0]
}
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800456c:	f001 f8be 	bl	80056ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004570:	4b39      	ldr	r3, [pc, #228]	; (8004658 <xTaskResumeAll+0x118>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3b01      	subs	r3, #1
 8004576:	4a38      	ldr	r2, [pc, #224]	; (8004658 <xTaskResumeAll+0x118>)
 8004578:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800457a:	4b37      	ldr	r3, [pc, #220]	; (8004658 <xTaskResumeAll+0x118>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d162      	bne.n	8004648 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004582:	4b36      	ldr	r3, [pc, #216]	; (800465c <xTaskResumeAll+0x11c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d05e      	beq.n	8004648 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800458a:	e02f      	b.n	80045ec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800458c:	4b34      	ldr	r3, [pc, #208]	; (8004660 <xTaskResumeAll+0x120>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3318      	adds	r3, #24
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff f83f 	bl	800361c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3304      	adds	r3, #4
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff f83a 	bl	800361c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ac:	4b2d      	ldr	r3, [pc, #180]	; (8004664 <xTaskResumeAll+0x124>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d903      	bls.n	80045bc <xTaskResumeAll+0x7c>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	4a2a      	ldr	r2, [pc, #168]	; (8004664 <xTaskResumeAll+0x124>)
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4a27      	ldr	r2, [pc, #156]	; (8004668 <xTaskResumeAll+0x128>)
 80045ca:	441a      	add	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f7fe ffc7 	bl	8003566 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045dc:	4b23      	ldr	r3, [pc, #140]	; (800466c <xTaskResumeAll+0x12c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d302      	bcc.n	80045ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80045e6:	4b22      	ldr	r3, [pc, #136]	; (8004670 <xTaskResumeAll+0x130>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ec:	4b1c      	ldr	r3, [pc, #112]	; (8004660 <xTaskResumeAll+0x120>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1cb      	bne.n	800458c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045fa:	f000 fb71 	bl	8004ce0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045fe:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <xTaskResumeAll+0x134>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d010      	beq.n	800462c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800460a:	f000 f845 	bl	8004698 <xTaskIncrementTick>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004614:	4b16      	ldr	r3, [pc, #88]	; (8004670 <xTaskResumeAll+0x130>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3b01      	subs	r3, #1
 800461e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f1      	bne.n	800460a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004626:	4b13      	ldr	r3, [pc, #76]	; (8004674 <xTaskResumeAll+0x134>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800462c:	4b10      	ldr	r3, [pc, #64]	; (8004670 <xTaskResumeAll+0x130>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d009      	beq.n	8004648 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004634:	2301      	movs	r3, #1
 8004636:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004638:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <xTaskResumeAll+0x138>)
 800463a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004648:	f001 f880 	bl	800574c <vPortExitCritical>

	return xAlreadyYielded;
 800464c:	68bb      	ldr	r3, [r7, #8]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000c50 	.word	0x20000c50
 800465c:	20000c28 	.word	0x20000c28
 8004660:	20000be8 	.word	0x20000be8
 8004664:	20000c30 	.word	0x20000c30
 8004668:	20000758 	.word	0x20000758
 800466c:	20000754 	.word	0x20000754
 8004670:	20000c3c 	.word	0x20000c3c
 8004674:	20000c38 	.word	0x20000c38
 8004678:	e000ed04 	.word	0xe000ed04

0800467c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004682:	4b04      	ldr	r3, [pc, #16]	; (8004694 <xTaskGetTickCount+0x18>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004688:	687b      	ldr	r3, [r7, #4]
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr
 8004694:	20000c2c 	.word	0x20000c2c

08004698 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046a2:	4b51      	ldr	r3, [pc, #324]	; (80047e8 <xTaskIncrementTick+0x150>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f040 808e 	bne.w	80047c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046ac:	4b4f      	ldr	r3, [pc, #316]	; (80047ec <xTaskIncrementTick+0x154>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3301      	adds	r3, #1
 80046b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046b4:	4a4d      	ldr	r2, [pc, #308]	; (80047ec <xTaskIncrementTick+0x154>)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d120      	bne.n	8004702 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046c0:	4b4b      	ldr	r3, [pc, #300]	; (80047f0 <xTaskIncrementTick+0x158>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	603b      	str	r3, [r7, #0]
}
 80046dc:	bf00      	nop
 80046de:	e7fe      	b.n	80046de <xTaskIncrementTick+0x46>
 80046e0:	4b43      	ldr	r3, [pc, #268]	; (80047f0 <xTaskIncrementTick+0x158>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	4b43      	ldr	r3, [pc, #268]	; (80047f4 <xTaskIncrementTick+0x15c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a41      	ldr	r2, [pc, #260]	; (80047f0 <xTaskIncrementTick+0x158>)
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	4a41      	ldr	r2, [pc, #260]	; (80047f4 <xTaskIncrementTick+0x15c>)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b40      	ldr	r3, [pc, #256]	; (80047f8 <xTaskIncrementTick+0x160>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3301      	adds	r3, #1
 80046fa:	4a3f      	ldr	r2, [pc, #252]	; (80047f8 <xTaskIncrementTick+0x160>)
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	f000 faef 	bl	8004ce0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004702:	4b3e      	ldr	r3, [pc, #248]	; (80047fc <xTaskIncrementTick+0x164>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	429a      	cmp	r2, r3
 800470a:	d34e      	bcc.n	80047aa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800470c:	4b38      	ldr	r3, [pc, #224]	; (80047f0 <xTaskIncrementTick+0x158>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <xTaskIncrementTick+0x82>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <xTaskIncrementTick+0x84>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004720:	4b36      	ldr	r3, [pc, #216]	; (80047fc <xTaskIncrementTick+0x164>)
 8004722:	f04f 32ff 	mov.w	r2, #4294967295
 8004726:	601a      	str	r2, [r3, #0]
					break;
 8004728:	e03f      	b.n	80047aa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800472a:	4b31      	ldr	r3, [pc, #196]	; (80047f0 <xTaskIncrementTick+0x158>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	429a      	cmp	r2, r3
 8004740:	d203      	bcs.n	800474a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004742:	4a2e      	ldr	r2, [pc, #184]	; (80047fc <xTaskIncrementTick+0x164>)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6013      	str	r3, [r2, #0]
						break;
 8004748:	e02f      	b.n	80047aa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	3304      	adds	r3, #4
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe ff64 	bl	800361c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3318      	adds	r3, #24
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe ff5b 	bl	800361c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476a:	4b25      	ldr	r3, [pc, #148]	; (8004800 <xTaskIncrementTick+0x168>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d903      	bls.n	800477a <xTaskIncrementTick+0xe2>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	4a22      	ldr	r2, [pc, #136]	; (8004800 <xTaskIncrementTick+0x168>)
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <xTaskIncrementTick+0x16c>)
 8004788:	441a      	add	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	3304      	adds	r3, #4
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f7fe fee8 	bl	8003566 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479a:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <xTaskIncrementTick+0x170>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d3b3      	bcc.n	800470c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047a4:	2301      	movs	r3, #1
 80047a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047a8:	e7b0      	b.n	800470c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047aa:	4b17      	ldr	r3, [pc, #92]	; (8004808 <xTaskIncrementTick+0x170>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b0:	4914      	ldr	r1, [pc, #80]	; (8004804 <xTaskIncrementTick+0x16c>)
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d907      	bls.n	80047d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80047c2:	2301      	movs	r3, #1
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	e004      	b.n	80047d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80047c8:	4b10      	ldr	r3, [pc, #64]	; (800480c <xTaskIncrementTick+0x174>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	4a0f      	ldr	r2, [pc, #60]	; (800480c <xTaskIncrementTick+0x174>)
 80047d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80047d2:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <xTaskIncrementTick+0x178>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80047da:	2301      	movs	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80047de:	697b      	ldr	r3, [r7, #20]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000c50 	.word	0x20000c50
 80047ec:	20000c2c 	.word	0x20000c2c
 80047f0:	20000be0 	.word	0x20000be0
 80047f4:	20000be4 	.word	0x20000be4
 80047f8:	20000c40 	.word	0x20000c40
 80047fc:	20000c48 	.word	0x20000c48
 8004800:	20000c30 	.word	0x20000c30
 8004804:	20000758 	.word	0x20000758
 8004808:	20000754 	.word	0x20000754
 800480c:	20000c38 	.word	0x20000c38
 8004810:	20000c3c 	.word	0x20000c3c

08004814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800481a:	4b33      	ldr	r3, [pc, #204]	; (80048e8 <vTaskSwitchContext+0xd4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004822:	4b32      	ldr	r3, [pc, #200]	; (80048ec <vTaskSwitchContext+0xd8>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004828:	e05a      	b.n	80048e0 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 800482a:	4b30      	ldr	r3, [pc, #192]	; (80048ec <vTaskSwitchContext+0xd8>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004830:	f001 fb8c 	bl	8005f4c <getRunTimeCounterValue>
 8004834:	4603      	mov	r3, r0
 8004836:	4a2e      	ldr	r2, [pc, #184]	; (80048f0 <vTaskSwitchContext+0xdc>)
 8004838:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800483a:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <vTaskSwitchContext+0xdc>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b2d      	ldr	r3, [pc, #180]	; (80048f4 <vTaskSwitchContext+0xe0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d909      	bls.n	800485a <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004846:	4b2c      	ldr	r3, [pc, #176]	; (80048f8 <vTaskSwitchContext+0xe4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800484c:	4a28      	ldr	r2, [pc, #160]	; (80048f0 <vTaskSwitchContext+0xdc>)
 800484e:	6810      	ldr	r0, [r2, #0]
 8004850:	4a28      	ldr	r2, [pc, #160]	; (80048f4 <vTaskSwitchContext+0xe0>)
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	1a82      	subs	r2, r0, r2
 8004856:	440a      	add	r2, r1
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800485a:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <vTaskSwitchContext+0xdc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a25      	ldr	r2, [pc, #148]	; (80048f4 <vTaskSwitchContext+0xe0>)
 8004860:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004862:	4b26      	ldr	r3, [pc, #152]	; (80048fc <vTaskSwitchContext+0xe8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e010      	b.n	800488c <vTaskSwitchContext+0x78>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <vTaskSwitchContext+0x72>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	607b      	str	r3, [r7, #4]
}
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <vTaskSwitchContext+0x70>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3b01      	subs	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	491c      	ldr	r1, [pc, #112]	; (8004900 <vTaskSwitchContext+0xec>)
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0e4      	beq.n	800486a <vTaskSwitchContext+0x56>
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4a15      	ldr	r2, [pc, #84]	; (8004900 <vTaskSwitchContext+0xec>)
 80048ac:	4413      	add	r3, r2
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	3308      	adds	r3, #8
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d104      	bne.n	80048d0 <vTaskSwitchContext+0xbc>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	605a      	str	r2, [r3, #4]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <vTaskSwitchContext+0xe4>)
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4a08      	ldr	r2, [pc, #32]	; (80048fc <vTaskSwitchContext+0xe8>)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000c50 	.word	0x20000c50
 80048ec:	20000c3c 	.word	0x20000c3c
 80048f0:	20000c58 	.word	0x20000c58
 80048f4:	20000c54 	.word	0x20000c54
 80048f8:	20000754 	.word	0x20000754
 80048fc:	20000c30 	.word	0x20000c30
 8004900:	20000758 	.word	0x20000758

08004904 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	60fb      	str	r3, [r7, #12]
}
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800492a:	4b07      	ldr	r3, [pc, #28]	; (8004948 <vTaskPlaceOnEventList+0x44>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3318      	adds	r3, #24
 8004930:	4619      	mov	r1, r3
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fe fe3a 	bl	80035ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004938:	2101      	movs	r1, #1
 800493a:	6838      	ldr	r0, [r7, #0]
 800493c:	f000 fa80 	bl	8004e40 <prvAddCurrentTaskToDelayedList>
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000754 	.word	0x20000754

0800494c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	617b      	str	r3, [r7, #20]
}
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3318      	adds	r3, #24
 800497a:	4619      	mov	r1, r3
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f7fe fdf2 	bl	8003566 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004988:	f04f 33ff 	mov.w	r3, #4294967295
 800498c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	68b8      	ldr	r0, [r7, #8]
 8004992:	f000 fa55 	bl	8004e40 <prvAddCurrentTaskToDelayedList>
	}
 8004996:	bf00      	nop
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000754 	.word	0x20000754

080049a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	60fb      	str	r3, [r7, #12]
}
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	3318      	adds	r3, #24
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe fe21 	bl	800361c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049da:	4b1e      	ldr	r3, [pc, #120]	; (8004a54 <xTaskRemoveFromEventList+0xb0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d11d      	bne.n	8004a1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fe fe18 	bl	800361c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f0:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <xTaskRemoveFromEventList+0xb4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d903      	bls.n	8004a00 <xTaskRemoveFromEventList+0x5c>
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	4a16      	ldr	r2, [pc, #88]	; (8004a58 <xTaskRemoveFromEventList+0xb4>)
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4a13      	ldr	r2, [pc, #76]	; (8004a5c <xTaskRemoveFromEventList+0xb8>)
 8004a0e:	441a      	add	r2, r3
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f7fe fda5 	bl	8003566 <vListInsertEnd>
 8004a1c:	e005      	b.n	8004a2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	3318      	adds	r3, #24
 8004a22:	4619      	mov	r1, r3
 8004a24:	480e      	ldr	r0, [pc, #56]	; (8004a60 <xTaskRemoveFromEventList+0xbc>)
 8004a26:	f7fe fd9e 	bl	8003566 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <xTaskRemoveFromEventList+0xc0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d905      	bls.n	8004a44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <xTaskRemoveFromEventList+0xc4>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	e001      	b.n	8004a48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004a48:	697b      	ldr	r3, [r7, #20]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000c50 	.word	0x20000c50
 8004a58:	20000c30 	.word	0x20000c30
 8004a5c:	20000758 	.word	0x20000758
 8004a60:	20000be8 	.word	0x20000be8
 8004a64:	20000754 	.word	0x20000754
 8004a68:	20000c3c 	.word	0x20000c3c

08004a6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <vTaskInternalSetTimeOutState+0x24>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <vTaskInternalSetTimeOutState+0x28>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	605a      	str	r2, [r3, #4]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20000c40 	.word	0x20000c40
 8004a94:	20000c2c 	.word	0x20000c2c

08004a98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	613b      	str	r3, [r7, #16]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	60fb      	str	r3, [r7, #12]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ada:	f000 fe07 	bl	80056ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <xTaskCheckForTimeOut+0xbc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d102      	bne.n	8004afe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	e023      	b.n	8004b46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <xTaskCheckForTimeOut+0xc0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d007      	beq.n	8004b1a <xTaskCheckForTimeOut+0x82>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d302      	bcc.n	8004b1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b14:	2301      	movs	r3, #1
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	e015      	b.n	8004b46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d20b      	bcs.n	8004b3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	1ad2      	subs	r2, r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff ff9b 	bl	8004a6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	e004      	b.n	8004b46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b42:	2301      	movs	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b46:	f000 fe01 	bl	800574c <vPortExitCritical>

	return xReturn;
 8004b4a:	69fb      	ldr	r3, [r7, #28]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3720      	adds	r7, #32
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000c2c 	.word	0x20000c2c
 8004b58:	20000c40 	.word	0x20000c40

08004b5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b60:	4b03      	ldr	r3, [pc, #12]	; (8004b70 <vTaskMissedYield+0x14>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
}
 8004b66:	bf00      	nop
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	20000c3c 	.word	0x20000c3c

08004b74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b7c:	f000 f852 	bl	8004c24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <prvIdleTask+0x28>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d9f9      	bls.n	8004b7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <prvIdleTask+0x2c>)
 8004b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b98:	e7f0      	b.n	8004b7c <prvIdleTask+0x8>
 8004b9a:	bf00      	nop
 8004b9c:	20000758 	.word	0x20000758
 8004ba0:	e000ed04 	.word	0xe000ed04

08004ba4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004baa:	2300      	movs	r3, #0
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	e00c      	b.n	8004bca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4a12      	ldr	r2, [pc, #72]	; (8004c04 <prvInitialiseTaskLists+0x60>)
 8004bbc:	4413      	add	r3, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fca6 	bl	8003510 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b37      	cmp	r3, #55	; 0x37
 8004bce:	d9ef      	bls.n	8004bb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bd0:	480d      	ldr	r0, [pc, #52]	; (8004c08 <prvInitialiseTaskLists+0x64>)
 8004bd2:	f7fe fc9d 	bl	8003510 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bd6:	480d      	ldr	r0, [pc, #52]	; (8004c0c <prvInitialiseTaskLists+0x68>)
 8004bd8:	f7fe fc9a 	bl	8003510 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bdc:	480c      	ldr	r0, [pc, #48]	; (8004c10 <prvInitialiseTaskLists+0x6c>)
 8004bde:	f7fe fc97 	bl	8003510 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004be2:	480c      	ldr	r0, [pc, #48]	; (8004c14 <prvInitialiseTaskLists+0x70>)
 8004be4:	f7fe fc94 	bl	8003510 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004be8:	480b      	ldr	r0, [pc, #44]	; (8004c18 <prvInitialiseTaskLists+0x74>)
 8004bea:	f7fe fc91 	bl	8003510 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bee:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <prvInitialiseTaskLists+0x78>)
 8004bf0:	4a05      	ldr	r2, [pc, #20]	; (8004c08 <prvInitialiseTaskLists+0x64>)
 8004bf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <prvInitialiseTaskLists+0x7c>)
 8004bf6:	4a05      	ldr	r2, [pc, #20]	; (8004c0c <prvInitialiseTaskLists+0x68>)
 8004bf8:	601a      	str	r2, [r3, #0]
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000758 	.word	0x20000758
 8004c08:	20000bb8 	.word	0x20000bb8
 8004c0c:	20000bcc 	.word	0x20000bcc
 8004c10:	20000be8 	.word	0x20000be8
 8004c14:	20000bfc 	.word	0x20000bfc
 8004c18:	20000c14 	.word	0x20000c14
 8004c1c:	20000be0 	.word	0x20000be0
 8004c20:	20000be4 	.word	0x20000be4

08004c24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c2a:	e019      	b.n	8004c60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c2c:	f000 fd5e 	bl	80056ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004c30:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <prvCheckTasksWaitingTermination+0x50>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe fced 	bl	800361c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <prvCheckTasksWaitingTermination+0x54>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	4a0b      	ldr	r2, [pc, #44]	; (8004c78 <prvCheckTasksWaitingTermination+0x54>)
 8004c4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <prvCheckTasksWaitingTermination+0x58>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <prvCheckTasksWaitingTermination+0x58>)
 8004c54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c56:	f000 fd79 	bl	800574c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f810 	bl	8004c80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c60:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <prvCheckTasksWaitingTermination+0x58>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e1      	bne.n	8004c2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000bfc 	.word	0x20000bfc
 8004c78:	20000c28 	.word	0x20000c28
 8004c7c:	20000c10 	.word	0x20000c10

08004c80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d108      	bne.n	8004ca4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 feec 	bl	8005a74 <vPortFree>
				vPortFree( pxTCB );
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fee9 	bl	8005a74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ca2:	e018      	b.n	8004cd6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d103      	bne.n	8004cb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fee0 	bl	8005a74 <vPortFree>
	}
 8004cb4:	e00f      	b.n	8004cd6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d00a      	beq.n	8004cd6 <prvDeleteTCB+0x56>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60fb      	str	r3, [r7, #12]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <prvDeleteTCB+0x54>
	}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <prvResetNextTaskUnblockTime+0x40>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <prvResetNextTaskUnblockTime+0x14>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <prvResetNextTaskUnblockTime+0x16>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d004      	beq.n	8004d04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <prvResetNextTaskUnblockTime+0x44>)
 8004cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004d00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d02:	e008      	b.n	8004d16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <prvResetNextTaskUnblockTime+0x40>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4a04      	ldr	r2, [pc, #16]	; (8004d24 <prvResetNextTaskUnblockTime+0x44>)
 8004d14:	6013      	str	r3, [r2, #0]
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr
 8004d20:	20000be0 	.word	0x20000be0
 8004d24:	20000c48 	.word	0x20000c48

08004d28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <xTaskGetSchedulerState+0x34>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d36:	2301      	movs	r3, #1
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	e008      	b.n	8004d4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d3c:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <xTaskGetSchedulerState+0x38>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d102      	bne.n	8004d4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d44:	2302      	movs	r3, #2
 8004d46:	607b      	str	r3, [r7, #4]
 8004d48:	e001      	b.n	8004d4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d4e:	687b      	ldr	r3, [r7, #4]
	}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000c34 	.word	0x20000c34
 8004d60:	20000c50 	.word	0x20000c50

08004d64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d056      	beq.n	8004e28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d7a:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <xTaskPriorityDisinherit+0xd0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d00a      	beq.n	8004d9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	60fb      	str	r3, [r7, #12]
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	60bb      	str	r3, [r7, #8]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbc:	1e5a      	subs	r2, r3, #1
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d02c      	beq.n	8004e28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d128      	bne.n	8004e28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe fc1e 	bl	800361c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <xTaskPriorityDisinherit+0xd4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d903      	bls.n	8004e08 <xTaskPriorityDisinherit+0xa4>
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	4a0c      	ldr	r2, [pc, #48]	; (8004e38 <xTaskPriorityDisinherit+0xd4>)
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <xTaskPriorityDisinherit+0xd8>)
 8004e16:	441a      	add	r2, r3
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f7fe fba1 	bl	8003566 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e28:	697b      	ldr	r3, [r7, #20]
	}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000754 	.word	0x20000754
 8004e38:	20000c30 	.word	0x20000c30
 8004e3c:	20000758 	.word	0x20000758

08004e40 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e4a:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e50:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3304      	adds	r3, #4
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe fbe0 	bl	800361c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d10a      	bne.n	8004e7a <prvAddCurrentTaskToDelayedList+0x3a>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4619      	mov	r1, r3
 8004e72:	4819      	ldr	r0, [pc, #100]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e74:	f7fe fb77 	bl	8003566 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e78:	e026      	b.n	8004ec8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4413      	add	r3, r2
 8004e80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e82:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d209      	bcs.n	8004ea6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e92:	4b12      	ldr	r3, [pc, #72]	; (8004edc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	f7fe fb84 	bl	80035ac <vListInsert>
}
 8004ea4:	e010      	b.n	8004ec8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ea6:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f7fe fb7a 	bl	80035ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d202      	bcs.n	8004ec8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ec2:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	6013      	str	r3, [r2, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000c2c 	.word	0x20000c2c
 8004ed4:	20000754 	.word	0x20000754
 8004ed8:	20000c14 	.word	0x20000c14
 8004edc:	20000be4 	.word	0x20000be4
 8004ee0:	20000be0 	.word	0x20000be0
 8004ee4:	20000c48 	.word	0x20000c48

08004ee8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ef2:	f000 facb 	bl	800548c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ef6:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <xTimerCreateTimerTask+0x80>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d021      	beq.n	8004f42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f06:	1d3a      	adds	r2, r7, #4
 8004f08:	f107 0108 	add.w	r1, r7, #8
 8004f0c:	f107 030c 	add.w	r3, r7, #12
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fe fae3 	bl	80034dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	9202      	str	r2, [sp, #8]
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	2302      	movs	r3, #2
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	2300      	movs	r3, #0
 8004f26:	460a      	mov	r2, r1
 8004f28:	4910      	ldr	r1, [pc, #64]	; (8004f6c <xTimerCreateTimerTask+0x84>)
 8004f2a:	4811      	ldr	r0, [pc, #68]	; (8004f70 <xTimerCreateTimerTask+0x88>)
 8004f2c:	f7ff f8c2 	bl	80040b4 <xTaskCreateStatic>
 8004f30:	4603      	mov	r3, r0
 8004f32:	4a10      	ldr	r2, [pc, #64]	; (8004f74 <xTimerCreateTimerTask+0x8c>)
 8004f34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f36:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <xTimerCreateTimerTask+0x8c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	613b      	str	r3, [r7, #16]
}
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f5e:	697b      	ldr	r3, [r7, #20]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20000c8c 	.word	0x20000c8c
 8004f6c:	08007288 	.word	0x08007288
 8004f70:	08005095 	.word	0x08005095
 8004f74:	20000c90 	.word	0x20000c90

08004f78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	623b      	str	r3, [r7, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <xTimerGenericCommand+0x98>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d02a      	beq.n	8005004 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	dc18      	bgt.n	8004ff2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fc0:	f7ff feb2 	bl	8004d28 <xTaskGetSchedulerState>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d109      	bne.n	8004fde <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fca:	4b11      	ldr	r3, [pc, #68]	; (8005010 <xTimerGenericCommand+0x98>)
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	f107 0110 	add.w	r1, r7, #16
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd6:	f7fe fc8b 	bl	80038f0 <xQueueGenericSend>
 8004fda:	6278      	str	r0, [r7, #36]	; 0x24
 8004fdc:	e012      	b.n	8005004 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <xTimerGenericCommand+0x98>)
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	f107 0110 	add.w	r1, r7, #16
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f7fe fc81 	bl	80038f0 <xQueueGenericSend>
 8004fee:	6278      	str	r0, [r7, #36]	; 0x24
 8004ff0:	e008      	b.n	8005004 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ff2:	4b07      	ldr	r3, [pc, #28]	; (8005010 <xTimerGenericCommand+0x98>)
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	f107 0110 	add.w	r1, r7, #16
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	f7fe fd75 	bl	8003aec <xQueueGenericSendFromISR>
 8005002:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005006:	4618      	mov	r0, r3
 8005008:	3728      	adds	r7, #40	; 0x28
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000c8c 	.word	0x20000c8c

08005014 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af02      	add	r7, sp, #8
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800501e:	4b1c      	ldr	r3, [pc, #112]	; (8005090 <prvProcessExpiredTimer+0x7c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	3304      	adds	r3, #4
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe faf5 	bl	800361c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d122      	bne.n	8005080 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	18d1      	adds	r1, r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	6978      	ldr	r0, [r7, #20]
 8005048:	f000 f8c8 	bl	80051dc <prvInsertTimerInActiveList>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005052:	2300      	movs	r3, #0
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2300      	movs	r3, #0
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	2100      	movs	r1, #0
 800505c:	6978      	ldr	r0, [r7, #20]
 800505e:	f7ff ff8b 	bl	8004f78 <xTimerGenericCommand>
 8005062:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	60fb      	str	r3, [r7, #12]
}
 800507c:	bf00      	nop
 800507e:	e7fe      	b.n	800507e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	6978      	ldr	r0, [r7, #20]
 8005086:	4798      	blx	r3
}
 8005088:	bf00      	nop
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20000c84 	.word	0x20000c84

08005094 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800509c:	f107 0308 	add.w	r3, r7, #8
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 f857 	bl	8005154 <prvGetNextExpireTime>
 80050a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4619      	mov	r1, r3
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f803 	bl	80050b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050b2:	f000 f8d5 	bl	8005260 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050b6:	e7f1      	b.n	800509c <prvTimerTask+0x8>

080050b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050c2:	f7ff fa2f 	bl	8004524 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050c6:	f107 0308 	add.w	r3, r7, #8
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f866 	bl	800519c <prvSampleTimeNow>
 80050d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d130      	bne.n	800513a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <prvProcessTimerOrBlockTask+0x3c>
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d806      	bhi.n	80050f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050e6:	f7ff fa2b 	bl	8004540 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050ea:	68f9      	ldr	r1, [r7, #12]
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff ff91 	bl	8005014 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80050f2:	e024      	b.n	800513e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050fa:	4b13      	ldr	r3, [pc, #76]	; (8005148 <prvProcessTimerOrBlockTask+0x90>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800510c:	4b0f      	ldr	r3, [pc, #60]	; (800514c <prvProcessTimerOrBlockTask+0x94>)
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	4619      	mov	r1, r3
 800511a:	f7fe ff97 	bl	800404c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800511e:	f7ff fa0f 	bl	8004540 <xTaskResumeAll>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <prvProcessTimerOrBlockTask+0x98>)
 800512a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	f3bf 8f6f 	isb	sy
}
 8005138:	e001      	b.n	800513e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800513a:	f7ff fa01 	bl	8004540 <xTaskResumeAll>
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000c88 	.word	0x20000c88
 800514c:	20000c8c 	.word	0x20000c8c
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800515c:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <prvGetNextExpireTime+0x44>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	bf0c      	ite	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	2300      	movne	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d105      	bne.n	8005186 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800517a:	4b07      	ldr	r3, [pc, #28]	; (8005198 <prvGetNextExpireTime+0x44>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	e001      	b.n	800518a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800518a:	68fb      	ldr	r3, [r7, #12]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000c84 	.word	0x20000c84

0800519c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051a4:	f7ff fa6a 	bl	800467c <xTaskGetTickCount>
 80051a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051aa:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <prvSampleTimeNow+0x3c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d205      	bcs.n	80051c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051b4:	f000 f908 	bl	80053c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e002      	b.n	80051c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051c6:	4a04      	ldr	r2, [pc, #16]	; (80051d8 <prvSampleTimeNow+0x3c>)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051cc:	68fb      	ldr	r3, [r7, #12]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000c94 	.word	0x20000c94

080051dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d812      	bhi.n	8005228 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	1ad2      	subs	r2, r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005210:	2301      	movs	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	e01b      	b.n	800524e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005216:	4b10      	ldr	r3, [pc, #64]	; (8005258 <prvInsertTimerInActiveList+0x7c>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3304      	adds	r3, #4
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7fe f9c3 	bl	80035ac <vListInsert>
 8005226:	e012      	b.n	800524e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d206      	bcs.n	800523e <prvInsertTimerInActiveList+0x62>
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d302      	bcc.n	800523e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005238:	2301      	movs	r3, #1
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e007      	b.n	800524e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <prvInsertTimerInActiveList+0x80>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3304      	adds	r3, #4
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f7fe f9af 	bl	80035ac <vListInsert>
		}
	}

	return xProcessTimerNow;
 800524e:	697b      	ldr	r3, [r7, #20]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20000c88 	.word	0x20000c88
 800525c:	20000c84 	.word	0x20000c84

08005260 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08e      	sub	sp, #56	; 0x38
 8005264:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005266:	e09d      	b.n	80053a4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	da18      	bge.n	80052a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800526e:	1d3b      	adds	r3, r7, #4
 8005270:	3304      	adds	r3, #4
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	61fb      	str	r3, [r7, #28]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005296:	6850      	ldr	r0, [r2, #4]
 8005298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800529a:	6892      	ldr	r2, [r2, #8]
 800529c:	4611      	mov	r1, r2
 800529e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	db7d      	blt.n	80053a2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d004      	beq.n	80052bc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	3304      	adds	r3, #4
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fe f9b0 	bl	800361c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052bc:	463b      	mov	r3, r7
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff ff6c 	bl	800519c <prvSampleTimeNow>
 80052c4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b09      	cmp	r3, #9
 80052ca:	d86b      	bhi.n	80053a4 <prvProcessReceivedCommands+0x144>
 80052cc:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <prvProcessReceivedCommands+0x74>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	080052fd 	.word	0x080052fd
 80052d8:	080052fd 	.word	0x080052fd
 80052dc:	080052fd 	.word	0x080052fd
 80052e0:	080053a5 	.word	0x080053a5
 80052e4:	08005359 	.word	0x08005359
 80052e8:	08005391 	.word	0x08005391
 80052ec:	080052fd 	.word	0x080052fd
 80052f0:	080052fd 	.word	0x080052fd
 80052f4:	080053a5 	.word	0x080053a5
 80052f8:	08005359 	.word	0x08005359
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	18d1      	adds	r1, r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800530a:	f7ff ff67 	bl	80051dc <prvInsertTimerInActiveList>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d047      	beq.n	80053a4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800531a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d13f      	bne.n	80053a4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	441a      	add	r2, r3
 800532c:	2300      	movs	r3, #0
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	2300      	movs	r3, #0
 8005332:	2100      	movs	r1, #0
 8005334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005336:	f7ff fe1f 	bl	8004f78 <xTimerGenericCommand>
 800533a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d130      	bne.n	80053a4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	61bb      	str	r3, [r7, #24]
}
 8005354:	bf00      	nop
 8005356:	e7fe      	b.n	8005356 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10a      	bne.n	800537c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	617b      	str	r3, [r7, #20]
}
 8005378:	bf00      	nop
 800537a:	e7fe      	b.n	800537a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	699a      	ldr	r2, [r3, #24]
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	18d1      	adds	r1, r2, r3
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800538a:	f7ff ff27 	bl	80051dc <prvInsertTimerInActiveList>
					break;
 800538e:	e009      	b.n	80053a4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d104      	bne.n	80053a4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800539a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800539c:	f000 fb6a 	bl	8005a74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80053a0:	e000      	b.n	80053a4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80053a2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053a4:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <prvProcessReceivedCommands+0x164>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	1d39      	adds	r1, r7, #4
 80053aa:	2200      	movs	r2, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe fc35 	bl	8003c1c <xQueueReceive>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f47f af57 	bne.w	8005268 <prvProcessReceivedCommands+0x8>
	}
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	3730      	adds	r7, #48	; 0x30
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	20000c8c 	.word	0x20000c8c

080053c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053ce:	e045      	b.n	800545c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053d0:	4b2c      	ldr	r3, [pc, #176]	; (8005484 <prvSwitchTimerLists+0xbc>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053da:	4b2a      	ldr	r3, [pc, #168]	; (8005484 <prvSwitchTimerLists+0xbc>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fe f917 	bl	800361c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d12e      	bne.n	800545c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4413      	add	r3, r2
 8005406:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	429a      	cmp	r2, r3
 800540e:	d90e      	bls.n	800542e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800541c:	4b19      	ldr	r3, [pc, #100]	; (8005484 <prvSwitchTimerLists+0xbc>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f7fe f8c0 	bl	80035ac <vListInsert>
 800542c:	e016      	b.n	800545c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800542e:	2300      	movs	r3, #0
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	2300      	movs	r3, #0
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	2100      	movs	r1, #0
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff fd9d 	bl	8004f78 <xTimerGenericCommand>
 800543e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <prvSwitchTimerLists+0x94>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	603b      	str	r3, [r7, #0]
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <prvSwitchTimerLists+0xbc>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1b4      	bne.n	80053d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005466:	4b07      	ldr	r3, [pc, #28]	; (8005484 <prvSwitchTimerLists+0xbc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800546c:	4b06      	ldr	r3, [pc, #24]	; (8005488 <prvSwitchTimerLists+0xc0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a04      	ldr	r2, [pc, #16]	; (8005484 <prvSwitchTimerLists+0xbc>)
 8005472:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005474:	4a04      	ldr	r2, [pc, #16]	; (8005488 <prvSwitchTimerLists+0xc0>)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	6013      	str	r3, [r2, #0]
}
 800547a:	bf00      	nop
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000c84 	.word	0x20000c84
 8005488:	20000c88 	.word	0x20000c88

0800548c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005492:	f000 f92b 	bl	80056ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <prvCheckForValidListAndQueue+0x60>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d120      	bne.n	80054e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800549e:	4814      	ldr	r0, [pc, #80]	; (80054f0 <prvCheckForValidListAndQueue+0x64>)
 80054a0:	f7fe f836 	bl	8003510 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054a4:	4813      	ldr	r0, [pc, #76]	; (80054f4 <prvCheckForValidListAndQueue+0x68>)
 80054a6:	f7fe f833 	bl	8003510 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054aa:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <prvCheckForValidListAndQueue+0x6c>)
 80054ac:	4a10      	ldr	r2, [pc, #64]	; (80054f0 <prvCheckForValidListAndQueue+0x64>)
 80054ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054b0:	4b12      	ldr	r3, [pc, #72]	; (80054fc <prvCheckForValidListAndQueue+0x70>)
 80054b2:	4a10      	ldr	r2, [pc, #64]	; (80054f4 <prvCheckForValidListAndQueue+0x68>)
 80054b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054b6:	2300      	movs	r3, #0
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	4b11      	ldr	r3, [pc, #68]	; (8005500 <prvCheckForValidListAndQueue+0x74>)
 80054bc:	4a11      	ldr	r2, [pc, #68]	; (8005504 <prvCheckForValidListAndQueue+0x78>)
 80054be:	2110      	movs	r1, #16
 80054c0:	200a      	movs	r0, #10
 80054c2:	f7fe f93d 	bl	8003740 <xQueueGenericCreateStatic>
 80054c6:	4603      	mov	r3, r0
 80054c8:	4a08      	ldr	r2, [pc, #32]	; (80054ec <prvCheckForValidListAndQueue+0x60>)
 80054ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80054cc:	4b07      	ldr	r3, [pc, #28]	; (80054ec <prvCheckForValidListAndQueue+0x60>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <prvCheckForValidListAndQueue+0x60>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	490b      	ldr	r1, [pc, #44]	; (8005508 <prvCheckForValidListAndQueue+0x7c>)
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fe fd8e 	bl	8003ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054e0:	f000 f934 	bl	800574c <vPortExitCritical>
}
 80054e4:	bf00      	nop
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20000c8c 	.word	0x20000c8c
 80054f0:	20000c5c 	.word	0x20000c5c
 80054f4:	20000c70 	.word	0x20000c70
 80054f8:	20000c84 	.word	0x20000c84
 80054fc:	20000c88 	.word	0x20000c88
 8005500:	20000d38 	.word	0x20000d38
 8005504:	20000c98 	.word	0x20000c98
 8005508:	08007290 	.word	0x08007290

0800550c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3b04      	subs	r3, #4
 800551c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3b04      	subs	r3, #4
 800552a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f023 0201 	bic.w	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3b04      	subs	r3, #4
 800553a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800553c:	4a08      	ldr	r2, [pc, #32]	; (8005560 <pxPortInitialiseStack+0x54>)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3b14      	subs	r3, #20
 8005546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3b20      	subs	r3, #32
 8005552:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005554:	68fb      	ldr	r3, [r7, #12]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	08005565 	.word	0x08005565

08005564 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800556a:	2300      	movs	r3, #0
 800556c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <prvTaskExitError+0x54>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005576:	d00a      	beq.n	800558e <prvTaskExitError+0x2a>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	60fb      	str	r3, [r7, #12]
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <prvTaskExitError+0x28>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	60bb      	str	r3, [r7, #8]
}
 80055a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055a2:	bf00      	nop
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0fc      	beq.n	80055a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055aa:	bf00      	nop
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	20000008 	.word	0x20000008
 80055bc:	00000000 	.word	0x00000000

080055c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <pxCurrentTCBConst2>)
 80055c2:	6819      	ldr	r1, [r3, #0]
 80055c4:	6808      	ldr	r0, [r1, #0]
 80055c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055ca:	f380 8809 	msr	PSP, r0
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f04f 0000 	mov.w	r0, #0
 80055d6:	f380 8811 	msr	BASEPRI, r0
 80055da:	f04e 0e0d 	orr.w	lr, lr, #13
 80055de:	4770      	bx	lr

080055e0 <pxCurrentTCBConst2>:
 80055e0:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055e4:	bf00      	nop
 80055e6:	bf00      	nop

080055e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80055e8:	4806      	ldr	r0, [pc, #24]	; (8005604 <prvPortStartFirstTask+0x1c>)
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	6800      	ldr	r0, [r0, #0]
 80055ee:	f380 8808 	msr	MSP, r0
 80055f2:	b662      	cpsie	i
 80055f4:	b661      	cpsie	f
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	df00      	svc	0
 8005600:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005602:	bf00      	nop
 8005604:	e000ed08 	.word	0xe000ed08

08005608 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800560e:	4b32      	ldr	r3, [pc, #200]	; (80056d8 <xPortStartScheduler+0xd0>)
 8005610:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	b2db      	uxtb	r3, r3
 8005618:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	22ff      	movs	r2, #255	; 0xff
 800561e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005630:	b2da      	uxtb	r2, r3
 8005632:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <xPortStartScheduler+0xd4>)
 8005634:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005636:	4b2a      	ldr	r3, [pc, #168]	; (80056e0 <xPortStartScheduler+0xd8>)
 8005638:	2207      	movs	r2, #7
 800563a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800563c:	e009      	b.n	8005652 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800563e:	4b28      	ldr	r3, [pc, #160]	; (80056e0 <xPortStartScheduler+0xd8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3b01      	subs	r3, #1
 8005644:	4a26      	ldr	r2, [pc, #152]	; (80056e0 <xPortStartScheduler+0xd8>)
 8005646:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	b2db      	uxtb	r3, r3
 8005650:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005652:	78fb      	ldrb	r3, [r7, #3]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565a:	2b80      	cmp	r3, #128	; 0x80
 800565c:	d0ef      	beq.n	800563e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800565e:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <xPortStartScheduler+0xd8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f1c3 0307 	rsb	r3, r3, #7
 8005666:	2b04      	cmp	r3, #4
 8005668:	d00a      	beq.n	8005680 <xPortStartScheduler+0x78>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	60bb      	str	r3, [r7, #8]
}
 800567c:	bf00      	nop
 800567e:	e7fe      	b.n	800567e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005680:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <xPortStartScheduler+0xd8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	4a16      	ldr	r2, [pc, #88]	; (80056e0 <xPortStartScheduler+0xd8>)
 8005688:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800568a:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <xPortStartScheduler+0xd8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005692:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <xPortStartScheduler+0xd8>)
 8005694:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	b2da      	uxtb	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800569e:	4b11      	ldr	r3, [pc, #68]	; (80056e4 <xPortStartScheduler+0xdc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a10      	ldr	r2, [pc, #64]	; (80056e4 <xPortStartScheduler+0xdc>)
 80056a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056aa:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <xPortStartScheduler+0xdc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a0d      	ldr	r2, [pc, #52]	; (80056e4 <xPortStartScheduler+0xdc>)
 80056b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056b6:	f000 f8b9 	bl	800582c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056ba:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <xPortStartScheduler+0xe0>)
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056c0:	f7ff ff92 	bl	80055e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056c4:	f7ff f8a6 	bl	8004814 <vTaskSwitchContext>
	prvTaskExitError();
 80056c8:	f7ff ff4c 	bl	8005564 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	e000e400 	.word	0xe000e400
 80056dc:	20000d88 	.word	0x20000d88
 80056e0:	20000d8c 	.word	0x20000d8c
 80056e4:	e000ed20 	.word	0xe000ed20
 80056e8:	20000008 	.word	0x20000008

080056ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	607b      	str	r3, [r7, #4]
}
 8005704:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005706:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <vPortEnterCritical+0x58>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3301      	adds	r3, #1
 800570c:	4a0d      	ldr	r2, [pc, #52]	; (8005744 <vPortEnterCritical+0x58>)
 800570e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005710:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <vPortEnterCritical+0x58>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d10f      	bne.n	8005738 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005718:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <vPortEnterCritical+0x5c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <vPortEnterCritical+0x4c>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	603b      	str	r3, [r7, #0]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <vPortEnterCritical+0x4a>
	}
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	bc80      	pop	{r7}
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20000008 	.word	0x20000008
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005752:	4b11      	ldr	r3, [pc, #68]	; (8005798 <vPortExitCritical+0x4c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <vPortExitCritical+0x24>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	607b      	str	r3, [r7, #4]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005770:	4b09      	ldr	r3, [pc, #36]	; (8005798 <vPortExitCritical+0x4c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3b01      	subs	r3, #1
 8005776:	4a08      	ldr	r2, [pc, #32]	; (8005798 <vPortExitCritical+0x4c>)
 8005778:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <vPortExitCritical+0x4c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d105      	bne.n	800578e <vPortExitCritical+0x42>
 8005782:	2300      	movs	r3, #0
 8005784:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f383 8811 	msr	BASEPRI, r3
}
 800578c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr
 8005798:	20000008 	.word	0x20000008
 800579c:	00000000 	.word	0x00000000

080057a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057a0:	f3ef 8009 	mrs	r0, PSP
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	4b0d      	ldr	r3, [pc, #52]	; (80057e0 <pxCurrentTCBConst>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80057b0:	6010      	str	r0, [r2, #0]
 80057b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80057b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057ba:	f380 8811 	msr	BASEPRI, r0
 80057be:	f7ff f829 	bl	8004814 <vTaskSwitchContext>
 80057c2:	f04f 0000 	mov.w	r0, #0
 80057c6:	f380 8811 	msr	BASEPRI, r0
 80057ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	6808      	ldr	r0, [r1, #0]
 80057d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80057d6:	f380 8809 	msr	PSP, r0
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	4770      	bx	lr

080057e0 <pxCurrentTCBConst>:
 80057e0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop

080057e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	607b      	str	r3, [r7, #4]
}
 8005800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005802:	f7fe ff49 	bl	8004698 <xTaskIncrementTick>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <SysTick_Handler+0x40>)
 800580e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	2300      	movs	r3, #0
 8005816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	f383 8811 	msr	BASEPRI, r3
}
 800581e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	e000ed04 	.word	0xe000ed04

0800582c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005830:	4b0a      	ldr	r3, [pc, #40]	; (800585c <vPortSetupTimerInterrupt+0x30>)
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005836:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <vPortSetupTimerInterrupt+0x34>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800583c:	4b09      	ldr	r3, [pc, #36]	; (8005864 <vPortSetupTimerInterrupt+0x38>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a09      	ldr	r2, [pc, #36]	; (8005868 <vPortSetupTimerInterrupt+0x3c>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	099b      	lsrs	r3, r3, #6
 8005848:	4a08      	ldr	r2, [pc, #32]	; (800586c <vPortSetupTimerInterrupt+0x40>)
 800584a:	3b01      	subs	r3, #1
 800584c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800584e:	4b03      	ldr	r3, [pc, #12]	; (800585c <vPortSetupTimerInterrupt+0x30>)
 8005850:	2207      	movs	r2, #7
 8005852:	601a      	str	r2, [r3, #0]
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr
 800585c:	e000e010 	.word	0xe000e010
 8005860:	e000e018 	.word	0xe000e018
 8005864:	2000000c 	.word	0x2000000c
 8005868:	10624dd3 	.word	0x10624dd3
 800586c:	e000e014 	.word	0xe000e014

08005870 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005876:	f3ef 8305 	mrs	r3, IPSR
 800587a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b0f      	cmp	r3, #15
 8005880:	d914      	bls.n	80058ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005882:	4a16      	ldr	r2, [pc, #88]	; (80058dc <vPortValidateInterruptPriority+0x6c>)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800588c:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <vPortValidateInterruptPriority+0x70>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	7afa      	ldrb	r2, [r7, #11]
 8005892:	429a      	cmp	r2, r3
 8005894:	d20a      	bcs.n	80058ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	607b      	str	r3, [r7, #4]
}
 80058a8:	bf00      	nop
 80058aa:	e7fe      	b.n	80058aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058ac:	4b0d      	ldr	r3, [pc, #52]	; (80058e4 <vPortValidateInterruptPriority+0x74>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058b4:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <vPortValidateInterruptPriority+0x78>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d90a      	bls.n	80058d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	603b      	str	r3, [r7, #0]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <vPortValidateInterruptPriority+0x60>
	}
 80058d2:	bf00      	nop
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bc80      	pop	{r7}
 80058da:	4770      	bx	lr
 80058dc:	e000e3f0 	.word	0xe000e3f0
 80058e0:	20000d88 	.word	0x20000d88
 80058e4:	e000ed0c 	.word	0xe000ed0c
 80058e8:	20000d8c 	.word	0x20000d8c

080058ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08a      	sub	sp, #40	; 0x28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058f4:	2300      	movs	r3, #0
 80058f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058f8:	f7fe fe14 	bl	8004524 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058fc:	4b58      	ldr	r3, [pc, #352]	; (8005a60 <pvPortMalloc+0x174>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005904:	f000 f910 	bl	8005b28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005908:	4b56      	ldr	r3, [pc, #344]	; (8005a64 <pvPortMalloc+0x178>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4013      	ands	r3, r2
 8005910:	2b00      	cmp	r3, #0
 8005912:	f040 808e 	bne.w	8005a32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01d      	beq.n	8005958 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800591c:	2208      	movs	r2, #8
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4413      	add	r3, r2
 8005922:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	2b00      	cmp	r3, #0
 800592c:	d014      	beq.n	8005958 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f023 0307 	bic.w	r3, r3, #7
 8005934:	3308      	adds	r3, #8
 8005936:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <pvPortMalloc+0x6c>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	617b      	str	r3, [r7, #20]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d069      	beq.n	8005a32 <pvPortMalloc+0x146>
 800595e:	4b42      	ldr	r3, [pc, #264]	; (8005a68 <pvPortMalloc+0x17c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	429a      	cmp	r2, r3
 8005966:	d864      	bhi.n	8005a32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005968:	4b40      	ldr	r3, [pc, #256]	; (8005a6c <pvPortMalloc+0x180>)
 800596a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800596c:	4b3f      	ldr	r3, [pc, #252]	; (8005a6c <pvPortMalloc+0x180>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005972:	e004      	b.n	800597e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	429a      	cmp	r2, r3
 8005986:	d903      	bls.n	8005990 <pvPortMalloc+0xa4>
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1f1      	bne.n	8005974 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005990:	4b33      	ldr	r3, [pc, #204]	; (8005a60 <pvPortMalloc+0x174>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005996:	429a      	cmp	r2, r3
 8005998:	d04b      	beq.n	8005a32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2208      	movs	r2, #8
 80059a0:	4413      	add	r3, r2
 80059a2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	1ad2      	subs	r2, r2, r3
 80059b4:	2308      	movs	r3, #8
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d91f      	bls.n	80059fc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4413      	add	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <pvPortMalloc+0xf8>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	613b      	str	r3, [r7, #16]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	1ad2      	subs	r2, r2, r3
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059f6:	69b8      	ldr	r0, [r7, #24]
 80059f8:	f000 f8f8 	bl	8005bec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059fc:	4b1a      	ldr	r3, [pc, #104]	; (8005a68 <pvPortMalloc+0x17c>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	4a18      	ldr	r2, [pc, #96]	; (8005a68 <pvPortMalloc+0x17c>)
 8005a08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a0a:	4b17      	ldr	r3, [pc, #92]	; (8005a68 <pvPortMalloc+0x17c>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b18      	ldr	r3, [pc, #96]	; (8005a70 <pvPortMalloc+0x184>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d203      	bcs.n	8005a1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a16:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <pvPortMalloc+0x17c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a15      	ldr	r2, [pc, #84]	; (8005a70 <pvPortMalloc+0x184>)
 8005a1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <pvPortMalloc+0x178>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a32:	f7fe fd85 	bl	8004540 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <pvPortMalloc+0x16a>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	60fb      	str	r3, [r7, #12]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <pvPortMalloc+0x168>
	return pvReturn;
 8005a56:	69fb      	ldr	r3, [r7, #28]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3728      	adds	r7, #40	; 0x28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20001c98 	.word	0x20001c98
 8005a64:	20001ca4 	.word	0x20001ca4
 8005a68:	20001c9c 	.word	0x20001c9c
 8005a6c:	20001c90 	.word	0x20001c90
 8005a70:	20001ca0 	.word	0x20001ca0

08005a74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d048      	beq.n	8005b18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a86:	2308      	movs	r3, #8
 8005a88:	425b      	negs	r3, r3
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	4b21      	ldr	r3, [pc, #132]	; (8005b20 <vPortFree+0xac>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10a      	bne.n	8005ab8 <vPortFree+0x44>
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	60fb      	str	r3, [r7, #12]
}
 8005ab4:	bf00      	nop
 8005ab6:	e7fe      	b.n	8005ab6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <vPortFree+0x62>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	60bb      	str	r3, [r7, #8]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <vPortFree+0xac>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d019      	beq.n	8005b18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d115      	bne.n	8005b18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <vPortFree+0xac>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	43db      	mvns	r3, r3
 8005af6:	401a      	ands	r2, r3
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005afc:	f7fe fd12 	bl	8004524 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <vPortFree+0xb0>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4413      	add	r3, r2
 8005b0a:	4a06      	ldr	r2, [pc, #24]	; (8005b24 <vPortFree+0xb0>)
 8005b0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b0e:	6938      	ldr	r0, [r7, #16]
 8005b10:	f000 f86c 	bl	8005bec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005b14:	f7fe fd14 	bl	8004540 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b18:	bf00      	nop
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	20001ca4 	.word	0x20001ca4
 8005b24:	20001c9c 	.word	0x20001c9c

08005b28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b2e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005b32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b34:	4b27      	ldr	r3, [pc, #156]	; (8005bd4 <prvHeapInit+0xac>)
 8005b36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00c      	beq.n	8005b5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3307      	adds	r3, #7
 8005b46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0307 	bic.w	r3, r3, #7
 8005b4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	4a1f      	ldr	r2, [pc, #124]	; (8005bd4 <prvHeapInit+0xac>)
 8005b58:	4413      	add	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b60:	4a1d      	ldr	r2, [pc, #116]	; (8005bd8 <prvHeapInit+0xb0>)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b66:	4b1c      	ldr	r3, [pc, #112]	; (8005bd8 <prvHeapInit+0xb0>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	4413      	add	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b74:	2208      	movs	r2, #8
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0307 	bic.w	r3, r3, #7
 8005b82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <prvHeapInit+0xb4>)
 8005b88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b8a:	4b14      	ldr	r3, [pc, #80]	; (8005bdc <prvHeapInit+0xb4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b92:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <prvHeapInit+0xb4>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	1ad2      	subs	r2, r2, r3
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <prvHeapInit+0xb4>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	4a0a      	ldr	r2, [pc, #40]	; (8005be0 <prvHeapInit+0xb8>)
 8005bb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <prvHeapInit+0xbc>)
 8005bbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bc0:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <prvHeapInit+0xc0>)
 8005bc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005bc6:	601a      	str	r2, [r3, #0]
}
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bc80      	pop	{r7}
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000d90 	.word	0x20000d90
 8005bd8:	20001c90 	.word	0x20001c90
 8005bdc:	20001c98 	.word	0x20001c98
 8005be0:	20001ca0 	.word	0x20001ca0
 8005be4:	20001c9c 	.word	0x20001c9c
 8005be8:	20001ca4 	.word	0x20001ca4

08005bec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bf4:	4b27      	ldr	r3, [pc, #156]	; (8005c94 <prvInsertBlockIntoFreeList+0xa8>)
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e002      	b.n	8005c00 <prvInsertBlockIntoFreeList+0x14>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d8f7      	bhi.n	8005bfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	4413      	add	r3, r2
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d108      	bne.n	8005c2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	441a      	add	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	441a      	add	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d118      	bne.n	8005c74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <prvInsertBlockIntoFreeList+0xac>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d00d      	beq.n	8005c6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	441a      	add	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	e008      	b.n	8005c7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <prvInsertBlockIntoFreeList+0xac>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	e003      	b.n	8005c7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d002      	beq.n	8005c8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr
 8005c94:	20001c90 	.word	0x20001c90
 8005c98:	20001c98 	.word	0x20001c98

08005c9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005ca6:	463b      	mov	r3, r7
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	605a      	str	r2, [r3, #4]
 8005cae:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005cb0:	4b1f      	ldr	r3, [pc, #124]	; (8005d30 <MX_ADC1_Init+0x94>)
 8005cb2:	4a20      	ldr	r2, [pc, #128]	; (8005d34 <MX_ADC1_Init+0x98>)
 8005cb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005cb6:	4b1e      	ldr	r3, [pc, #120]	; (8005d30 <MX_ADC1_Init+0x94>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005cbc:	4b1c      	ldr	r3, [pc, #112]	; (8005d30 <MX_ADC1_Init+0x94>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005cc2:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <MX_ADC1_Init+0x94>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005cc8:	4b19      	ldr	r3, [pc, #100]	; (8005d30 <MX_ADC1_Init+0x94>)
 8005cca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005cce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005cd0:	4b17      	ldr	r3, [pc, #92]	; (8005d30 <MX_ADC1_Init+0x94>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005cd6:	4b16      	ldr	r3, [pc, #88]	; (8005d30 <MX_ADC1_Init+0x94>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005cdc:	4814      	ldr	r0, [pc, #80]	; (8005d30 <MX_ADC1_Init+0x94>)
 8005cde:	f7fa fa71 	bl	80001c4 <HAL_ADC_Init>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <MX_ADC1_Init+0x50>
  {
    Error_Handler();
 8005ce8:	f000 fb86 	bl	80063f8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8005cec:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8005cf0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005cf2:	f107 030c 	add.w	r3, r7, #12
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	480d      	ldr	r0, [pc, #52]	; (8005d30 <MX_ADC1_Init+0x94>)
 8005cfa:	f7fa ff2f 	bl	8000b5c <HAL_ADCEx_MultiModeConfigChannel>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8005d04:	f000 fb78 	bl	80063f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d14:	463b      	mov	r3, r7
 8005d16:	4619      	mov	r1, r3
 8005d18:	4805      	ldr	r0, [pc, #20]	; (8005d30 <MX_ADC1_Init+0x94>)
 8005d1a:	f7fa fbeb 	bl	80004f4 <HAL_ADC_ConfigChannel>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8005d24:	f000 fb68 	bl	80063f8 <Error_Handler>
  }

}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20001d28 	.word	0x20001d28
 8005d34:	40012400 	.word	0x40012400

08005d38 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005d3e:	1d3b      	adds	r3, r7, #4
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	605a      	str	r2, [r3, #4]
 8005d46:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8005d48:	4b18      	ldr	r3, [pc, #96]	; (8005dac <MX_ADC2_Init+0x74>)
 8005d4a:	4a19      	ldr	r2, [pc, #100]	; (8005db0 <MX_ADC2_Init+0x78>)
 8005d4c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005d4e:	4b17      	ldr	r3, [pc, #92]	; (8005dac <MX_ADC2_Init+0x74>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005d54:	4b15      	ldr	r3, [pc, #84]	; (8005dac <MX_ADC2_Init+0x74>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005d5a:	4b14      	ldr	r3, [pc, #80]	; (8005dac <MX_ADC2_Init+0x74>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005d60:	4b12      	ldr	r3, [pc, #72]	; (8005dac <MX_ADC2_Init+0x74>)
 8005d62:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005d66:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005d68:	4b10      	ldr	r3, [pc, #64]	; (8005dac <MX_ADC2_Init+0x74>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <MX_ADC2_Init+0x74>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005d74:	480d      	ldr	r0, [pc, #52]	; (8005dac <MX_ADC2_Init+0x74>)
 8005d76:	f7fa fa25 	bl	80001c4 <HAL_ADC_Init>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8005d80:	f000 fb3a 	bl	80063f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005d84:	2302      	movs	r3, #2
 8005d86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d90:	1d3b      	adds	r3, r7, #4
 8005d92:	4619      	mov	r1, r3
 8005d94:	4805      	ldr	r0, [pc, #20]	; (8005dac <MX_ADC2_Init+0x74>)
 8005d96:	f7fa fbad 	bl	80004f4 <HAL_ADC_ConfigChannel>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8005da0:	f000 fb2a 	bl	80063f8 <Error_Handler>
  }

}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20001cf8 	.word	0x20001cf8
 8005db0:	40012800 	.word	0x40012800

08005db4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	; 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dbc:	f107 0318 	add.w	r3, r7, #24
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	605a      	str	r2, [r3, #4]
 8005dc6:	609a      	str	r2, [r3, #8]
 8005dc8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a3c      	ldr	r2, [pc, #240]	; (8005ec0 <HAL_ADC_MspInit+0x10c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d14a      	bne.n	8005e6a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005dd4:	4b3b      	ldr	r3, [pc, #236]	; (8005ec4 <HAL_ADC_MspInit+0x110>)
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	4a3a      	ldr	r2, [pc, #232]	; (8005ec4 <HAL_ADC_MspInit+0x110>)
 8005dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dde:	6193      	str	r3, [r2, #24]
 8005de0:	4b38      	ldr	r3, [pc, #224]	; (8005ec4 <HAL_ADC_MspInit+0x110>)
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dec:	4b35      	ldr	r3, [pc, #212]	; (8005ec4 <HAL_ADC_MspInit+0x110>)
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	4a34      	ldr	r2, [pc, #208]	; (8005ec4 <HAL_ADC_MspInit+0x110>)
 8005df2:	f043 0304 	orr.w	r3, r3, #4
 8005df6:	6193      	str	r3, [r2, #24]
 8005df8:	4b32      	ldr	r3, [pc, #200]	; (8005ec4 <HAL_ADC_MspInit+0x110>)
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005e04:	2302      	movs	r3, #2
 8005e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e0c:	f107 0318 	add.w	r3, r7, #24
 8005e10:	4619      	mov	r1, r3
 8005e12:	482d      	ldr	r0, [pc, #180]	; (8005ec8 <HAL_ADC_MspInit+0x114>)
 8005e14:	f7fb f9bc 	bl	8001190 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005e18:	4b2c      	ldr	r3, [pc, #176]	; (8005ecc <HAL_ADC_MspInit+0x118>)
 8005e1a:	4a2d      	ldr	r2, [pc, #180]	; (8005ed0 <HAL_ADC_MspInit+0x11c>)
 8005e1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e1e:	4b2b      	ldr	r3, [pc, #172]	; (8005ecc <HAL_ADC_MspInit+0x118>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e24:	4b29      	ldr	r3, [pc, #164]	; (8005ecc <HAL_ADC_MspInit+0x118>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005e2a:	4b28      	ldr	r3, [pc, #160]	; (8005ecc <HAL_ADC_MspInit+0x118>)
 8005e2c:	2280      	movs	r2, #128	; 0x80
 8005e2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e30:	4b26      	ldr	r3, [pc, #152]	; (8005ecc <HAL_ADC_MspInit+0x118>)
 8005e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005e38:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <HAL_ADC_MspInit+0x118>)
 8005e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e3e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005e40:	4b22      	ldr	r3, [pc, #136]	; (8005ecc <HAL_ADC_MspInit+0x118>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005e46:	4b21      	ldr	r3, [pc, #132]	; (8005ecc <HAL_ADC_MspInit+0x118>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e4c:	481f      	ldr	r0, [pc, #124]	; (8005ecc <HAL_ADC_MspInit+0x118>)
 8005e4e:	f7fa ffb1 	bl	8000db4 <HAL_DMA_Init>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8005e58:	f000 face 	bl	80063f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1b      	ldr	r2, [pc, #108]	; (8005ecc <HAL_ADC_MspInit+0x118>)
 8005e60:	621a      	str	r2, [r3, #32]
 8005e62:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <HAL_ADC_MspInit+0x118>)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8005e68:	e026      	b.n	8005eb8 <HAL_ADC_MspInit+0x104>
  else if(adcHandle->Instance==ADC2)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a19      	ldr	r2, [pc, #100]	; (8005ed4 <HAL_ADC_MspInit+0x120>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d121      	bne.n	8005eb8 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005e74:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <HAL_ADC_MspInit+0x110>)
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	4a12      	ldr	r2, [pc, #72]	; (8005ec4 <HAL_ADC_MspInit+0x110>)
 8005e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e7e:	6193      	str	r3, [r2, #24]
 8005e80:	4b10      	ldr	r3, [pc, #64]	; (8005ec4 <HAL_ADC_MspInit+0x110>)
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <HAL_ADC_MspInit+0x110>)
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	4a0c      	ldr	r2, [pc, #48]	; (8005ec4 <HAL_ADC_MspInit+0x110>)
 8005e92:	f043 0304 	orr.w	r3, r3, #4
 8005e96:	6193      	str	r3, [r2, #24]
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <HAL_ADC_MspInit+0x110>)
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eac:	f107 0318 	add.w	r3, r7, #24
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4805      	ldr	r0, [pc, #20]	; (8005ec8 <HAL_ADC_MspInit+0x114>)
 8005eb4:	f7fb f96c 	bl	8001190 <HAL_GPIO_Init>
}
 8005eb8:	bf00      	nop
 8005eba:	3728      	adds	r7, #40	; 0x28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40012400 	.word	0x40012400
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	40010800 	.word	0x40010800
 8005ecc:	20001d58 	.word	0x20001d58
 8005ed0:	40020008 	.word	0x40020008
 8005ed4:	40012800 	.word	0x40012800

08005ed8 <HAL_ADC_ConvCpltCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1) {
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a05      	ldr	r2, [pc, #20]	; (8005efc <HAL_ADC_ConvCpltCallback+0x24>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d102      	bne.n	8005ef0 <HAL_ADC_ConvCpltCallback+0x18>
    adcReady = 1;
 8005eea:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <HAL_ADC_ConvCpltCallback+0x28>)
 8005eec:	2201      	movs	r2, #1
 8005eee:	701a      	strb	r2, [r3, #0]
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bc80      	pop	{r7}
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40012400 	.word	0x40012400
 8005f00:	20001da4 	.word	0x20001da4

08005f04 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <MX_DMA_Init+0x38>)
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	4a0b      	ldr	r2, [pc, #44]	; (8005f3c <MX_DMA_Init+0x38>)
 8005f10:	f043 0301 	orr.w	r3, r3, #1
 8005f14:	6153      	str	r3, [r2, #20]
 8005f16:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <MX_DMA_Init+0x38>)
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	607b      	str	r3, [r7, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8005f22:	2200      	movs	r2, #0
 8005f24:	2105      	movs	r1, #5
 8005f26:	200b      	movs	r0, #11
 8005f28:	f7fa ff19 	bl	8000d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005f2c:	200b      	movs	r0, #11
 8005f2e:	f7fa ff32 	bl	8000d96 <HAL_NVIC_EnableIRQ>

}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40021000 	.word	0x40021000

08005f40 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0

}
 8005f44:	bf00      	nop
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr

08005f4c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
return 0;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr
	...

08005f5c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qMotor */
  qMotorHandle = osMessageQueueNew (64, sizeof(int16_t), &qMotor_attributes);
 8005f60:	4a18      	ldr	r2, [pc, #96]	; (8005fc4 <MX_FREERTOS_Init+0x68>)
 8005f62:	2102      	movs	r1, #2
 8005f64:	2040      	movs	r0, #64	; 0x40
 8005f66:	f7fd fa1b 	bl	80033a0 <osMessageQueueNew>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4a16      	ldr	r2, [pc, #88]	; (8005fc8 <MX_FREERTOS_Init+0x6c>)
 8005f6e:	6013      	str	r3, [r2, #0]

  /* creation of qSteer */
  qSteerHandle = osMessageQueueNew (64, sizeof(int16_t), &qSteer_attributes);
 8005f70:	4a16      	ldr	r2, [pc, #88]	; (8005fcc <MX_FREERTOS_Init+0x70>)
 8005f72:	2102      	movs	r1, #2
 8005f74:	2040      	movs	r0, #64	; 0x40
 8005f76:	f7fd fa13 	bl	80033a0 <osMessageQueueNew>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	4a14      	ldr	r2, [pc, #80]	; (8005fd0 <MX_FREERTOS_Init+0x74>)
 8005f7e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005f80:	4a14      	ldr	r2, [pc, #80]	; (8005fd4 <MX_FREERTOS_Init+0x78>)
 8005f82:	2100      	movs	r1, #0
 8005f84:	4814      	ldr	r0, [pc, #80]	; (8005fd8 <MX_FREERTOS_Init+0x7c>)
 8005f86:	f7fd f933 	bl	80031f0 <osThreadNew>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <MX_FREERTOS_Init+0x80>)
 8005f8e:	6013      	str	r3, [r2, #0]

  /* creation of joystickTask */
  joystickTaskHandle = osThreadNew(StartJoistickTask, NULL, &joystickTask_attributes);
 8005f90:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <MX_FREERTOS_Init+0x84>)
 8005f92:	2100      	movs	r1, #0
 8005f94:	4813      	ldr	r0, [pc, #76]	; (8005fe4 <MX_FREERTOS_Init+0x88>)
 8005f96:	f7fd f92b 	bl	80031f0 <osThreadNew>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <MX_FREERTOS_Init+0x8c>)
 8005f9e:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8005fa0:	4a12      	ldr	r2, [pc, #72]	; (8005fec <MX_FREERTOS_Init+0x90>)
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4812      	ldr	r0, [pc, #72]	; (8005ff0 <MX_FREERTOS_Init+0x94>)
 8005fa6:	f7fd f923 	bl	80031f0 <osThreadNew>
 8005faa:	4603      	mov	r3, r0
 8005fac:	4a11      	ldr	r2, [pc, #68]	; (8005ff4 <MX_FREERTOS_Init+0x98>)
 8005fae:	6013      	str	r3, [r2, #0]

  /* creation of steerTask */
  steerTaskHandle = osThreadNew(StartSteerTask, NULL, &steerTask_attributes);
 8005fb0:	4a11      	ldr	r2, [pc, #68]	; (8005ff8 <MX_FREERTOS_Init+0x9c>)
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	4811      	ldr	r0, [pc, #68]	; (8005ffc <MX_FREERTOS_Init+0xa0>)
 8005fb6:	f7fd f91b 	bl	80031f0 <osThreadNew>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	4a10      	ldr	r2, [pc, #64]	; (8006000 <MX_FREERTOS_Init+0xa4>)
 8005fbe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8005fc0:	bf00      	nop
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	0800739c 	.word	0x0800739c
 8005fc8:	20001db4 	.word	0x20001db4
 8005fcc:	080073b4 	.word	0x080073b4
 8005fd0:	20001da8 	.word	0x20001da8
 8005fd4:	0800730c 	.word	0x0800730c
 8005fd8:	08006005 	.word	0x08006005
 8005fdc:	20001d9c 	.word	0x20001d9c
 8005fe0:	08007330 	.word	0x08007330
 8005fe4:	08006049 	.word	0x08006049
 8005fe8:	20001da0 	.word	0x20001da0
 8005fec:	08007354 	.word	0x08007354
 8005ff0:	08006189 	.word	0x08006189
 8005ff4:	20001db0 	.word	0x20001db0
 8005ff8:	08007378 	.word	0x08007378
 8005ffc:	08006199 	.word	0x08006199
 8006000:	20001dac 	.word	0x20001dac

08006004 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  xprintf(&huart1, "Starting the blinker..\n");
 800600c:	490c      	ldr	r1, [pc, #48]	; (8006040 <StartDefaultTask+0x3c>)
 800600e:	480d      	ldr	r0, [pc, #52]	; (8006044 <StartDefaultTask+0x40>)
 8006010:	f000 fc2c 	bl	800686c <xprintf>
  /* Infinite loop */
  for(;;)
  {
    ledOn();
 8006014:	f000 f952 	bl	80062bc <ledOn>
    osDelay(LED_BLINK_PERIOD_MS / portTICK_PERIOD_MS);
 8006018:	2064      	movs	r0, #100	; 0x64
 800601a:	f7fd f993 	bl	8003344 <osDelay>

    ledToggle();
 800601e:	f000 f959 	bl	80062d4 <ledToggle>
    osDelay(LED_BLINK_PERIOD_MS / portTICK_PERIOD_MS);
 8006022:	2064      	movs	r0, #100	; 0x64
 8006024:	f7fd f98e 	bl	8003344 <osDelay>

    ledToggle();
 8006028:	f000 f954 	bl	80062d4 <ledToggle>
    osDelay(LED_BLINK_PERIOD_MS / portTICK_PERIOD_MS);
 800602c:	2064      	movs	r0, #100	; 0x64
 800602e:	f7fd f989 	bl	8003344 <osDelay>

    ledToggle();
 8006032:	f000 f94f 	bl	80062d4 <ledToggle>
    osDelay((1000 - 3 * LED_BLINK_PERIOD_MS) / portTICK_PERIOD_MS);
 8006036:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800603a:	f7fd f983 	bl	8003344 <osDelay>
    ledOn();
 800603e:	e7e9      	b.n	8006014 <StartDefaultTask+0x10>
 8006040:	080072dc 	.word	0x080072dc
 8006044:	20001e48 	.word	0x20001e48

08006048 <StartJoistickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoistickTask */
void StartJoistickTask(void *argument)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b096      	sub	sp, #88	; 0x58
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoistickTask */
  volatile uint16_t adc[2 * JS_AVG_FACTOR] = { 0, };
 8006050:	f107 0308 	add.w	r3, r7, #8
 8006054:	2240      	movs	r2, #64	; 0x40
 8006056:	2100      	movs	r1, #0
 8006058:	4618      	mov	r0, r3
 800605a:	f000 fc93 	bl	8006984 <memset>
  uint16_t posSteer = 0, posMotor = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006064:	2300      	movs	r3, #0
 8006066:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

  adcReady = 0;
 800606a:	4b41      	ldr	r3, [pc, #260]	; (8006170 <StartJoistickTask+0x128>)
 800606c:	2200      	movs	r2, #0
 800606e:	701a      	strb	r2, [r3, #0]

  HAL_ADCEx_Calibration_Start(&hadc1);
 8006070:	4840      	ldr	r0, [pc, #256]	; (8006174 <StartJoistickTask+0x12c>)
 8006072:	f7fa fc29 	bl	80008c8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8006076:	4840      	ldr	r0, [pc, #256]	; (8006178 <StartJoistickTask+0x130>)
 8006078:	f7fa fc26 	bl	80008c8 <HAL_ADCEx_Calibration_Start>

  osDelay(50 / portTICK_PERIOD_MS);
 800607c:	2032      	movs	r0, #50	; 0x32
 800607e:	f7fd f961 	bl	8003344 <osDelay>

  HAL_ADC_Start(&hadc2);
 8006082:	483d      	ldr	r0, [pc, #244]	; (8006178 <StartJoistickTask+0x130>)
 8006084:	f7fa f976 	bl	8000374 <HAL_ADC_Start>
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)&adc, JS_AVG_FACTOR);
 8006088:	f107 0308 	add.w	r3, r7, #8
 800608c:	2210      	movs	r2, #16
 800608e:	4619      	mov	r1, r3
 8006090:	4838      	ldr	r0, [pc, #224]	; (8006174 <StartJoistickTask+0x12c>)
 8006092:	f7fa fcb5 	bl	8000a00 <HAL_ADCEx_MultiModeStart_DMA>

  /* Infinite loop */
  for(;;)
  {
    uint32_t adcSteer = 0, adcMotor = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	653b      	str	r3, [r7, #80]	; 0x50
 800609a:	2300      	movs	r3, #0
 800609c:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (adcReady) {
 800609e:	4b34      	ldr	r3, [pc, #208]	; (8006170 <StartJoistickTask+0x128>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d060      	beq.n	8006168 <StartJoistickTask+0x120>
      adcReady = 0;
 80060a6:	4b32      	ldr	r3, [pc, #200]	; (8006170 <StartJoistickTask+0x128>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	701a      	strb	r2, [r3, #0]

      for (size_t i = 0; i < 2 * JS_AVG_FACTOR; ++i) {
 80060ac:	2300      	movs	r3, #0
 80060ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b0:	e020      	b.n	80060f4 <StartJoistickTask+0xac>
        if (i % 2)
 80060b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00c      	beq.n	80060d6 <StartJoistickTask+0x8e>
          adcSteer += adc[i];
 80060bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80060c4:	4413      	add	r3, r2
 80060c6:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d0:	4413      	add	r3, r2
 80060d2:	653b      	str	r3, [r7, #80]	; 0x50
 80060d4:	e00b      	b.n	80060ee <StartJoistickTask+0xa6>
        else
          adcMotor += adc[i];
 80060d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80060de:	4413      	add	r3, r2
 80060e0:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ea:	4413      	add	r3, r2
 80060ec:	64fb      	str	r3, [r7, #76]	; 0x4c
      for (size_t i = 0; i < 2 * JS_AVG_FACTOR; ++i) {
 80060ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f0:	3301      	adds	r3, #1
 80060f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80060f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f6:	2b1f      	cmp	r3, #31
 80060f8:	d9db      	bls.n	80060b2 <StartJoistickTask+0x6a>
      }

      adcSteer = ADC_MAX_VALUE - (adcSteer / JS_AVG_FACTOR);
 80060fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8006102:	653b      	str	r3, [r7, #80]	; 0x50
      adcMotor = ADC_MAX_VALUE - (adcMotor / JS_AVG_FACTOR);
 8006104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006106:	091b      	lsrs	r3, r3, #4
 8006108:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800610c:	64fb      	str	r3, [r7, #76]	; 0x4c

      if (abs(posSteer - adcSteer) > JS_TOLERANCE) {
 800610e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8006112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	bfb8      	it	lt
 800611a:	425b      	neglt	r3, r3
 800611c:	2b19      	cmp	r3, #25
 800611e:	dd09      	ble.n	8006134 <StartJoistickTask+0xec>
        posSteer = adcSteer;
 8006120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006122:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        xprintf(&huart1, "Steer: %4d\n", posSteer);
 8006126:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800612a:	461a      	mov	r2, r3
 800612c:	4913      	ldr	r1, [pc, #76]	; (800617c <StartJoistickTask+0x134>)
 800612e:	4814      	ldr	r0, [pc, #80]	; (8006180 <StartJoistickTask+0x138>)
 8006130:	f000 fb9c 	bl	800686c <xprintf>
      }
      if (abs(posMotor - adcMotor) > JS_TOLERANCE) {
 8006134:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	bfb8      	it	lt
 8006140:	425b      	neglt	r3, r3
 8006142:	2b19      	cmp	r3, #25
 8006144:	dd09      	ble.n	800615a <StartJoistickTask+0x112>
        posMotor = adcMotor;
 8006146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006148:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        xprintf(&huart1, "Motor: %4d\n", posMotor);
 800614c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006150:	461a      	mov	r2, r3
 8006152:	490c      	ldr	r1, [pc, #48]	; (8006184 <StartJoistickTask+0x13c>)
 8006154:	480a      	ldr	r0, [pc, #40]	; (8006180 <StartJoistickTask+0x138>)
 8006156:	f000 fb89 	bl	800686c <xprintf>



      //xprintf(&huart1, "Steer: %4d Motor: %4d\n", adcSteer, adcMotor);

      HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)&adc, JS_AVG_FACTOR);
 800615a:	f107 0308 	add.w	r3, r7, #8
 800615e:	2210      	movs	r2, #16
 8006160:	4619      	mov	r1, r3
 8006162:	4804      	ldr	r0, [pc, #16]	; (8006174 <StartJoistickTask+0x12c>)
 8006164:	f7fa fc4c 	bl	8000a00 <HAL_ADCEx_MultiModeStart_DMA>
    }

    osDelay(50 / portTICK_PERIOD_MS);
 8006168:	2032      	movs	r0, #50	; 0x32
 800616a:	f7fd f8eb 	bl	8003344 <osDelay>
  {
 800616e:	e792      	b.n	8006096 <StartJoistickTask+0x4e>
 8006170:	20001da4 	.word	0x20001da4
 8006174:	20001d28 	.word	0x20001d28
 8006178:	20001cf8 	.word	0x20001cf8
 800617c:	080072f4 	.word	0x080072f4
 8006180:	20001e48 	.word	0x20001e48
 8006184:	08007300 	.word	0x08007300

08006188 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006190:	2001      	movs	r0, #1
 8006192:	f7fd f8d7 	bl	8003344 <osDelay>
 8006196:	e7fb      	b.n	8006190 <StartMotorTask+0x8>

08006198 <StartSteerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSteerTask */
void StartSteerTask(void *argument)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSteerTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80061a0:	2001      	movs	r0, #1
 80061a2:	f7fd f8cf 	bl	8003344 <osDelay>
 80061a6:	e7fb      	b.n	80061a0 <StartSteerTask+0x8>

080061a8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061ae:	f107 0310 	add.w	r3, r7, #16
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	605a      	str	r2, [r3, #4]
 80061b8:	609a      	str	r2, [r3, #8]
 80061ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061bc:	4b3a      	ldr	r3, [pc, #232]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	4a39      	ldr	r2, [pc, #228]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061c2:	f043 0310 	orr.w	r3, r3, #16
 80061c6:	6193      	str	r3, [r2, #24]
 80061c8:	4b37      	ldr	r3, [pc, #220]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80061d4:	4b34      	ldr	r3, [pc, #208]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	4a33      	ldr	r2, [pc, #204]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061da:	f043 0320 	orr.w	r3, r3, #32
 80061de:	6193      	str	r3, [r2, #24]
 80061e0:	4b31      	ldr	r3, [pc, #196]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ec:	4b2e      	ldr	r3, [pc, #184]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	4a2d      	ldr	r2, [pc, #180]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061f2:	f043 0304 	orr.w	r3, r3, #4
 80061f6:	6193      	str	r3, [r2, #24]
 80061f8:	4b2b      	ldr	r3, [pc, #172]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	607b      	str	r3, [r7, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006204:	4b28      	ldr	r3, [pc, #160]	; (80062a8 <MX_GPIO_Init+0x100>)
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	4a27      	ldr	r2, [pc, #156]	; (80062a8 <MX_GPIO_Init+0x100>)
 800620a:	f043 0308 	orr.w	r3, r3, #8
 800620e:	6193      	str	r3, [r2, #24]
 8006210:	4b25      	ldr	r3, [pc, #148]	; (80062a8 <MX_GPIO_Init+0x100>)
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	603b      	str	r3, [r7, #0]
 800621a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800621c:	2201      	movs	r2, #1
 800621e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006222:	4822      	ldr	r0, [pc, #136]	; (80062ac <MX_GPIO_Init+0x104>)
 8006224:	f7fb f938 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8006228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800622c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800622e:	2311      	movs	r3, #17
 8006230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006232:	2300      	movs	r3, #0
 8006234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006236:	2302      	movs	r3, #2
 8006238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800623a:	f107 0310 	add.w	r3, r7, #16
 800623e:	4619      	mov	r1, r3
 8006240:	481a      	ldr	r0, [pc, #104]	; (80062ac <MX_GPIO_Init+0x104>)
 8006242:	f7fa ffa5 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006246:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800624a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800624c:	2303      	movs	r3, #3
 800624e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006250:	f107 0310 	add.w	r3, r7, #16
 8006254:	4619      	mov	r1, r3
 8006256:	4815      	ldr	r0, [pc, #84]	; (80062ac <MX_GPIO_Init+0x104>)
 8006258:	f7fa ff9a 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA5 
                           PA6 PA7 PA8 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800625c:	f649 13f9 	movw	r3, #39417	; 0x99f9
 8006260:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006262:	2303      	movs	r3, #3
 8006264:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006266:	f107 0310 	add.w	r3, r7, #16
 800626a:	4619      	mov	r1, r3
 800626c:	4810      	ldr	r0, [pc, #64]	; (80062b0 <MX_GPIO_Init+0x108>)
 800626e:	f7fa ff8f 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8006272:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8006276:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006278:	2303      	movs	r3, #3
 800627a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800627c:	f107 0310 	add.w	r3, r7, #16
 8006280:	4619      	mov	r1, r3
 8006282:	480c      	ldr	r0, [pc, #48]	; (80062b4 <MX_GPIO_Init+0x10c>)
 8006284:	f7fa ff84 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin;
 8006288:	2380      	movs	r3, #128	; 0x80
 800628a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800628c:	4b0a      	ldr	r3, [pc, #40]	; (80062b8 <MX_GPIO_Init+0x110>)
 800628e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006290:	2300      	movs	r3, #0
 8006292:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(JOY_BTN_GPIO_Port, &GPIO_InitStruct);
 8006294:	f107 0310 	add.w	r3, r7, #16
 8006298:	4619      	mov	r1, r3
 800629a:	4806      	ldr	r0, [pc, #24]	; (80062b4 <MX_GPIO_Init+0x10c>)
 800629c:	f7fa ff78 	bl	8001190 <HAL_GPIO_Init>

}
 80062a0:	bf00      	nop
 80062a2:	3720      	adds	r7, #32
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	40021000 	.word	0x40021000
 80062ac:	40011000 	.word	0x40011000
 80062b0:	40010800 	.word	0x40010800
 80062b4:	40010c00 	.word	0x40010c00
 80062b8:	10210000 	.word	0x10210000

080062bc <ledOn>:

/* USER CODE BEGIN 2 */
void ledOn(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80062c0:	2200      	movs	r2, #0
 80062c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062c6:	4802      	ldr	r0, [pc, #8]	; (80062d0 <ledOn+0x14>)
 80062c8:	f7fb f8e6 	bl	8001498 <HAL_GPIO_WritePin>
}
 80062cc:	bf00      	nop
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40011000 	.word	0x40011000

080062d4 <ledToggle>:
{
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}

void ledToggle(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80062d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062dc:	4802      	ldr	r0, [pc, #8]	; (80062e8 <ledToggle+0x14>)
 80062de:	f7fb f8f3 	bl	80014c8 <HAL_GPIO_TogglePin>
}
 80062e2:	bf00      	nop
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	40011000 	.word	0x40011000

080062ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80062f0:	f7f9 ff36 	bl	8000160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80062f4:	f000 f813 	bl	800631e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80062f8:	f7ff ff56 	bl	80061a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80062fc:	f7ff fe02 	bl	8005f04 <MX_DMA_Init>
  MX_ADC1_Init();
 8006300:	f7ff fccc 	bl	8005c9c <MX_ADC1_Init>
  MX_TIM4_Init();
 8006304:	f000 f96a 	bl	80065dc <MX_TIM4_Init>
  MX_ADC2_Init();
 8006308:	f7ff fd16 	bl	8005d38 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800630c:	f000 fa38 	bl	8006780 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8006310:	f7fc ff08 	bl	8003124 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8006314:	f7ff fe22 	bl	8005f5c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8006318:	f7fc ff36 	bl	8003188 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800631c:	e7fe      	b.n	800631c <main+0x30>

0800631e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b094      	sub	sp, #80	; 0x50
 8006322:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006328:	2228      	movs	r2, #40	; 0x28
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fb29 	bl	8006984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006332:	f107 0314 	add.w	r3, r7, #20
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	605a      	str	r2, [r3, #4]
 800633c:	609a      	str	r2, [r3, #8]
 800633e:	60da      	str	r2, [r3, #12]
 8006340:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006342:	1d3b      	adds	r3, r7, #4
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	605a      	str	r2, [r3, #4]
 800634a:	609a      	str	r2, [r3, #8]
 800634c:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800634e:	2301      	movs	r3, #1
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006356:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006358:	2300      	movs	r3, #0
 800635a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800635c:	2301      	movs	r3, #1
 800635e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006360:	2302      	movs	r3, #2
 8006362:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006368:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800636a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800636e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006374:	4618      	mov	r0, r3
 8006376:	f7fb f8c1 	bl	80014fc <HAL_RCC_OscConfig>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8006380:	f000 f83a 	bl	80063f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006384:	230f      	movs	r3, #15
 8006386:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006388:	2302      	movs	r3, #2
 800638a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800638c:	2300      	movs	r3, #0
 800638e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006394:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006396:	2300      	movs	r3, #0
 8006398:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800639a:	f107 0314 	add.w	r3, r7, #20
 800639e:	2102      	movs	r1, #2
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fb fb2b 	bl	80019fc <HAL_RCC_ClockConfig>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80063ac:	f000 f824 	bl	80063f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80063b0:	2302      	movs	r3, #2
 80063b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80063b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80063ba:	1d3b      	adds	r3, r7, #4
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fb fce7 	bl	8001d90 <HAL_RCCEx_PeriphCLKConfig>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <SystemClock_Config+0xae>
  {
    Error_Handler();
 80063c8:	f000 f816 	bl	80063f8 <Error_Handler>
  }
}
 80063cc:	bf00      	nop
 80063ce:	3750      	adds	r7, #80	; 0x50
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a04      	ldr	r2, [pc, #16]	; (80063f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d101      	bne.n	80063ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80063e6:	f7f9 fed1 	bl	800018c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80063ea:	bf00      	nop
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	40012c00 	.word	0x40012c00

080063f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80063fc:	bf00      	nop
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr

08006404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800640a:	4b18      	ldr	r3, [pc, #96]	; (800646c <HAL_MspInit+0x68>)
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	4a17      	ldr	r2, [pc, #92]	; (800646c <HAL_MspInit+0x68>)
 8006410:	f043 0301 	orr.w	r3, r3, #1
 8006414:	6193      	str	r3, [r2, #24]
 8006416:	4b15      	ldr	r3, [pc, #84]	; (800646c <HAL_MspInit+0x68>)
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	60bb      	str	r3, [r7, #8]
 8006420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006422:	4b12      	ldr	r3, [pc, #72]	; (800646c <HAL_MspInit+0x68>)
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	4a11      	ldr	r2, [pc, #68]	; (800646c <HAL_MspInit+0x68>)
 8006428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800642c:	61d3      	str	r3, [r2, #28]
 800642e:	4b0f      	ldr	r3, [pc, #60]	; (800646c <HAL_MspInit+0x68>)
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006436:	607b      	str	r3, [r7, #4]
 8006438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800643a:	2200      	movs	r2, #0
 800643c:	210f      	movs	r1, #15
 800643e:	f06f 0001 	mvn.w	r0, #1
 8006442:	f7fa fc8c 	bl	8000d5e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006446:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <HAL_MspInit+0x6c>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	4a04      	ldr	r2, [pc, #16]	; (8006470 <HAL_MspInit+0x6c>)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	40021000 	.word	0x40021000
 8006470:	40010000 	.word	0x40010000

08006474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08c      	sub	sp, #48	; 0x30
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8006484:	2200      	movs	r2, #0
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	2019      	movs	r0, #25
 800648a:	f7fa fc68 	bl	8000d5e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 800648e:	2019      	movs	r0, #25
 8006490:	f7fa fc81 	bl	8000d96 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006494:	4b1e      	ldr	r3, [pc, #120]	; (8006510 <HAL_InitTick+0x9c>)
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	4a1d      	ldr	r2, [pc, #116]	; (8006510 <HAL_InitTick+0x9c>)
 800649a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800649e:	6193      	str	r3, [r2, #24]
 80064a0:	4b1b      	ldr	r3, [pc, #108]	; (8006510 <HAL_InitTick+0x9c>)
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80064ac:	f107 0210 	add.w	r2, r7, #16
 80064b0:	f107 0314 	add.w	r3, r7, #20
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fb fc1c 	bl	8001cf4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80064bc:	f7fb fc06 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 80064c0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	4a13      	ldr	r2, [pc, #76]	; (8006514 <HAL_InitTick+0xa0>)
 80064c6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ca:	0c9b      	lsrs	r3, r3, #18
 80064cc:	3b01      	subs	r3, #1
 80064ce:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80064d0:	4b11      	ldr	r3, [pc, #68]	; (8006518 <HAL_InitTick+0xa4>)
 80064d2:	4a12      	ldr	r2, [pc, #72]	; (800651c <HAL_InitTick+0xa8>)
 80064d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80064d6:	4b10      	ldr	r3, [pc, #64]	; (8006518 <HAL_InitTick+0xa4>)
 80064d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80064dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80064de:	4a0e      	ldr	r2, [pc, #56]	; (8006518 <HAL_InitTick+0xa4>)
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80064e4:	4b0c      	ldr	r3, [pc, #48]	; (8006518 <HAL_InitTick+0xa4>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064ea:	4b0b      	ldr	r3, [pc, #44]	; (8006518 <HAL_InitTick+0xa4>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80064f0:	4809      	ldr	r0, [pc, #36]	; (8006518 <HAL_InitTick+0xa4>)
 80064f2:	f7fb fdc7 	bl	8002084 <HAL_TIM_Base_Init>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80064fc:	4806      	ldr	r0, [pc, #24]	; (8006518 <HAL_InitTick+0xa4>)
 80064fe:	f7fb fe11 	bl	8002124 <HAL_TIM_Base_Start_IT>
 8006502:	4603      	mov	r3, r0
 8006504:	e000      	b.n	8006508 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
}
 8006508:	4618      	mov	r0, r3
 800650a:	3730      	adds	r7, #48	; 0x30
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40021000 	.word	0x40021000
 8006514:	431bde83 	.word	0x431bde83
 8006518:	20001db8 	.word	0x20001db8
 800651c:	40012c00 	.word	0x40012c00

08006520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006524:	bf00      	nop
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr

0800652c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006530:	e7fe      	b.n	8006530 <HardFault_Handler+0x4>

08006532 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006532:	b480      	push	{r7}
 8006534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006536:	e7fe      	b.n	8006536 <MemManage_Handler+0x4>

08006538 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800653c:	e7fe      	b.n	800653c <BusFault_Handler+0x4>

0800653e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800653e:	b480      	push	{r7}
 8006540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006542:	e7fe      	b.n	8006542 <UsageFault_Handler+0x4>

08006544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006548:	bf00      	nop
 800654a:	46bd      	mov	sp, r7
 800654c:	bc80      	pop	{r7}
 800654e:	4770      	bx	lr

08006550 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006554:	4802      	ldr	r0, [pc, #8]	; (8006560 <DMA1_Channel1_IRQHandler+0x10>)
 8006556:	f7fa fce7 	bl	8000f28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800655a:	bf00      	nop
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20001d58 	.word	0x20001d58

08006564 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006568:	4802      	ldr	r0, [pc, #8]	; (8006574 <TIM1_UP_IRQHandler+0x10>)
 800656a:	f7fb fe85 	bl	8002278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20001db8 	.word	0x20001db8

08006578 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006580:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <_sbrk+0x50>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <_sbrk+0x16>
		heap_end = &end;
 8006588:	4b0f      	ldr	r3, [pc, #60]	; (80065c8 <_sbrk+0x50>)
 800658a:	4a10      	ldr	r2, [pc, #64]	; (80065cc <_sbrk+0x54>)
 800658c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800658e:	4b0e      	ldr	r3, [pc, #56]	; (80065c8 <_sbrk+0x50>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006594:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <_sbrk+0x50>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4413      	add	r3, r2
 800659c:	466a      	mov	r2, sp
 800659e:	4293      	cmp	r3, r2
 80065a0:	d907      	bls.n	80065b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80065a2:	f000 f9b7 	bl	8006914 <__errno>
 80065a6:	4603      	mov	r3, r0
 80065a8:	220c      	movs	r2, #12
 80065aa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80065ac:	f04f 33ff 	mov.w	r3, #4294967295
 80065b0:	e006      	b.n	80065c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80065b2:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <_sbrk+0x50>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4413      	add	r3, r2
 80065ba:	4a03      	ldr	r2, [pc, #12]	; (80065c8 <_sbrk+0x50>)
 80065bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80065be:	68fb      	ldr	r3, [r7, #12]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20001ca8 	.word	0x20001ca8
 80065cc:	20002298 	.word	0x20002298

080065d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bc80      	pop	{r7}
 80065da:	4770      	bx	lr

080065dc <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08e      	sub	sp, #56	; 0x38
 80065e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80065e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	605a      	str	r2, [r3, #4]
 80065ec:	609a      	str	r2, [r3, #8]
 80065ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065f0:	f107 0320 	add.w	r3, r7, #32
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80065fa:	1d3b      	adds	r3, r7, #4
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	605a      	str	r2, [r3, #4]
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	611a      	str	r2, [r3, #16]
 8006608:	615a      	str	r2, [r3, #20]
 800660a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800660c:	4b31      	ldr	r3, [pc, #196]	; (80066d4 <MX_TIM4_Init+0xf8>)
 800660e:	4a32      	ldr	r2, [pc, #200]	; (80066d8 <MX_TIM4_Init+0xfc>)
 8006610:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006612:	4b30      	ldr	r3, [pc, #192]	; (80066d4 <MX_TIM4_Init+0xf8>)
 8006614:	2200      	movs	r2, #0
 8006616:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006618:	4b2e      	ldr	r3, [pc, #184]	; (80066d4 <MX_TIM4_Init+0xf8>)
 800661a:	2200      	movs	r2, #0
 800661c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800661e:	4b2d      	ldr	r3, [pc, #180]	; (80066d4 <MX_TIM4_Init+0xf8>)
 8006620:	2200      	movs	r2, #0
 8006622:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006624:	4b2b      	ldr	r3, [pc, #172]	; (80066d4 <MX_TIM4_Init+0xf8>)
 8006626:	2200      	movs	r2, #0
 8006628:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800662a:	4b2a      	ldr	r3, [pc, #168]	; (80066d4 <MX_TIM4_Init+0xf8>)
 800662c:	2200      	movs	r2, #0
 800662e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006630:	4828      	ldr	r0, [pc, #160]	; (80066d4 <MX_TIM4_Init+0xf8>)
 8006632:	f7fb fd27 	bl	8002084 <HAL_TIM_Base_Init>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800663c:	f7ff fedc 	bl	80063f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006644:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800664a:	4619      	mov	r1, r3
 800664c:	4821      	ldr	r0, [pc, #132]	; (80066d4 <MX_TIM4_Init+0xf8>)
 800664e:	f7fb ffd9 	bl	8002604 <HAL_TIM_ConfigClockSource>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8006658:	f7ff fece 	bl	80063f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800665c:	481d      	ldr	r0, [pc, #116]	; (80066d4 <MX_TIM4_Init+0xf8>)
 800665e:	f7fb fdb3 	bl	80021c8 <HAL_TIM_PWM_Init>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8006668:	f7ff fec6 	bl	80063f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800666c:	2300      	movs	r3, #0
 800666e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006670:	2300      	movs	r3, #0
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006674:	f107 0320 	add.w	r3, r7, #32
 8006678:	4619      	mov	r1, r3
 800667a:	4816      	ldr	r0, [pc, #88]	; (80066d4 <MX_TIM4_Init+0xf8>)
 800667c:	f7fc fb2a 	bl	8002cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8006686:	f7ff feb7 	bl	80063f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800668a:	2360      	movs	r3, #96	; 0x60
 800668c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006696:	2300      	movs	r3, #0
 8006698:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800669a:	1d3b      	adds	r3, r7, #4
 800669c:	2208      	movs	r2, #8
 800669e:	4619      	mov	r1, r3
 80066a0:	480c      	ldr	r0, [pc, #48]	; (80066d4 <MX_TIM4_Init+0xf8>)
 80066a2:	f7fb fef1 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80066ac:	f7ff fea4 	bl	80063f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80066b0:	1d3b      	adds	r3, r7, #4
 80066b2:	220c      	movs	r2, #12
 80066b4:	4619      	mov	r1, r3
 80066b6:	4807      	ldr	r0, [pc, #28]	; (80066d4 <MX_TIM4_Init+0xf8>)
 80066b8:	f7fb fee6 	bl	8002488 <HAL_TIM_PWM_ConfigChannel>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80066c2:	f7ff fe99 	bl	80063f8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80066c6:	4803      	ldr	r0, [pc, #12]	; (80066d4 <MX_TIM4_Init+0xf8>)
 80066c8:	f000 f826 	bl	8006718 <HAL_TIM_MspPostInit>

}
 80066cc:	bf00      	nop
 80066ce:	3738      	adds	r7, #56	; 0x38
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20001e00 	.word	0x20001e00
 80066d8:	40000800 	.word	0x40000800

080066dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a09      	ldr	r2, [pc, #36]	; (8006710 <HAL_TIM_Base_MspInit+0x34>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d10b      	bne.n	8006706 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80066ee:	4b09      	ldr	r3, [pc, #36]	; (8006714 <HAL_TIM_Base_MspInit+0x38>)
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	4a08      	ldr	r2, [pc, #32]	; (8006714 <HAL_TIM_Base_MspInit+0x38>)
 80066f4:	f043 0304 	orr.w	r3, r3, #4
 80066f8:	61d3      	str	r3, [r2, #28]
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <HAL_TIM_Base_MspInit+0x38>)
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr
 8006710:	40000800 	.word	0x40000800
 8006714:	40021000 	.word	0x40021000

08006718 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006720:	f107 0310 	add.w	r3, r7, #16
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	605a      	str	r2, [r3, #4]
 800672a:	609a      	str	r2, [r3, #8]
 800672c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a10      	ldr	r2, [pc, #64]	; (8006774 <HAL_TIM_MspPostInit+0x5c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d118      	bne.n	800676a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006738:	4b0f      	ldr	r3, [pc, #60]	; (8006778 <HAL_TIM_MspPostInit+0x60>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	4a0e      	ldr	r2, [pc, #56]	; (8006778 <HAL_TIM_MspPostInit+0x60>)
 800673e:	f043 0308 	orr.w	r3, r3, #8
 8006742:	6193      	str	r3, [r2, #24]
 8006744:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <HAL_TIM_MspPostInit+0x60>)
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 8006750:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006754:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006756:	2302      	movs	r3, #2
 8006758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800675a:	2302      	movs	r3, #2
 800675c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800675e:	f107 0310 	add.w	r3, r7, #16
 8006762:	4619      	mov	r1, r3
 8006764:	4805      	ldr	r0, [pc, #20]	; (800677c <HAL_TIM_MspPostInit+0x64>)
 8006766:	f7fa fd13 	bl	8001190 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800676a:	bf00      	nop
 800676c:	3720      	adds	r7, #32
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40000800 	.word	0x40000800
 8006778:	40021000 	.word	0x40021000
 800677c:	40010c00 	.word	0x40010c00

08006780 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006784:	4b11      	ldr	r3, [pc, #68]	; (80067cc <MX_USART1_UART_Init+0x4c>)
 8006786:	4a12      	ldr	r2, [pc, #72]	; (80067d0 <MX_USART1_UART_Init+0x50>)
 8006788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800678a:	4b10      	ldr	r3, [pc, #64]	; (80067cc <MX_USART1_UART_Init+0x4c>)
 800678c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006792:	4b0e      	ldr	r3, [pc, #56]	; (80067cc <MX_USART1_UART_Init+0x4c>)
 8006794:	2200      	movs	r2, #0
 8006796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006798:	4b0c      	ldr	r3, [pc, #48]	; (80067cc <MX_USART1_UART_Init+0x4c>)
 800679a:	2200      	movs	r2, #0
 800679c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800679e:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <MX_USART1_UART_Init+0x4c>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80067a4:	4b09      	ldr	r3, [pc, #36]	; (80067cc <MX_USART1_UART_Init+0x4c>)
 80067a6:	220c      	movs	r2, #12
 80067a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067aa:	4b08      	ldr	r3, [pc, #32]	; (80067cc <MX_USART1_UART_Init+0x4c>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <MX_USART1_UART_Init+0x4c>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80067b6:	4805      	ldr	r0, [pc, #20]	; (80067cc <MX_USART1_UART_Init+0x4c>)
 80067b8:	f7fc fafc 	bl	8002db4 <HAL_UART_Init>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80067c2:	f7ff fe19 	bl	80063f8 <Error_Handler>
  }

}
 80067c6:	bf00      	nop
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20001e48 	.word	0x20001e48
 80067d0:	40013800 	.word	0x40013800

080067d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067dc:	f107 0310 	add.w	r3, r7, #16
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	605a      	str	r2, [r3, #4]
 80067e6:	609a      	str	r2, [r3, #8]
 80067e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1c      	ldr	r2, [pc, #112]	; (8006860 <HAL_UART_MspInit+0x8c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d131      	bne.n	8006858 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80067f4:	4b1b      	ldr	r3, [pc, #108]	; (8006864 <HAL_UART_MspInit+0x90>)
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	4a1a      	ldr	r2, [pc, #104]	; (8006864 <HAL_UART_MspInit+0x90>)
 80067fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067fe:	6193      	str	r3, [r2, #24]
 8006800:	4b18      	ldr	r3, [pc, #96]	; (8006864 <HAL_UART_MspInit+0x90>)
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800680c:	4b15      	ldr	r3, [pc, #84]	; (8006864 <HAL_UART_MspInit+0x90>)
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	4a14      	ldr	r2, [pc, #80]	; (8006864 <HAL_UART_MspInit+0x90>)
 8006812:	f043 0304 	orr.w	r3, r3, #4
 8006816:	6193      	str	r3, [r2, #24]
 8006818:	4b12      	ldr	r3, [pc, #72]	; (8006864 <HAL_UART_MspInit+0x90>)
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	60bb      	str	r3, [r7, #8]
 8006822:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006828:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800682a:	2302      	movs	r3, #2
 800682c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800682e:	2303      	movs	r3, #3
 8006830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006832:	f107 0310 	add.w	r3, r7, #16
 8006836:	4619      	mov	r1, r3
 8006838:	480b      	ldr	r0, [pc, #44]	; (8006868 <HAL_UART_MspInit+0x94>)
 800683a:	f7fa fca9 	bl	8001190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800683e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006842:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006848:	2300      	movs	r3, #0
 800684a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800684c:	f107 0310 	add.w	r3, r7, #16
 8006850:	4619      	mov	r1, r3
 8006852:	4805      	ldr	r0, [pc, #20]	; (8006868 <HAL_UART_MspInit+0x94>)
 8006854:	f7fa fc9c 	bl	8001190 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006858:	bf00      	nop
 800685a:	3720      	adds	r7, #32
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40013800 	.word	0x40013800
 8006864:	40021000 	.word	0x40021000
 8006868:	40010800 	.word	0x40010800

0800686c <xprintf>:

  return ch;
}

size_t xprintf(UART_HandleTypeDef* uartHandle, const char * format, ...)
{
 800686c:	b40e      	push	{r1, r2, r3}
 800686e:	b580      	push	{r7, lr}
 8006870:	b085      	sub	sp, #20
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  va_list args;
  size_t bytesSent;

  memset(bufNetprintf, 0, BUF_WRITE_SIZE);
 8006876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800687a:	2100      	movs	r1, #0
 800687c:	4811      	ldr	r0, [pc, #68]	; (80068c4 <xprintf+0x58>)
 800687e:	f000 f881 	bl	8006984 <memset>

  va_start(args, format);
 8006882:	f107 0320 	add.w	r3, r7, #32
 8006886:	60bb      	str	r3, [r7, #8]
  vsnprintf(bufNetprintf, BUF_WRITE_SIZE, format, args);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006890:	480c      	ldr	r0, [pc, #48]	; (80068c4 <xprintf+0x58>)
 8006892:	f000 f8ab 	bl	80069ec <vsniprintf>
  va_end(args);

  bytesSent = strlen(bufNetprintf);
 8006896:	480b      	ldr	r0, [pc, #44]	; (80068c4 <xprintf+0x58>)
 8006898:	f7f9 fc5a 	bl	8000150 <strlen>
 800689c:	60f8      	str	r0, [r7, #12]

  HAL_UART_Transmit(uartHandle, (uint8_t *)bufNetprintf, bytesSent, 0xFFFF);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068a6:	4907      	ldr	r1, [pc, #28]	; (80068c4 <xprintf+0x58>)
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7fc fad0 	bl	8002e4e <HAL_UART_Transmit>

  return strlen(bufNetprintf);
 80068ae:	4805      	ldr	r0, [pc, #20]	; (80068c4 <xprintf+0x58>)
 80068b0:	f7f9 fc4e 	bl	8000150 <strlen>
 80068b4:	4603      	mov	r3, r0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068c0:	b003      	add	sp, #12
 80068c2:	4770      	bx	lr
 80068c4:	20001e88 	.word	0x20001e88

080068c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80068c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80068ca:	e003      	b.n	80068d4 <LoopCopyDataInit>

080068cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80068cc:	4b0b      	ldr	r3, [pc, #44]	; (80068fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80068ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80068d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80068d2:	3104      	adds	r1, #4

080068d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80068d4:	480a      	ldr	r0, [pc, #40]	; (8006900 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80068d6:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80068d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80068da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80068dc:	d3f6      	bcc.n	80068cc <CopyDataInit>
  ldr r2, =_sbss
 80068de:	4a0a      	ldr	r2, [pc, #40]	; (8006908 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80068e0:	e002      	b.n	80068e8 <LoopFillZerobss>

080068e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80068e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80068e4:	f842 3b04 	str.w	r3, [r2], #4

080068e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80068e8:	4b08      	ldr	r3, [pc, #32]	; (800690c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80068ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80068ec:	d3f9      	bcc.n	80068e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80068ee:	f7ff fe6f 	bl	80065d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068f2:	f000 f815 	bl	8006920 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80068f6:	f7ff fcf9 	bl	80062ec <main>
  bx lr
 80068fa:	4770      	bx	lr
  ldr r3, =_sidata
 80068fc:	08007420 	.word	0x08007420
  ldr r0, =_sdata
 8006900:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006904:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8006908:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 800690c:	20002298 	.word	0x20002298

08006910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006910:	e7fe      	b.n	8006910 <ADC1_2_IRQHandler>
	...

08006914 <__errno>:
 8006914:	4b01      	ldr	r3, [pc, #4]	; (800691c <__errno+0x8>)
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	20000010 	.word	0x20000010

08006920 <__libc_init_array>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	2600      	movs	r6, #0
 8006924:	4d0c      	ldr	r5, [pc, #48]	; (8006958 <__libc_init_array+0x38>)
 8006926:	4c0d      	ldr	r4, [pc, #52]	; (800695c <__libc_init_array+0x3c>)
 8006928:	1b64      	subs	r4, r4, r5
 800692a:	10a4      	asrs	r4, r4, #2
 800692c:	42a6      	cmp	r6, r4
 800692e:	d109      	bne.n	8006944 <__libc_init_array+0x24>
 8006930:	f000 fc76 	bl	8007220 <_init>
 8006934:	2600      	movs	r6, #0
 8006936:	4d0a      	ldr	r5, [pc, #40]	; (8006960 <__libc_init_array+0x40>)
 8006938:	4c0a      	ldr	r4, [pc, #40]	; (8006964 <__libc_init_array+0x44>)
 800693a:	1b64      	subs	r4, r4, r5
 800693c:	10a4      	asrs	r4, r4, #2
 800693e:	42a6      	cmp	r6, r4
 8006940:	d105      	bne.n	800694e <__libc_init_array+0x2e>
 8006942:	bd70      	pop	{r4, r5, r6, pc}
 8006944:	f855 3b04 	ldr.w	r3, [r5], #4
 8006948:	4798      	blx	r3
 800694a:	3601      	adds	r6, #1
 800694c:	e7ee      	b.n	800692c <__libc_init_array+0xc>
 800694e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006952:	4798      	blx	r3
 8006954:	3601      	adds	r6, #1
 8006956:	e7f2      	b.n	800693e <__libc_init_array+0x1e>
 8006958:	08007418 	.word	0x08007418
 800695c:	08007418 	.word	0x08007418
 8006960:	08007418 	.word	0x08007418
 8006964:	0800741c 	.word	0x0800741c

08006968 <memcpy>:
 8006968:	440a      	add	r2, r1
 800696a:	4291      	cmp	r1, r2
 800696c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006970:	d100      	bne.n	8006974 <memcpy+0xc>
 8006972:	4770      	bx	lr
 8006974:	b510      	push	{r4, lr}
 8006976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800697a:	4291      	cmp	r1, r2
 800697c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006980:	d1f9      	bne.n	8006976 <memcpy+0xe>
 8006982:	bd10      	pop	{r4, pc}

08006984 <memset>:
 8006984:	4603      	mov	r3, r0
 8006986:	4402      	add	r2, r0
 8006988:	4293      	cmp	r3, r2
 800698a:	d100      	bne.n	800698e <memset+0xa>
 800698c:	4770      	bx	lr
 800698e:	f803 1b01 	strb.w	r1, [r3], #1
 8006992:	e7f9      	b.n	8006988 <memset+0x4>

08006994 <_vsniprintf_r>:
 8006994:	b530      	push	{r4, r5, lr}
 8006996:	1e14      	subs	r4, r2, #0
 8006998:	4605      	mov	r5, r0
 800699a:	b09b      	sub	sp, #108	; 0x6c
 800699c:	4618      	mov	r0, r3
 800699e:	da05      	bge.n	80069ac <_vsniprintf_r+0x18>
 80069a0:	238b      	movs	r3, #139	; 0x8b
 80069a2:	f04f 30ff 	mov.w	r0, #4294967295
 80069a6:	602b      	str	r3, [r5, #0]
 80069a8:	b01b      	add	sp, #108	; 0x6c
 80069aa:	bd30      	pop	{r4, r5, pc}
 80069ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80069b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80069b4:	bf0c      	ite	eq
 80069b6:	4623      	moveq	r3, r4
 80069b8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80069bc:	9302      	str	r3, [sp, #8]
 80069be:	9305      	str	r3, [sp, #20]
 80069c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069c4:	4602      	mov	r2, r0
 80069c6:	9100      	str	r1, [sp, #0]
 80069c8:	9104      	str	r1, [sp, #16]
 80069ca:	f8ad 300e 	strh.w	r3, [sp, #14]
 80069ce:	4669      	mov	r1, sp
 80069d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80069d2:	4628      	mov	r0, r5
 80069d4:	f000 f874 	bl	8006ac0 <_svfiprintf_r>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	bfbc      	itt	lt
 80069dc:	238b      	movlt	r3, #139	; 0x8b
 80069de:	602b      	strlt	r3, [r5, #0]
 80069e0:	2c00      	cmp	r4, #0
 80069e2:	d0e1      	beq.n	80069a8 <_vsniprintf_r+0x14>
 80069e4:	2200      	movs	r2, #0
 80069e6:	9b00      	ldr	r3, [sp, #0]
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	e7dd      	b.n	80069a8 <_vsniprintf_r+0x14>

080069ec <vsniprintf>:
 80069ec:	b507      	push	{r0, r1, r2, lr}
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	4613      	mov	r3, r2
 80069f2:	460a      	mov	r2, r1
 80069f4:	4601      	mov	r1, r0
 80069f6:	4803      	ldr	r0, [pc, #12]	; (8006a04 <vsniprintf+0x18>)
 80069f8:	6800      	ldr	r0, [r0, #0]
 80069fa:	f7ff ffcb 	bl	8006994 <_vsniprintf_r>
 80069fe:	b003      	add	sp, #12
 8006a00:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a04:	20000010 	.word	0x20000010

08006a08 <__ssputs_r>:
 8006a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a0c:	688e      	ldr	r6, [r1, #8]
 8006a0e:	4682      	mov	sl, r0
 8006a10:	429e      	cmp	r6, r3
 8006a12:	460c      	mov	r4, r1
 8006a14:	4690      	mov	r8, r2
 8006a16:	461f      	mov	r7, r3
 8006a18:	d838      	bhi.n	8006a8c <__ssputs_r+0x84>
 8006a1a:	898a      	ldrh	r2, [r1, #12]
 8006a1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a20:	d032      	beq.n	8006a88 <__ssputs_r+0x80>
 8006a22:	6825      	ldr	r5, [r4, #0]
 8006a24:	6909      	ldr	r1, [r1, #16]
 8006a26:	3301      	adds	r3, #1
 8006a28:	eba5 0901 	sub.w	r9, r5, r1
 8006a2c:	6965      	ldr	r5, [r4, #20]
 8006a2e:	444b      	add	r3, r9
 8006a30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a38:	106d      	asrs	r5, r5, #1
 8006a3a:	429d      	cmp	r5, r3
 8006a3c:	bf38      	it	cc
 8006a3e:	461d      	movcc	r5, r3
 8006a40:	0553      	lsls	r3, r2, #21
 8006a42:	d531      	bpl.n	8006aa8 <__ssputs_r+0xa0>
 8006a44:	4629      	mov	r1, r5
 8006a46:	f000 fb45 	bl	80070d4 <_malloc_r>
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	b950      	cbnz	r0, 8006a64 <__ssputs_r+0x5c>
 8006a4e:	230c      	movs	r3, #12
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	f8ca 3000 	str.w	r3, [sl]
 8006a58:	89a3      	ldrh	r3, [r4, #12]
 8006a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a5e:	81a3      	strh	r3, [r4, #12]
 8006a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a64:	464a      	mov	r2, r9
 8006a66:	6921      	ldr	r1, [r4, #16]
 8006a68:	f7ff ff7e 	bl	8006968 <memcpy>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a76:	81a3      	strh	r3, [r4, #12]
 8006a78:	6126      	str	r6, [r4, #16]
 8006a7a:	444e      	add	r6, r9
 8006a7c:	6026      	str	r6, [r4, #0]
 8006a7e:	463e      	mov	r6, r7
 8006a80:	6165      	str	r5, [r4, #20]
 8006a82:	eba5 0509 	sub.w	r5, r5, r9
 8006a86:	60a5      	str	r5, [r4, #8]
 8006a88:	42be      	cmp	r6, r7
 8006a8a:	d900      	bls.n	8006a8e <__ssputs_r+0x86>
 8006a8c:	463e      	mov	r6, r7
 8006a8e:	4632      	mov	r2, r6
 8006a90:	4641      	mov	r1, r8
 8006a92:	6820      	ldr	r0, [r4, #0]
 8006a94:	f000 fab8 	bl	8007008 <memmove>
 8006a98:	68a3      	ldr	r3, [r4, #8]
 8006a9a:	6822      	ldr	r2, [r4, #0]
 8006a9c:	1b9b      	subs	r3, r3, r6
 8006a9e:	4432      	add	r2, r6
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	60a3      	str	r3, [r4, #8]
 8006aa4:	6022      	str	r2, [r4, #0]
 8006aa6:	e7db      	b.n	8006a60 <__ssputs_r+0x58>
 8006aa8:	462a      	mov	r2, r5
 8006aaa:	f000 fb6d 	bl	8007188 <_realloc_r>
 8006aae:	4606      	mov	r6, r0
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d1e1      	bne.n	8006a78 <__ssputs_r+0x70>
 8006ab4:	4650      	mov	r0, sl
 8006ab6:	6921      	ldr	r1, [r4, #16]
 8006ab8:	f000 fac0 	bl	800703c <_free_r>
 8006abc:	e7c7      	b.n	8006a4e <__ssputs_r+0x46>
	...

08006ac0 <_svfiprintf_r>:
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	4698      	mov	r8, r3
 8006ac6:	898b      	ldrh	r3, [r1, #12]
 8006ac8:	4607      	mov	r7, r0
 8006aca:	061b      	lsls	r3, r3, #24
 8006acc:	460d      	mov	r5, r1
 8006ace:	4614      	mov	r4, r2
 8006ad0:	b09d      	sub	sp, #116	; 0x74
 8006ad2:	d50e      	bpl.n	8006af2 <_svfiprintf_r+0x32>
 8006ad4:	690b      	ldr	r3, [r1, #16]
 8006ad6:	b963      	cbnz	r3, 8006af2 <_svfiprintf_r+0x32>
 8006ad8:	2140      	movs	r1, #64	; 0x40
 8006ada:	f000 fafb 	bl	80070d4 <_malloc_r>
 8006ade:	6028      	str	r0, [r5, #0]
 8006ae0:	6128      	str	r0, [r5, #16]
 8006ae2:	b920      	cbnz	r0, 8006aee <_svfiprintf_r+0x2e>
 8006ae4:	230c      	movs	r3, #12
 8006ae6:	603b      	str	r3, [r7, #0]
 8006ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aec:	e0d1      	b.n	8006c92 <_svfiprintf_r+0x1d2>
 8006aee:	2340      	movs	r3, #64	; 0x40
 8006af0:	616b      	str	r3, [r5, #20]
 8006af2:	2300      	movs	r3, #0
 8006af4:	9309      	str	r3, [sp, #36]	; 0x24
 8006af6:	2320      	movs	r3, #32
 8006af8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006afc:	2330      	movs	r3, #48	; 0x30
 8006afe:	f04f 0901 	mov.w	r9, #1
 8006b02:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006cac <_svfiprintf_r+0x1ec>
 8006b0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b0e:	4623      	mov	r3, r4
 8006b10:	469a      	mov	sl, r3
 8006b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b16:	b10a      	cbz	r2, 8006b1c <_svfiprintf_r+0x5c>
 8006b18:	2a25      	cmp	r2, #37	; 0x25
 8006b1a:	d1f9      	bne.n	8006b10 <_svfiprintf_r+0x50>
 8006b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8006b20:	d00b      	beq.n	8006b3a <_svfiprintf_r+0x7a>
 8006b22:	465b      	mov	r3, fp
 8006b24:	4622      	mov	r2, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	4638      	mov	r0, r7
 8006b2a:	f7ff ff6d 	bl	8006a08 <__ssputs_r>
 8006b2e:	3001      	adds	r0, #1
 8006b30:	f000 80aa 	beq.w	8006c88 <_svfiprintf_r+0x1c8>
 8006b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b36:	445a      	add	r2, fp
 8006b38:	9209      	str	r2, [sp, #36]	; 0x24
 8006b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 80a2 	beq.w	8006c88 <_svfiprintf_r+0x1c8>
 8006b44:	2300      	movs	r3, #0
 8006b46:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b4e:	f10a 0a01 	add.w	sl, sl, #1
 8006b52:	9304      	str	r3, [sp, #16]
 8006b54:	9307      	str	r3, [sp, #28]
 8006b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8006b5c:	4654      	mov	r4, sl
 8006b5e:	2205      	movs	r2, #5
 8006b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b64:	4851      	ldr	r0, [pc, #324]	; (8006cac <_svfiprintf_r+0x1ec>)
 8006b66:	f000 fa41 	bl	8006fec <memchr>
 8006b6a:	9a04      	ldr	r2, [sp, #16]
 8006b6c:	b9d8      	cbnz	r0, 8006ba6 <_svfiprintf_r+0xe6>
 8006b6e:	06d0      	lsls	r0, r2, #27
 8006b70:	bf44      	itt	mi
 8006b72:	2320      	movmi	r3, #32
 8006b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b78:	0711      	lsls	r1, r2, #28
 8006b7a:	bf44      	itt	mi
 8006b7c:	232b      	movmi	r3, #43	; 0x2b
 8006b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b82:	f89a 3000 	ldrb.w	r3, [sl]
 8006b86:	2b2a      	cmp	r3, #42	; 0x2a
 8006b88:	d015      	beq.n	8006bb6 <_svfiprintf_r+0xf6>
 8006b8a:	4654      	mov	r4, sl
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	f04f 0c0a 	mov.w	ip, #10
 8006b92:	9a07      	ldr	r2, [sp, #28]
 8006b94:	4621      	mov	r1, r4
 8006b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b9a:	3b30      	subs	r3, #48	; 0x30
 8006b9c:	2b09      	cmp	r3, #9
 8006b9e:	d94e      	bls.n	8006c3e <_svfiprintf_r+0x17e>
 8006ba0:	b1b0      	cbz	r0, 8006bd0 <_svfiprintf_r+0x110>
 8006ba2:	9207      	str	r2, [sp, #28]
 8006ba4:	e014      	b.n	8006bd0 <_svfiprintf_r+0x110>
 8006ba6:	eba0 0308 	sub.w	r3, r0, r8
 8006baa:	fa09 f303 	lsl.w	r3, r9, r3
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	46a2      	mov	sl, r4
 8006bb2:	9304      	str	r3, [sp, #16]
 8006bb4:	e7d2      	b.n	8006b5c <_svfiprintf_r+0x9c>
 8006bb6:	9b03      	ldr	r3, [sp, #12]
 8006bb8:	1d19      	adds	r1, r3, #4
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	9103      	str	r1, [sp, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bfbb      	ittet	lt
 8006bc2:	425b      	neglt	r3, r3
 8006bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8006bc8:	9307      	strge	r3, [sp, #28]
 8006bca:	9307      	strlt	r3, [sp, #28]
 8006bcc:	bfb8      	it	lt
 8006bce:	9204      	strlt	r2, [sp, #16]
 8006bd0:	7823      	ldrb	r3, [r4, #0]
 8006bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8006bd4:	d10c      	bne.n	8006bf0 <_svfiprintf_r+0x130>
 8006bd6:	7863      	ldrb	r3, [r4, #1]
 8006bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8006bda:	d135      	bne.n	8006c48 <_svfiprintf_r+0x188>
 8006bdc:	9b03      	ldr	r3, [sp, #12]
 8006bde:	3402      	adds	r4, #2
 8006be0:	1d1a      	adds	r2, r3, #4
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	9203      	str	r2, [sp, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bfb8      	it	lt
 8006bea:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bee:	9305      	str	r3, [sp, #20]
 8006bf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cbc <_svfiprintf_r+0x1fc>
 8006bf4:	2203      	movs	r2, #3
 8006bf6:	4650      	mov	r0, sl
 8006bf8:	7821      	ldrb	r1, [r4, #0]
 8006bfa:	f000 f9f7 	bl	8006fec <memchr>
 8006bfe:	b140      	cbz	r0, 8006c12 <_svfiprintf_r+0x152>
 8006c00:	2340      	movs	r3, #64	; 0x40
 8006c02:	eba0 000a 	sub.w	r0, r0, sl
 8006c06:	fa03 f000 	lsl.w	r0, r3, r0
 8006c0a:	9b04      	ldr	r3, [sp, #16]
 8006c0c:	3401      	adds	r4, #1
 8006c0e:	4303      	orrs	r3, r0
 8006c10:	9304      	str	r3, [sp, #16]
 8006c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c16:	2206      	movs	r2, #6
 8006c18:	4825      	ldr	r0, [pc, #148]	; (8006cb0 <_svfiprintf_r+0x1f0>)
 8006c1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c1e:	f000 f9e5 	bl	8006fec <memchr>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d038      	beq.n	8006c98 <_svfiprintf_r+0x1d8>
 8006c26:	4b23      	ldr	r3, [pc, #140]	; (8006cb4 <_svfiprintf_r+0x1f4>)
 8006c28:	bb1b      	cbnz	r3, 8006c72 <_svfiprintf_r+0x1b2>
 8006c2a:	9b03      	ldr	r3, [sp, #12]
 8006c2c:	3307      	adds	r3, #7
 8006c2e:	f023 0307 	bic.w	r3, r3, #7
 8006c32:	3308      	adds	r3, #8
 8006c34:	9303      	str	r3, [sp, #12]
 8006c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c38:	4433      	add	r3, r6
 8006c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c3c:	e767      	b.n	8006b0e <_svfiprintf_r+0x4e>
 8006c3e:	460c      	mov	r4, r1
 8006c40:	2001      	movs	r0, #1
 8006c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c46:	e7a5      	b.n	8006b94 <_svfiprintf_r+0xd4>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f04f 0c0a 	mov.w	ip, #10
 8006c4e:	4619      	mov	r1, r3
 8006c50:	3401      	adds	r4, #1
 8006c52:	9305      	str	r3, [sp, #20]
 8006c54:	4620      	mov	r0, r4
 8006c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c5a:	3a30      	subs	r2, #48	; 0x30
 8006c5c:	2a09      	cmp	r2, #9
 8006c5e:	d903      	bls.n	8006c68 <_svfiprintf_r+0x1a8>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0c5      	beq.n	8006bf0 <_svfiprintf_r+0x130>
 8006c64:	9105      	str	r1, [sp, #20]
 8006c66:	e7c3      	b.n	8006bf0 <_svfiprintf_r+0x130>
 8006c68:	4604      	mov	r4, r0
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c70:	e7f0      	b.n	8006c54 <_svfiprintf_r+0x194>
 8006c72:	ab03      	add	r3, sp, #12
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	462a      	mov	r2, r5
 8006c78:	4638      	mov	r0, r7
 8006c7a:	4b0f      	ldr	r3, [pc, #60]	; (8006cb8 <_svfiprintf_r+0x1f8>)
 8006c7c:	a904      	add	r1, sp, #16
 8006c7e:	f3af 8000 	nop.w
 8006c82:	1c42      	adds	r2, r0, #1
 8006c84:	4606      	mov	r6, r0
 8006c86:	d1d6      	bne.n	8006c36 <_svfiprintf_r+0x176>
 8006c88:	89ab      	ldrh	r3, [r5, #12]
 8006c8a:	065b      	lsls	r3, r3, #25
 8006c8c:	f53f af2c 	bmi.w	8006ae8 <_svfiprintf_r+0x28>
 8006c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c92:	b01d      	add	sp, #116	; 0x74
 8006c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c98:	ab03      	add	r3, sp, #12
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	462a      	mov	r2, r5
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <_svfiprintf_r+0x1f8>)
 8006ca2:	a904      	add	r1, sp, #16
 8006ca4:	f000 f87c 	bl	8006da0 <_printf_i>
 8006ca8:	e7eb      	b.n	8006c82 <_svfiprintf_r+0x1c2>
 8006caa:	bf00      	nop
 8006cac:	080073e4 	.word	0x080073e4
 8006cb0:	080073ee 	.word	0x080073ee
 8006cb4:	00000000 	.word	0x00000000
 8006cb8:	08006a09 	.word	0x08006a09
 8006cbc:	080073ea 	.word	0x080073ea

08006cc0 <_printf_common>:
 8006cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	4616      	mov	r6, r2
 8006cc6:	4699      	mov	r9, r3
 8006cc8:	688a      	ldr	r2, [r1, #8]
 8006cca:	690b      	ldr	r3, [r1, #16]
 8006ccc:	4607      	mov	r7, r0
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	bfb8      	it	lt
 8006cd2:	4613      	movlt	r3, r2
 8006cd4:	6033      	str	r3, [r6, #0]
 8006cd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cda:	460c      	mov	r4, r1
 8006cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce0:	b10a      	cbz	r2, 8006ce6 <_printf_common+0x26>
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	6033      	str	r3, [r6, #0]
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	0699      	lsls	r1, r3, #26
 8006cea:	bf42      	ittt	mi
 8006cec:	6833      	ldrmi	r3, [r6, #0]
 8006cee:	3302      	addmi	r3, #2
 8006cf0:	6033      	strmi	r3, [r6, #0]
 8006cf2:	6825      	ldr	r5, [r4, #0]
 8006cf4:	f015 0506 	ands.w	r5, r5, #6
 8006cf8:	d106      	bne.n	8006d08 <_printf_common+0x48>
 8006cfa:	f104 0a19 	add.w	sl, r4, #25
 8006cfe:	68e3      	ldr	r3, [r4, #12]
 8006d00:	6832      	ldr	r2, [r6, #0]
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	42ab      	cmp	r3, r5
 8006d06:	dc28      	bgt.n	8006d5a <_printf_common+0x9a>
 8006d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d0c:	1e13      	subs	r3, r2, #0
 8006d0e:	6822      	ldr	r2, [r4, #0]
 8006d10:	bf18      	it	ne
 8006d12:	2301      	movne	r3, #1
 8006d14:	0692      	lsls	r2, r2, #26
 8006d16:	d42d      	bmi.n	8006d74 <_printf_common+0xb4>
 8006d18:	4649      	mov	r1, r9
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d20:	47c0      	blx	r8
 8006d22:	3001      	adds	r0, #1
 8006d24:	d020      	beq.n	8006d68 <_printf_common+0xa8>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	68e5      	ldr	r5, [r4, #12]
 8006d2a:	f003 0306 	and.w	r3, r3, #6
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	bf18      	it	ne
 8006d32:	2500      	movne	r5, #0
 8006d34:	6832      	ldr	r2, [r6, #0]
 8006d36:	f04f 0600 	mov.w	r6, #0
 8006d3a:	68a3      	ldr	r3, [r4, #8]
 8006d3c:	bf08      	it	eq
 8006d3e:	1aad      	subeq	r5, r5, r2
 8006d40:	6922      	ldr	r2, [r4, #16]
 8006d42:	bf08      	it	eq
 8006d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	bfc4      	itt	gt
 8006d4c:	1a9b      	subgt	r3, r3, r2
 8006d4e:	18ed      	addgt	r5, r5, r3
 8006d50:	341a      	adds	r4, #26
 8006d52:	42b5      	cmp	r5, r6
 8006d54:	d11a      	bne.n	8006d8c <_printf_common+0xcc>
 8006d56:	2000      	movs	r0, #0
 8006d58:	e008      	b.n	8006d6c <_printf_common+0xac>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4652      	mov	r2, sl
 8006d5e:	4649      	mov	r1, r9
 8006d60:	4638      	mov	r0, r7
 8006d62:	47c0      	blx	r8
 8006d64:	3001      	adds	r0, #1
 8006d66:	d103      	bne.n	8006d70 <_printf_common+0xb0>
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d70:	3501      	adds	r5, #1
 8006d72:	e7c4      	b.n	8006cfe <_printf_common+0x3e>
 8006d74:	2030      	movs	r0, #48	; 0x30
 8006d76:	18e1      	adds	r1, r4, r3
 8006d78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d82:	4422      	add	r2, r4
 8006d84:	3302      	adds	r3, #2
 8006d86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d8a:	e7c5      	b.n	8006d18 <_printf_common+0x58>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4622      	mov	r2, r4
 8006d90:	4649      	mov	r1, r9
 8006d92:	4638      	mov	r0, r7
 8006d94:	47c0      	blx	r8
 8006d96:	3001      	adds	r0, #1
 8006d98:	d0e6      	beq.n	8006d68 <_printf_common+0xa8>
 8006d9a:	3601      	adds	r6, #1
 8006d9c:	e7d9      	b.n	8006d52 <_printf_common+0x92>
	...

08006da0 <_printf_i>:
 8006da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da4:	460c      	mov	r4, r1
 8006da6:	7e27      	ldrb	r7, [r4, #24]
 8006da8:	4691      	mov	r9, r2
 8006daa:	2f78      	cmp	r7, #120	; 0x78
 8006dac:	4680      	mov	r8, r0
 8006dae:	469a      	mov	sl, r3
 8006db0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006db2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006db6:	d807      	bhi.n	8006dc8 <_printf_i+0x28>
 8006db8:	2f62      	cmp	r7, #98	; 0x62
 8006dba:	d80a      	bhi.n	8006dd2 <_printf_i+0x32>
 8006dbc:	2f00      	cmp	r7, #0
 8006dbe:	f000 80d9 	beq.w	8006f74 <_printf_i+0x1d4>
 8006dc2:	2f58      	cmp	r7, #88	; 0x58
 8006dc4:	f000 80a4 	beq.w	8006f10 <_printf_i+0x170>
 8006dc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dd0:	e03a      	b.n	8006e48 <_printf_i+0xa8>
 8006dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dd6:	2b15      	cmp	r3, #21
 8006dd8:	d8f6      	bhi.n	8006dc8 <_printf_i+0x28>
 8006dda:	a001      	add	r0, pc, #4	; (adr r0, 8006de0 <_printf_i+0x40>)
 8006ddc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006de0:	08006e39 	.word	0x08006e39
 8006de4:	08006e4d 	.word	0x08006e4d
 8006de8:	08006dc9 	.word	0x08006dc9
 8006dec:	08006dc9 	.word	0x08006dc9
 8006df0:	08006dc9 	.word	0x08006dc9
 8006df4:	08006dc9 	.word	0x08006dc9
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006dc9 	.word	0x08006dc9
 8006e00:	08006dc9 	.word	0x08006dc9
 8006e04:	08006dc9 	.word	0x08006dc9
 8006e08:	08006dc9 	.word	0x08006dc9
 8006e0c:	08006f5b 	.word	0x08006f5b
 8006e10:	08006e7d 	.word	0x08006e7d
 8006e14:	08006f3d 	.word	0x08006f3d
 8006e18:	08006dc9 	.word	0x08006dc9
 8006e1c:	08006dc9 	.word	0x08006dc9
 8006e20:	08006f7d 	.word	0x08006f7d
 8006e24:	08006dc9 	.word	0x08006dc9
 8006e28:	08006e7d 	.word	0x08006e7d
 8006e2c:	08006dc9 	.word	0x08006dc9
 8006e30:	08006dc9 	.word	0x08006dc9
 8006e34:	08006f45 	.word	0x08006f45
 8006e38:	680b      	ldr	r3, [r1, #0]
 8006e3a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e3e:	1d1a      	adds	r2, r3, #4
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	600a      	str	r2, [r1, #0]
 8006e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e0a4      	b.n	8006f96 <_printf_i+0x1f6>
 8006e4c:	6825      	ldr	r5, [r4, #0]
 8006e4e:	6808      	ldr	r0, [r1, #0]
 8006e50:	062e      	lsls	r6, r5, #24
 8006e52:	f100 0304 	add.w	r3, r0, #4
 8006e56:	d50a      	bpl.n	8006e6e <_printf_i+0xce>
 8006e58:	6805      	ldr	r5, [r0, #0]
 8006e5a:	600b      	str	r3, [r1, #0]
 8006e5c:	2d00      	cmp	r5, #0
 8006e5e:	da03      	bge.n	8006e68 <_printf_i+0xc8>
 8006e60:	232d      	movs	r3, #45	; 0x2d
 8006e62:	426d      	negs	r5, r5
 8006e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e68:	230a      	movs	r3, #10
 8006e6a:	485e      	ldr	r0, [pc, #376]	; (8006fe4 <_printf_i+0x244>)
 8006e6c:	e019      	b.n	8006ea2 <_printf_i+0x102>
 8006e6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e72:	6805      	ldr	r5, [r0, #0]
 8006e74:	600b      	str	r3, [r1, #0]
 8006e76:	bf18      	it	ne
 8006e78:	b22d      	sxthne	r5, r5
 8006e7a:	e7ef      	b.n	8006e5c <_printf_i+0xbc>
 8006e7c:	680b      	ldr	r3, [r1, #0]
 8006e7e:	6825      	ldr	r5, [r4, #0]
 8006e80:	1d18      	adds	r0, r3, #4
 8006e82:	6008      	str	r0, [r1, #0]
 8006e84:	0628      	lsls	r0, r5, #24
 8006e86:	d501      	bpl.n	8006e8c <_printf_i+0xec>
 8006e88:	681d      	ldr	r5, [r3, #0]
 8006e8a:	e002      	b.n	8006e92 <_printf_i+0xf2>
 8006e8c:	0669      	lsls	r1, r5, #25
 8006e8e:	d5fb      	bpl.n	8006e88 <_printf_i+0xe8>
 8006e90:	881d      	ldrh	r5, [r3, #0]
 8006e92:	2f6f      	cmp	r7, #111	; 0x6f
 8006e94:	bf0c      	ite	eq
 8006e96:	2308      	moveq	r3, #8
 8006e98:	230a      	movne	r3, #10
 8006e9a:	4852      	ldr	r0, [pc, #328]	; (8006fe4 <_printf_i+0x244>)
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ea2:	6866      	ldr	r6, [r4, #4]
 8006ea4:	2e00      	cmp	r6, #0
 8006ea6:	bfa8      	it	ge
 8006ea8:	6821      	ldrge	r1, [r4, #0]
 8006eaa:	60a6      	str	r6, [r4, #8]
 8006eac:	bfa4      	itt	ge
 8006eae:	f021 0104 	bicge.w	r1, r1, #4
 8006eb2:	6021      	strge	r1, [r4, #0]
 8006eb4:	b90d      	cbnz	r5, 8006eba <_printf_i+0x11a>
 8006eb6:	2e00      	cmp	r6, #0
 8006eb8:	d04d      	beq.n	8006f56 <_printf_i+0x1b6>
 8006eba:	4616      	mov	r6, r2
 8006ebc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ec0:	fb03 5711 	mls	r7, r3, r1, r5
 8006ec4:	5dc7      	ldrb	r7, [r0, r7]
 8006ec6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006eca:	462f      	mov	r7, r5
 8006ecc:	42bb      	cmp	r3, r7
 8006ece:	460d      	mov	r5, r1
 8006ed0:	d9f4      	bls.n	8006ebc <_printf_i+0x11c>
 8006ed2:	2b08      	cmp	r3, #8
 8006ed4:	d10b      	bne.n	8006eee <_printf_i+0x14e>
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	07df      	lsls	r7, r3, #31
 8006eda:	d508      	bpl.n	8006eee <_printf_i+0x14e>
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	6861      	ldr	r1, [r4, #4]
 8006ee0:	4299      	cmp	r1, r3
 8006ee2:	bfde      	ittt	le
 8006ee4:	2330      	movle	r3, #48	; 0x30
 8006ee6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006eea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006eee:	1b92      	subs	r2, r2, r6
 8006ef0:	6122      	str	r2, [r4, #16]
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	f8cd a000 	str.w	sl, [sp]
 8006efc:	aa03      	add	r2, sp, #12
 8006efe:	f7ff fedf 	bl	8006cc0 <_printf_common>
 8006f02:	3001      	adds	r0, #1
 8006f04:	d14c      	bne.n	8006fa0 <_printf_i+0x200>
 8006f06:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0a:	b004      	add	sp, #16
 8006f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f10:	4834      	ldr	r0, [pc, #208]	; (8006fe4 <_printf_i+0x244>)
 8006f12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f16:	680e      	ldr	r6, [r1, #0]
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f1e:	061f      	lsls	r7, r3, #24
 8006f20:	600e      	str	r6, [r1, #0]
 8006f22:	d514      	bpl.n	8006f4e <_printf_i+0x1ae>
 8006f24:	07d9      	lsls	r1, r3, #31
 8006f26:	bf44      	itt	mi
 8006f28:	f043 0320 	orrmi.w	r3, r3, #32
 8006f2c:	6023      	strmi	r3, [r4, #0]
 8006f2e:	b91d      	cbnz	r5, 8006f38 <_printf_i+0x198>
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	f023 0320 	bic.w	r3, r3, #32
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	2310      	movs	r3, #16
 8006f3a:	e7af      	b.n	8006e9c <_printf_i+0xfc>
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	f043 0320 	orr.w	r3, r3, #32
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	2378      	movs	r3, #120	; 0x78
 8006f46:	4828      	ldr	r0, [pc, #160]	; (8006fe8 <_printf_i+0x248>)
 8006f48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f4c:	e7e3      	b.n	8006f16 <_printf_i+0x176>
 8006f4e:	065e      	lsls	r6, r3, #25
 8006f50:	bf48      	it	mi
 8006f52:	b2ad      	uxthmi	r5, r5
 8006f54:	e7e6      	b.n	8006f24 <_printf_i+0x184>
 8006f56:	4616      	mov	r6, r2
 8006f58:	e7bb      	b.n	8006ed2 <_printf_i+0x132>
 8006f5a:	680b      	ldr	r3, [r1, #0]
 8006f5c:	6826      	ldr	r6, [r4, #0]
 8006f5e:	1d1d      	adds	r5, r3, #4
 8006f60:	6960      	ldr	r0, [r4, #20]
 8006f62:	600d      	str	r5, [r1, #0]
 8006f64:	0635      	lsls	r5, r6, #24
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	d501      	bpl.n	8006f6e <_printf_i+0x1ce>
 8006f6a:	6018      	str	r0, [r3, #0]
 8006f6c:	e002      	b.n	8006f74 <_printf_i+0x1d4>
 8006f6e:	0671      	lsls	r1, r6, #25
 8006f70:	d5fb      	bpl.n	8006f6a <_printf_i+0x1ca>
 8006f72:	8018      	strh	r0, [r3, #0]
 8006f74:	2300      	movs	r3, #0
 8006f76:	4616      	mov	r6, r2
 8006f78:	6123      	str	r3, [r4, #16]
 8006f7a:	e7ba      	b.n	8006ef2 <_printf_i+0x152>
 8006f7c:	680b      	ldr	r3, [r1, #0]
 8006f7e:	1d1a      	adds	r2, r3, #4
 8006f80:	600a      	str	r2, [r1, #0]
 8006f82:	681e      	ldr	r6, [r3, #0]
 8006f84:	2100      	movs	r1, #0
 8006f86:	4630      	mov	r0, r6
 8006f88:	6862      	ldr	r2, [r4, #4]
 8006f8a:	f000 f82f 	bl	8006fec <memchr>
 8006f8e:	b108      	cbz	r0, 8006f94 <_printf_i+0x1f4>
 8006f90:	1b80      	subs	r0, r0, r6
 8006f92:	6060      	str	r0, [r4, #4]
 8006f94:	6863      	ldr	r3, [r4, #4]
 8006f96:	6123      	str	r3, [r4, #16]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f9e:	e7a8      	b.n	8006ef2 <_printf_i+0x152>
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	6923      	ldr	r3, [r4, #16]
 8006fa8:	47d0      	blx	sl
 8006faa:	3001      	adds	r0, #1
 8006fac:	d0ab      	beq.n	8006f06 <_printf_i+0x166>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	079b      	lsls	r3, r3, #30
 8006fb2:	d413      	bmi.n	8006fdc <_printf_i+0x23c>
 8006fb4:	68e0      	ldr	r0, [r4, #12]
 8006fb6:	9b03      	ldr	r3, [sp, #12]
 8006fb8:	4298      	cmp	r0, r3
 8006fba:	bfb8      	it	lt
 8006fbc:	4618      	movlt	r0, r3
 8006fbe:	e7a4      	b.n	8006f0a <_printf_i+0x16a>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4632      	mov	r2, r6
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	47d0      	blx	sl
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d09b      	beq.n	8006f06 <_printf_i+0x166>
 8006fce:	3501      	adds	r5, #1
 8006fd0:	68e3      	ldr	r3, [r4, #12]
 8006fd2:	9903      	ldr	r1, [sp, #12]
 8006fd4:	1a5b      	subs	r3, r3, r1
 8006fd6:	42ab      	cmp	r3, r5
 8006fd8:	dcf2      	bgt.n	8006fc0 <_printf_i+0x220>
 8006fda:	e7eb      	b.n	8006fb4 <_printf_i+0x214>
 8006fdc:	2500      	movs	r5, #0
 8006fde:	f104 0619 	add.w	r6, r4, #25
 8006fe2:	e7f5      	b.n	8006fd0 <_printf_i+0x230>
 8006fe4:	080073f5 	.word	0x080073f5
 8006fe8:	08007406 	.word	0x08007406

08006fec <memchr>:
 8006fec:	4603      	mov	r3, r0
 8006fee:	b510      	push	{r4, lr}
 8006ff0:	b2c9      	uxtb	r1, r1
 8006ff2:	4402      	add	r2, r0
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	d101      	bne.n	8006ffe <memchr+0x12>
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	e003      	b.n	8007006 <memchr+0x1a>
 8006ffe:	7804      	ldrb	r4, [r0, #0]
 8007000:	3301      	adds	r3, #1
 8007002:	428c      	cmp	r4, r1
 8007004:	d1f6      	bne.n	8006ff4 <memchr+0x8>
 8007006:	bd10      	pop	{r4, pc}

08007008 <memmove>:
 8007008:	4288      	cmp	r0, r1
 800700a:	b510      	push	{r4, lr}
 800700c:	eb01 0402 	add.w	r4, r1, r2
 8007010:	d902      	bls.n	8007018 <memmove+0x10>
 8007012:	4284      	cmp	r4, r0
 8007014:	4623      	mov	r3, r4
 8007016:	d807      	bhi.n	8007028 <memmove+0x20>
 8007018:	1e43      	subs	r3, r0, #1
 800701a:	42a1      	cmp	r1, r4
 800701c:	d008      	beq.n	8007030 <memmove+0x28>
 800701e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007022:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007026:	e7f8      	b.n	800701a <memmove+0x12>
 8007028:	4601      	mov	r1, r0
 800702a:	4402      	add	r2, r0
 800702c:	428a      	cmp	r2, r1
 800702e:	d100      	bne.n	8007032 <memmove+0x2a>
 8007030:	bd10      	pop	{r4, pc}
 8007032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800703a:	e7f7      	b.n	800702c <memmove+0x24>

0800703c <_free_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4605      	mov	r5, r0
 8007040:	2900      	cmp	r1, #0
 8007042:	d043      	beq.n	80070cc <_free_r+0x90>
 8007044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007048:	1f0c      	subs	r4, r1, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	bfb8      	it	lt
 800704e:	18e4      	addlt	r4, r4, r3
 8007050:	f000 f8d0 	bl	80071f4 <__malloc_lock>
 8007054:	4a1e      	ldr	r2, [pc, #120]	; (80070d0 <_free_r+0x94>)
 8007056:	6813      	ldr	r3, [r2, #0]
 8007058:	4610      	mov	r0, r2
 800705a:	b933      	cbnz	r3, 800706a <_free_r+0x2e>
 800705c:	6063      	str	r3, [r4, #4]
 800705e:	6014      	str	r4, [r2, #0]
 8007060:	4628      	mov	r0, r5
 8007062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007066:	f000 b8cb 	b.w	8007200 <__malloc_unlock>
 800706a:	42a3      	cmp	r3, r4
 800706c:	d90a      	bls.n	8007084 <_free_r+0x48>
 800706e:	6821      	ldr	r1, [r4, #0]
 8007070:	1862      	adds	r2, r4, r1
 8007072:	4293      	cmp	r3, r2
 8007074:	bf01      	itttt	eq
 8007076:	681a      	ldreq	r2, [r3, #0]
 8007078:	685b      	ldreq	r3, [r3, #4]
 800707a:	1852      	addeq	r2, r2, r1
 800707c:	6022      	streq	r2, [r4, #0]
 800707e:	6063      	str	r3, [r4, #4]
 8007080:	6004      	str	r4, [r0, #0]
 8007082:	e7ed      	b.n	8007060 <_free_r+0x24>
 8007084:	461a      	mov	r2, r3
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	b10b      	cbz	r3, 800708e <_free_r+0x52>
 800708a:	42a3      	cmp	r3, r4
 800708c:	d9fa      	bls.n	8007084 <_free_r+0x48>
 800708e:	6811      	ldr	r1, [r2, #0]
 8007090:	1850      	adds	r0, r2, r1
 8007092:	42a0      	cmp	r0, r4
 8007094:	d10b      	bne.n	80070ae <_free_r+0x72>
 8007096:	6820      	ldr	r0, [r4, #0]
 8007098:	4401      	add	r1, r0
 800709a:	1850      	adds	r0, r2, r1
 800709c:	4283      	cmp	r3, r0
 800709e:	6011      	str	r1, [r2, #0]
 80070a0:	d1de      	bne.n	8007060 <_free_r+0x24>
 80070a2:	6818      	ldr	r0, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	4401      	add	r1, r0
 80070a8:	6011      	str	r1, [r2, #0]
 80070aa:	6053      	str	r3, [r2, #4]
 80070ac:	e7d8      	b.n	8007060 <_free_r+0x24>
 80070ae:	d902      	bls.n	80070b6 <_free_r+0x7a>
 80070b0:	230c      	movs	r3, #12
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	e7d4      	b.n	8007060 <_free_r+0x24>
 80070b6:	6820      	ldr	r0, [r4, #0]
 80070b8:	1821      	adds	r1, r4, r0
 80070ba:	428b      	cmp	r3, r1
 80070bc:	bf01      	itttt	eq
 80070be:	6819      	ldreq	r1, [r3, #0]
 80070c0:	685b      	ldreq	r3, [r3, #4]
 80070c2:	1809      	addeq	r1, r1, r0
 80070c4:	6021      	streq	r1, [r4, #0]
 80070c6:	6063      	str	r3, [r4, #4]
 80070c8:	6054      	str	r4, [r2, #4]
 80070ca:	e7c9      	b.n	8007060 <_free_r+0x24>
 80070cc:	bd38      	pop	{r3, r4, r5, pc}
 80070ce:	bf00      	nop
 80070d0:	20001cac 	.word	0x20001cac

080070d4 <_malloc_r>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	1ccd      	adds	r5, r1, #3
 80070d8:	f025 0503 	bic.w	r5, r5, #3
 80070dc:	3508      	adds	r5, #8
 80070de:	2d0c      	cmp	r5, #12
 80070e0:	bf38      	it	cc
 80070e2:	250c      	movcc	r5, #12
 80070e4:	2d00      	cmp	r5, #0
 80070e6:	4606      	mov	r6, r0
 80070e8:	db01      	blt.n	80070ee <_malloc_r+0x1a>
 80070ea:	42a9      	cmp	r1, r5
 80070ec:	d903      	bls.n	80070f6 <_malloc_r+0x22>
 80070ee:	230c      	movs	r3, #12
 80070f0:	6033      	str	r3, [r6, #0]
 80070f2:	2000      	movs	r0, #0
 80070f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f6:	f000 f87d 	bl	80071f4 <__malloc_lock>
 80070fa:	4921      	ldr	r1, [pc, #132]	; (8007180 <_malloc_r+0xac>)
 80070fc:	680a      	ldr	r2, [r1, #0]
 80070fe:	4614      	mov	r4, r2
 8007100:	b99c      	cbnz	r4, 800712a <_malloc_r+0x56>
 8007102:	4f20      	ldr	r7, [pc, #128]	; (8007184 <_malloc_r+0xb0>)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	b923      	cbnz	r3, 8007112 <_malloc_r+0x3e>
 8007108:	4621      	mov	r1, r4
 800710a:	4630      	mov	r0, r6
 800710c:	f000 f862 	bl	80071d4 <_sbrk_r>
 8007110:	6038      	str	r0, [r7, #0]
 8007112:	4629      	mov	r1, r5
 8007114:	4630      	mov	r0, r6
 8007116:	f000 f85d 	bl	80071d4 <_sbrk_r>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	d123      	bne.n	8007166 <_malloc_r+0x92>
 800711e:	230c      	movs	r3, #12
 8007120:	4630      	mov	r0, r6
 8007122:	6033      	str	r3, [r6, #0]
 8007124:	f000 f86c 	bl	8007200 <__malloc_unlock>
 8007128:	e7e3      	b.n	80070f2 <_malloc_r+0x1e>
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	1b5b      	subs	r3, r3, r5
 800712e:	d417      	bmi.n	8007160 <_malloc_r+0x8c>
 8007130:	2b0b      	cmp	r3, #11
 8007132:	d903      	bls.n	800713c <_malloc_r+0x68>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	441c      	add	r4, r3
 8007138:	6025      	str	r5, [r4, #0]
 800713a:	e004      	b.n	8007146 <_malloc_r+0x72>
 800713c:	6863      	ldr	r3, [r4, #4]
 800713e:	42a2      	cmp	r2, r4
 8007140:	bf0c      	ite	eq
 8007142:	600b      	streq	r3, [r1, #0]
 8007144:	6053      	strne	r3, [r2, #4]
 8007146:	4630      	mov	r0, r6
 8007148:	f000 f85a 	bl	8007200 <__malloc_unlock>
 800714c:	f104 000b 	add.w	r0, r4, #11
 8007150:	1d23      	adds	r3, r4, #4
 8007152:	f020 0007 	bic.w	r0, r0, #7
 8007156:	1ac2      	subs	r2, r0, r3
 8007158:	d0cc      	beq.n	80070f4 <_malloc_r+0x20>
 800715a:	1a1b      	subs	r3, r3, r0
 800715c:	50a3      	str	r3, [r4, r2]
 800715e:	e7c9      	b.n	80070f4 <_malloc_r+0x20>
 8007160:	4622      	mov	r2, r4
 8007162:	6864      	ldr	r4, [r4, #4]
 8007164:	e7cc      	b.n	8007100 <_malloc_r+0x2c>
 8007166:	1cc4      	adds	r4, r0, #3
 8007168:	f024 0403 	bic.w	r4, r4, #3
 800716c:	42a0      	cmp	r0, r4
 800716e:	d0e3      	beq.n	8007138 <_malloc_r+0x64>
 8007170:	1a21      	subs	r1, r4, r0
 8007172:	4630      	mov	r0, r6
 8007174:	f000 f82e 	bl	80071d4 <_sbrk_r>
 8007178:	3001      	adds	r0, #1
 800717a:	d1dd      	bne.n	8007138 <_malloc_r+0x64>
 800717c:	e7cf      	b.n	800711e <_malloc_r+0x4a>
 800717e:	bf00      	nop
 8007180:	20001cac 	.word	0x20001cac
 8007184:	20001cb0 	.word	0x20001cb0

08007188 <_realloc_r>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	4607      	mov	r7, r0
 800718c:	4614      	mov	r4, r2
 800718e:	460e      	mov	r6, r1
 8007190:	b921      	cbnz	r1, 800719c <_realloc_r+0x14>
 8007192:	4611      	mov	r1, r2
 8007194:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007198:	f7ff bf9c 	b.w	80070d4 <_malloc_r>
 800719c:	b922      	cbnz	r2, 80071a8 <_realloc_r+0x20>
 800719e:	f7ff ff4d 	bl	800703c <_free_r>
 80071a2:	4625      	mov	r5, r4
 80071a4:	4628      	mov	r0, r5
 80071a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a8:	f000 f830 	bl	800720c <_malloc_usable_size_r>
 80071ac:	42a0      	cmp	r0, r4
 80071ae:	d20f      	bcs.n	80071d0 <_realloc_r+0x48>
 80071b0:	4621      	mov	r1, r4
 80071b2:	4638      	mov	r0, r7
 80071b4:	f7ff ff8e 	bl	80070d4 <_malloc_r>
 80071b8:	4605      	mov	r5, r0
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d0f2      	beq.n	80071a4 <_realloc_r+0x1c>
 80071be:	4631      	mov	r1, r6
 80071c0:	4622      	mov	r2, r4
 80071c2:	f7ff fbd1 	bl	8006968 <memcpy>
 80071c6:	4631      	mov	r1, r6
 80071c8:	4638      	mov	r0, r7
 80071ca:	f7ff ff37 	bl	800703c <_free_r>
 80071ce:	e7e9      	b.n	80071a4 <_realloc_r+0x1c>
 80071d0:	4635      	mov	r5, r6
 80071d2:	e7e7      	b.n	80071a4 <_realloc_r+0x1c>

080071d4 <_sbrk_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	2300      	movs	r3, #0
 80071d8:	4d05      	ldr	r5, [pc, #20]	; (80071f0 <_sbrk_r+0x1c>)
 80071da:	4604      	mov	r4, r0
 80071dc:	4608      	mov	r0, r1
 80071de:	602b      	str	r3, [r5, #0]
 80071e0:	f7ff f9ca 	bl	8006578 <_sbrk>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d102      	bne.n	80071ee <_sbrk_r+0x1a>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	b103      	cbz	r3, 80071ee <_sbrk_r+0x1a>
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	20002288 	.word	0x20002288

080071f4 <__malloc_lock>:
 80071f4:	4801      	ldr	r0, [pc, #4]	; (80071fc <__malloc_lock+0x8>)
 80071f6:	f000 b811 	b.w	800721c <__retarget_lock_acquire_recursive>
 80071fa:	bf00      	nop
 80071fc:	20002290 	.word	0x20002290

08007200 <__malloc_unlock>:
 8007200:	4801      	ldr	r0, [pc, #4]	; (8007208 <__malloc_unlock+0x8>)
 8007202:	f000 b80c 	b.w	800721e <__retarget_lock_release_recursive>
 8007206:	bf00      	nop
 8007208:	20002290 	.word	0x20002290

0800720c <_malloc_usable_size_r>:
 800720c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007210:	1f18      	subs	r0, r3, #4
 8007212:	2b00      	cmp	r3, #0
 8007214:	bfbc      	itt	lt
 8007216:	580b      	ldrlt	r3, [r1, r0]
 8007218:	18c0      	addlt	r0, r0, r3
 800721a:	4770      	bx	lr

0800721c <__retarget_lock_acquire_recursive>:
 800721c:	4770      	bx	lr

0800721e <__retarget_lock_release_recursive>:
 800721e:	4770      	bx	lr

08007220 <_init>:
 8007220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007222:	bf00      	nop
 8007224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007226:	bc08      	pop	{r3}
 8007228:	469e      	mov	lr, r3
 800722a:	4770      	bx	lr

0800722c <_fini>:
 800722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722e:	bf00      	nop
 8007230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007232:	bc08      	pop	{r3}
 8007234:	469e      	mov	lr, r3
 8007236:	4770      	bx	lr
